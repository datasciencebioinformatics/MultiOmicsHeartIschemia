library(data.table)
library("dendextend")
library("viridis")
library(dplyr)
library(formattable)
library(tidyr)
library(xlsx)
library(Cairo)
library(gtable)
library(gridExtra)
library(waffle)
library(extrafont)
library(ggplot2)
library("plyr")
library("pheatmap")
library(gridExtra)
library(grid)
library(ggthemes)
library(FactoMineR)
library(ggrepel)
library(ggforce)
library(Cairo)
library("limma")
##########################################################################################################################################
# Set output
outputfolder="/home/flealvalentim/data/PREMED-CAD/"

##########################################################################################################################################
# First, function to load patient data:
##########################################################################################################################################
# Function to load the biomarkers data
load_data_Patients <- function() 
{
	##########################################################################################################################################
	#Load patient data
	CAD_Patients<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Patients_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Take the valid biomarkers
	valid_biomarkers<-as.vector(CAD_Patients[which(CAD_Patients$Exclusion_Biomarker==2),"ID_PATIENT"])

	# Filter out participants
	CAD_Patients<-CAD_Patients[which(CAD_Patients$Exclusion_Biomarker==2 & CAD_Patients$Exclusion_Ischemia==2),]

	# Refactor sex
	CAD_Patients$Sex<-factor(CAD_Patients$Sex)

	# Convert to numeric
	CAD_Patients$Age<-as.numeric(as.vector(CAD_Patients$Age))

	##########################################################################################################################################
	# Age
	# Plot the number of age category per diagnostic
	# Play with email campaing funnel (Age group in y-axis, diagnosis in x-axis)
	# http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html
	# Convert ISHCEMIA to factor
	# Make a copy
	CAD_Patients_Age<-CAD_Patients
	rownames(CAD_Patients_Age)<-CAD_Patients_Age$ID_PATIENT

	# Create factors
	CAD_Patients_Age[which(CAD_Patients_Age$Ischemia==1),"Ischemia"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$Ischemia==0),"Ischemia"]<-"No"

	# Male and female
	# Re-factor
	CAD_Patients_Age$Ischemia<-factor(CAD_Patients_Age$Ischemia)
	CAD_Patients_Age$Sex
	CAD_Patients_Age$Age

	# Calculate the BMI
	CAD_Patients_Age$BMI<-as.numeric(as.vector(CAD_Patients_Age$Weight))/(as.numeric(as.vector(CAD_Patients_Age$Height))/100*as.numeric(as.vector(CAD_Patients_Age$Height))/100)

	# Create factors
	CAD_Patients_Age$aHT_known<-as.numeric(as.vector(CAD_Patients_Age$aHT_known))
	CAD_Patients_Age[which(CAD_Patients_Age$aHT_known==1),"aHT_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$aHT_known==0),"aHT_known"]<-"No"
	CAD_Patients_Age$aHT_known<-factor(CAD_Patients_Age$aHT_known)

	# Create factors
	CAD_Patients_Age$HLP_known<-as.numeric(as.vector(CAD_Patients_Age$HLP_known))
	CAD_Patients_Age[which(CAD_Patients_Age$HLP_known==1),"HLP_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$HLP_known==0),"HLP_known"]<-"No"
	CAD_Patients_Age$HLP_known<-factor(CAD_Patients_Age$HLP_known)

	# Create factors
	CAD_Patients_Age$DMT2_known<-as.numeric(as.vector(CAD_Patients_Age$DMT2_known))
	CAD_Patients_Age[which(CAD_Patients_Age$DMT2_known==1),"DMT2_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$DMT2_known==0),"DMT2_known"]<-"No"
	CAD_Patients_Age$DMT2_known<-factor(CAD_Patients_Age$DMT2_known)

	# Create factors
	CAD_Patients_Age$Smoking_known<-as.numeric(as.vector(CAD_Patients_Age$Smoking_known))
	CAD_Patients_Age[which(CAD_Patients_Age$Smoking_known==1),"Smoking_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$Smoking_known==0),"Smoking_known"]<-"No"
	CAD_Patients_Age$Smoking_known<-factor(CAD_Patients_Age$Smoking_known)

	# Create factors
	CAD_Patients_Age$Fam_known<-as.numeric(as.vector(CAD_Patients_Age$Fam_known))
	CAD_Patients_Age[which(CAD_Patients_Age$Fam_known==1),"Fam_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$Fam_known==0),"Fam_known"]<-"No"
	CAD_Patients_Age$Fam_known<-factor(CAD_Patients_Age$Fam_known)

	# Create factors
	CAD_Patients_Age$CHD_known<-as.numeric(as.vector(CAD_Patients_Age$CHD_known))
	CAD_Patients_Age[which(CAD_Patients_Age$CHD_known==1),"CHD_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$CHD_known==0),"CHD_known"]<-"No"
	CAD_Patients_Age$CHD_known<-factor(CAD_Patients_Age$CHD_known)
	
	# Return(CAD_Patients_Age)
	return(CAD_Patients_Age)
}

##########################################################################################################################################
# First, function to load patient data:
##########################################################################################################################################
# Function to load the biomarkers data
load_data_MRI <- function() 
{
	##########################################################################################################################################
	#Load patient data
	perfusion_at_rest <-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_MRI_Curated.xlsx",startRow = 2, sheetIndex=1)
	perfusion_under_adenosine <-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_MRI_Curated.xlsx",startRow = 2, sheetIndex=2)
	scar <-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_MRI_Curated.xlsx",startRow = 2, sheetIndex=3)

	# Remove NA
	perfusion_at_rest<-perfusion_at_rest[!is.na(perfusion_at_rest$ID_PATIENT),]
	perfusion_under_adenosine<-perfusion_under_adenosine[!is.na(perfusion_under_adenosine$ID_PATIENT),]
	scar<-scar[!is.na(scar$ID_PATIENT),]

	##########################################################################################################################################
	rownames(perfusion_at_rest)<-perfusion_at_rest$ID_PATIENT
	rownames(perfusion_under_adenosine)<-perfusion_under_adenosine$ID_PATIENT
	rownames(scar)<-scar$ID_PATIENT	
	##########################################################################################################################################
	# Add information
	##########################################################################################################################################
	perfusion_at_rest<-cbind(perfusion_at_rest,CAD_Patients_Age[rownames(perfusion_at_rest),c("DMT2_known","Ischemia","Sex","Age")])
	perfusion_under_adenosine<-cbind(perfusion_under_adenosine,CAD_Patients_Age[rownames(perfusion_under_adenosine),c("DMT2_known","Ischemia","Sex","Age")])
	scar<-cbind(scar,CAD_Patients_Age[rownames(scar),c("DMT2_known","Ischemia","Sex","Age")])
	##########################################################################################################################################
	# Remove NA
	perfusion_at_rest<-na.omit(perfusion_at_rest) 
	perfusion_under_adenosine<-na.omit(perfusion_under_adenosine) 
	scar<-na.omit(scar) 
	##########################################################################################################################################
	perfusion_at_rest$Total_affected<-as.numeric(as.vector(perfusion_at_rest$Total_affected))
	perfusion_under_adenosine$Total_affected<-as.numeric(as.vector(perfusion_under_adenosine$Total_affected))
	scar$Total_affected<-as.numeric(as.vector(scar$Total_affected))
	##########################################################################################################################################
	# Create plots
	df_perfusion_at_rest<-rbind(data.frame(Group="Ischemic",Total_affected=perfusion_at_rest[which(perfusion_at_rest$Ischemia=="Yes"),"Total_affected"]),
	data.frame(Group="nonIschemic",Total_affected=perfusion_at_rest[which(perfusion_at_rest$Ischemia=="No"),"Total_affected"]))	
	df_perfusion_under_adenosine<-rbind(data.frame(Group="Ischemic",Total_affected=perfusion_under_adenosine[which(perfusion_under_adenosine$Ischemia=="Yes"),"Total_affected"]),
	data.frame(Group="nonIschemic",Total_affected=perfusion_under_adenosine[which(perfusion_under_adenosine$Ischemia=="No"),"Total_affected"]))
	df_scar<-rbind(data.frame(Group="Ischemic",Total_affected=scar[which(scar$Ischemia=="Yes"),"Total_affected"]),
	data.frame(Group="nonIschemic",Total_affected=scar[which(scar$Ischemia=="No"),"Total_affected"]))
	
	# Plot table
	# Print Association Results Patients All Var Info	
	print(paste(outputfolder,"Total_affected.png",sep="/"))
	Cairo(width = 6, height = 8, units = 'in', res = 600, file=paste(outputfolder,"Total_affected.png",sep="/"), type="png", bg="white")		
		#ggplot(df_Insulin, aes(x=Ischemia, y=Insulin, fill=Ischemia))+ geom_bar(position="dodge", stat="identity") 
		plot1<-ggplot(df_perfusion_at_rest, aes(x=Group, y=Total_affected, fill=Group))  +scale_fill_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+ geom_boxplot()+ggtitle("perfusion at rest")
		plot2<-ggplot(df_perfusion_under_adenosine, aes(x=Group, y=Total_affected, fill=Group))  +scale_fill_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+ geom_boxplot()+ggtitle("perfusion under adenosine")
		plot3<-ggplot(df_scar, aes(x=Group, y=Total_affected, fill=Group))  +scale_fill_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+ geom_boxplot()+ggtitle("scar")
		print(ggarrange(plotlist=list(plot1,plot2,plot3), ncol = 1, nrow = 3,common.legend = TRUE, legend = "bottom"))		
	dev.off()	
	
	# Transform to numeric
	perfusion_at_rest[,paste("Segment",1:17,sep="")]<-data.frame(sapply(perfusion_at_rest[,paste("Segment",1:17,sep="")], function(x) as.numeric(as.character(x))))
	perfusion_under_adenosine[,paste("Segment",1:17,sep="")]<-data.frame(sapply(perfusion_under_adenosine[,paste("Segment",1:17,sep="")], function(x) as.numeric(as.character(x))))
	scar[,paste("Segment",1:17,sep="")]<-data.frame(sapply(scar[,paste("Segment",1:17,sep="")], function(x) as.numeric(as.character(x))))
	
	# Get the sum
	perfusion_at_rest$SumScore<-rowSums(perfusion_at_rest[,paste("Segment",1:17,sep="")])
	perfusion_under_adenosine$SumScore<-rowSums(perfusion_under_adenosine[,paste("Segment",1:17,sep="")])
	scar$SumScore<-rowSums(scar[,paste("Segment",1:17,sep="")])
	
	##########################################################################################################################################
	# Create plots
	df_perfusion_at_rest<-rbind(data.frame(Group="Ischemic",SumScore=perfusion_at_rest[which(perfusion_at_rest$Ischemia=="Yes"),"SumScore"]),
	data.frame(Group="nonIschemic",SumScore=perfusion_at_rest[which(perfusion_at_rest$Ischemia=="No"),"SumScore"]))	
	df_perfusion_under_adenosine<-rbind(data.frame(Group="Ischemic",SumScore=perfusion_under_adenosine[which(perfusion_under_adenosine$Ischemia=="Yes"),"SumScore"]),
	data.frame(Group="nonIschemic",SumScore=perfusion_under_adenosine[which(perfusion_under_adenosine$Ischemia=="No"),"SumScore"]))
	df_scar<-rbind(data.frame(Group="Ischemic",SumScore=scar[which(scar$Ischemia=="Yes"),"SumScore"]),
	data.frame(Group="nonIschemic",SumScore=scar[which(scar$Ischemia=="No"),"SumScore"]))	
	
	# Plot table
	# Print Association Results Patients All Var Info	
	print(paste(outputfolder,"Total_affected.png",sep="/"))
	Cairo(width = 6, height = 8, units = 'in', res = 600, file=paste(outputfolder,"Total_affected.png",sep="/"), type="png", bg="white")		
		#ggplot(df_Insulin, aes(x=Ischemia, y=Insulin, fill=Ischemia))+ geom_bar(position="dodge", stat="identity") 
		plot1<-ggplot(df_perfusion_at_rest, aes(x=Group, y=SumScore, fill=Group))  +scale_fill_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+ geom_boxplot()+ggtitle("perfusion at rest")
		plot2<-ggplot(df_perfusion_under_adenosine, aes(x=Group, y=SumScore, fill=Group))  +scale_fill_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+ geom_boxplot()+ggtitle("perfusion under adenosine")
		plot3<-ggplot(df_scar, aes(x=Group, y=SumScore, fill=Group))  +scale_fill_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+ geom_boxplot()+ggtitle("scar")
		print(ggarrange(plotlist=list(plot1,plot2,plot3), ncol = 1, nrow = 3,common.legend = TRUE, legend = "bottom"))		
	dev.off()	
	
	##########################################################################################################################################
	# Get the sum
	# for each patient
	perfusion_at_rest$max<-0
	perfusion_under_adenosine$max<-0
	scar$max<-0
	
	perfusion_at_rest$avg<-0
	perfusion_under_adenosine$avg<-0
	scar$avg<-0	
	
	# Calculate max
	for (patient in rownames(perfusion_under_adenosine))
	{
		# Take all the values for that patient
		perfusion_at_rest[patient,"Max"]<-max(perfusion_at_rest[patient,paste("Segment",1:17,sep="")])
		perfusion_under_adenosine[patient,"Max"]<-max(perfusion_under_adenosine[patient,paste("Segment",1:17,sep="")])
		scar[patient,"Max"]<-max(scar[patient,paste("Segment",1:17,sep="")])
					
	}
	
	
	
	# Create plots
	df_perfusion_at_rest<-rbind(data.frame(Group="Ischemic",Max=perfusion_at_rest[which(perfusion_at_rest$Ischemia=="Yes"),"Max"]),
	data.frame(Group="nonIschemic",Max=perfusion_at_rest[which(perfusion_at_rest$Ischemia=="No"),"Max"]))	
	df_perfusion_under_adenosine<-rbind(data.frame(Group="Ischemic",Max=perfusion_under_adenosine[which(perfusion_under_adenosine$Ischemia=="Yes"),"Max"]),
	data.frame(Group="nonIschemic",Max=perfusion_under_adenosine[which(perfusion_under_adenosine$Ischemia=="No"),"Max"]))
	df_scar<-rbind(data.frame(Group="Ischemic",Max=scar[which(scar$Ischemia=="Yes"),"Max"]),
	data.frame(Group="nonIschemic",Max=scar[which(scar$Ischemia=="No"),"Max"]))		
	
	# Plot table
	# Print Association Results Patients All Var Info	
	print(paste(outputfolder,"Total_affected.png",sep="/"))
	Cairo(width = 6, height = 8, units = 'in', res = 600, file=paste(outputfolder,"Total_affected.png",sep="/"), type="png", bg="white")		
		#ggplot(df_Insulin, aes(x=Ischemia, y=Insulin, fill=Ischemia))+ geom_bar(position="dodge", stat="identity") 
		plot1<-ggplot(df_perfusion_at_rest, aes(x=Group, y=Max, fill=Group))  +scale_fill_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+ geom_boxplot()+ggtitle("perfusion at rest")
		plot2<-ggplot(df_perfusion_under_adenosine, aes(x=Group, y=Max, fill=Group))  +scale_fill_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+ geom_boxplot()+ggtitle("perfusion under adenosine")
		plot3<-ggplot(df_scar, aes(x=Group, y=Max, fill=Group))  +scale_fill_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+ geom_boxplot()+ggtitle("scar")
		print(ggarrange(plotlist=list(plot1,plot2,plot3), ncol = 1, nrow = 3,common.legend = TRUE, legend = "bottom"))		
	dev.off()		
	##########################################################################################################################################
	# Create regression model with all the segments
	formula.cat=paste("Ischemia",paste(paste("Segment",1:17,sep=""),collapse=" + "),sep=" ~ ")	
	
	# Fit lm models
	glm.perfusion_at_rest<-glm(formula=formula.cat,family=binomial(link='logit'), data=perfusion_at_rest, na.action=na.omit)							
	glm.perfusion_under_adenosine<-glm(formula=formula.cat,family=binomial(link='logit'), data=perfusion_under_adenosine, na.action=na.omit)							
	glm.scar<-glm(formula=formula.cat,family=binomial(link='logit'), data=scar, na.action=na.omit)							
	
	# Take values
	summary(glm.perfusion_at_rest)$coefficients[-c(1),]
	summary(glm.perfusion_under_adenosine)$coefficients[-c(1),]
	summary(glm.scar)$coefficients[-c(1),]
	
	library("cmR")
	# Create the plot
	print(paste(outputfolder,paste("Bullseye","ischemia","plot.png",sep=""),sep="/"))
	Cairo(width = 6.5, height = 2, units = 'in', res = 600, file=paste(outputfolder,paste("Bullseye","ischemia","plot.png",sep=""),sep="/"), type="png", bg="white")		
		par(mfrow=c(1,3))	
		# Diverging Barcharts
		# Take values
		bulleye_rest<-c(1,summary(glm.perfusion_at_rest)$coefficients[-c(1,17),4])
		bulleye_rest<-create_bull_eye(bulleye_rest)
		
		plot_rest<-bullseye(bulleye_rest, lim = NULL, reverse = TRUE, legend = TRUE, text = FALSE, cex = 0.3)
		# Take values
		bulleye_adenosine<-create_bull_eye(summary(glm.perfusion_under_adenosine)$coefficients[-c(1,17),4])
		plot_adenosine<-bullseye(bulleye_adenosine, lim = NULL, reverse = FALSE, legend = TRUE, text = FALSE, cex = 0.3)
		# Take values
		bulleye_scar<-create_bull_eye(summary(glm.scar)$coefficients[-c(1,17),4])
		plot_scar<-bullseye(bulleye_scar, lim = NULL, reverse = FALSE, legend = TRUE, text = FALSE, cex = 0.3)		
		#mtext(paste("Rest","Adenosine","Scar",sep="\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"), side=3, outer=TRUE, line=-3)
	dev.off()		
	
	# Transform into binary values
	# For each segments
	for (segments in paste("Segment",1:17,sep=""))
	{
		# replace value
		perfusion_under_adenosine[,segments]<-+(perfusion_under_adenosine[,segments] >= 1)
		scar[,segments]<-+(scar[,segments] >= 1)
		perfusion_at_rest[,segments]<-+(perfusion_at_rest[,segments] >= 1)
	}
	
	# Fit lm models
	glm.perfusion_at_rest<-glm(formula=formula.cat,family=binomial(link='logit'), data=perfusion_at_rest, na.action=na.omit)							
	glm.perfusion_under_adenosine<-glm(formula=formula.cat,family=binomial(link='logit'), data=perfusion_under_adenosine, na.action=na.omit)							
	glm.scar<-glm(formula=formula.cat,family=binomial(link='logit'), data=scar, na.action=na.omit)							
	
	# Take values
	summary(glm.perfusion_at_rest)$coefficients[-c(1),]
	summary(glm.perfusion_under_adenosine)$coefficients[-c(1),]
	summary(glm.scar)$coefficients[-c(1),]
	
	
	library("cmR")
	# Create the plot
	print(paste(outputfolder,paste("Bullseye","ischemia","plot.png",sep=""),sep="/"))
	Cairo(width = 6.5, height = 2, units = 'in', res = 600, file=paste(outputfolder,paste("Bullseye","ischemia","plot.png",sep=""),sep="/"), type="png", bg="white")		
		par(mfrow=c(1,3))	
		# Diverging Barcharts
		# Take values
		bulleye_rest<-c(1,summary(glm.perfusion_at_rest)$coefficients[-c(1,17),4])
		bulleye_rest<-create_bull_eye(bulleye_rest)
		
		plot_rest<-bullseye(bulleye_rest, lim = NULL, reverse = TRUE, legend = TRUE, text = FALSE, cex = 0.3)
		# Take values
		bulleye_adenosine<-create_bull_eye(summary(glm.perfusion_under_adenosine)$coefficients[-c(1,17),4])
		plot_adenosine<-bullseye(bulleye_adenosine, lim = NULL, reverse = FALSE, legend = TRUE, text = FALSE, cex = 0.3)
		# Take values
		bulleye_scar<-create_bull_eye(summary(glm.scar)$coefficients[-c(1,17),4])
		plot_scar<-bullseye(bulleye_scar, lim = NULL, reverse = FALSE, legend = TRUE, text = FALSE, cex = 0.3)		
		#mtext(paste("Rest","Adenosine","Scar",sep="\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"), side=3, outer=TRUE, line=-3)
	dev.off()	
	
		
	
	# Return(CAD_Patients_Age)
	return(CAD_Patients_Age)
}

# Function format bullsye
# Function to load the biomarkers data
create_bull_eye <- function(vec_segments=NULL) 
{
	# Reulst vector
	vector_results<-c()
	
	# Take the outer segments
	vector_results<-c(vector_results,vec_segments[c(6,1:5)])
	vector_results<-c(vector_results,vec_segments[c(12,7:11)])
	vector_results<-c(vector_results,vec_segments[c(13,14:16)])
	
	return(vector_results)
}
##########################################################################################################################################
# Function to load the biomarkers data
load_patient_data_full <- function() 
{
	#Load patient data
	CAD_Patients<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Patients_Curated.xlsx",startRow = 2, sheetIndex=1)
	
	# Take the valid biomarkers
	valid_biomarkers<-as.vector(CAD_Patients[which(CAD_Patients$Exclusion_Biomarker==2),"ID_PATIENT"])		
		
	# Take the valid biomarkers
	valid_Ischemia<-as.vector(CAD_Patients[which(CAD_Patients$Exclusion_Ischemia==2	),"ID_PATIENT"])			

	# Filter out participants
	#CAD_Patients<-CAD_Patients[which(CAD_Patients$Exclusion_Biomarker==2 & CAD_Patients$Exclusion_Ischemia==2),]

	# Refactor sex
	CAD_Patients$Sex<-factor(CAD_Patients$Sex)

	# Convert to numeric
	CAD_Patients$Age<-as.numeric(as.vector(CAD_Patients$Age))

	##########################################################################################################################################
	# Age
	# Plot the number of age category per diagnostic
	# Play with email campaing funnel (Age group in y-axis, diagnosis in x-axis)
	# http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html
	# Convert ISHCEMIA to factor
	# Make a copy
	CAD_Patients_Age<-CAD_Patients
	rownames(CAD_Patients_Age)<-CAD_Patients_Age$ID_PATIENT

	# Create factors
	CAD_Patients_Age[which(CAD_Patients_Age$Ischemia==1),"Ischemia"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$Ischemia==0),"Ischemia"]<-"No"

	##########################################################################################################################################
	# Male and female
	# Re-factor
	CAD_Patients_Age$Ischemia<-factor(CAD_Patients_Age$Ischemia)
	CAD_Patients_Age$Sex
	CAD_Patients_Age$Age

	# Calculate the BMI
	CAD_Patients_Age$BMI<-as.numeric(as.vector(CAD_Patients_Age$Weight))/(as.numeric(as.vector(CAD_Patients_Age$Height))/100*as.numeric(as.vector(CAD_Patients_Age$Height))/100)

	# Create factors
	CAD_Patients_Age$aHT_known<-as.numeric(as.vector(CAD_Patients_Age$aHT_known))
	CAD_Patients_Age[which(CAD_Patients_Age$aHT_known==1),"aHT_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$aHT_known==0),"aHT_known"]<-"No"
	CAD_Patients_Age$aHT_known<-factor(CAD_Patients_Age$aHT_known)

	# Create factors
	CAD_Patients_Age$HLP_known<-as.numeric(as.vector(CAD_Patients_Age$HLP_known))
	CAD_Patients_Age[which(CAD_Patients_Age$HLP_known==1),"HLP_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$HLP_known==0),"HLP_known"]<-"No"
	CAD_Patients_Age$HLP_known<-factor(CAD_Patients_Age$HLP_known)

	# Create factors
	CAD_Patients_Age$DMT2_known<-as.numeric(as.vector(CAD_Patients_Age$DMT2_known))
	CAD_Patients_Age[which(CAD_Patients_Age$DMT2_known==1),"DMT2_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$DMT2_known==0),"DMT2_known"]<-"No"
	CAD_Patients_Age$DMT2_known<-factor(CAD_Patients_Age$DMT2_known)

	# Create factors
	CAD_Patients_Age$Smoking_known<-as.numeric(as.vector(CAD_Patients_Age$Smoking_known))
	CAD_Patients_Age[which(CAD_Patients_Age$Smoking_known==1),"Smoking_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$Smoking_known==0),"Smoking_known"]<-"No"
	CAD_Patients_Age$Smoking_known<-factor(CAD_Patients_Age$Smoking_known)

	# Create factors
	CAD_Patients_Age$Fam_known<-as.numeric(as.vector(CAD_Patients_Age$Fam_known))
	CAD_Patients_Age[which(CAD_Patients_Age$Fam_known==1),"Fam_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$Fam_known==0),"Fam_known"]<-"No"
	CAD_Patients_Age$Fam_known<-factor(CAD_Patients_Age$Fam_known)

	# Create factors
	CAD_Patients_Age$CHD_known<-as.numeric(as.vector(CAD_Patients_Age$CHD_known))
	CAD_Patients_Age[which(CAD_Patients_Age$CHD_known==1),"CHD_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$CHD_known==0),"CHD_known"]<-"No"
	CAD_Patients_Age$CHD_known<-factor(CAD_Patients_Age$CHD_known)
	
	# Create factor
	CAD_Patients_Age$Box_Blood_samples<-factor(CAD_Patients_Age$Box_Blood_samples)
	
	# Return full table
	return(CAD_Patients_Age)
}	
##########################################################################################################################################
# Function to load the biomarkers data
load_patient_data_filtered <- function() 
{
	#Load patient data
	CAD_Patients<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Patients_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Take the valid biomarkers
	valid_biomarkers<-as.vector(CAD_Patients[which(CAD_Patients$Exclusion_Biomarker==2),"ID_PATIENT"])

	# Filter out participants
	CAD_Patients<-CAD_Patients[which(CAD_Patients$Exclusion_Biomarker==2 & CAD_Patients$Exclusion_Ischemia==2),]

	# Refactor sex
	CAD_Patients$Sex<-factor(CAD_Patients$Sex)

	# Convert to numeric
	CAD_Patients$Age<-as.numeric(as.vector(CAD_Patients$Age))

	##########################################################################################################################################
	# Age
	# Plot the number of age category per diagnostic
	# Play with email campaing funnel (Age group in y-axis, diagnosis in x-axis)
	# http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html
	# Convert ISHCEMIA to factor
	# Make a copy
	CAD_Patients_Age<-CAD_Patients
	rownames(CAD_Patients_Age)<-CAD_Patients_Age$ID_PATIENT

	# Create factors
	CAD_Patients_Age[which(CAD_Patients_Age$Ischemia==1),"Ischemia"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$Ischemia==0),"Ischemia"]<-"No"

	##########################################################################################################################################
	# Male and female
	# Re-factor
	CAD_Patients_Age$Ischemia<-factor(CAD_Patients_Age$Ischemia)
	CAD_Patients_Age$Sex
	CAD_Patients_Age$Age

	# Calculate the BMI
	CAD_Patients_Age$BMI<-as.numeric(as.vector(CAD_Patients_Age$Weight))/(as.numeric(as.vector(CAD_Patients_Age$Height))/100*as.numeric(as.vector(CAD_Patients_Age$Height))/100)

	# Create factors
	CAD_Patients_Age$aHT_known<-as.numeric(as.vector(CAD_Patients_Age$aHT_known))
	CAD_Patients_Age[which(CAD_Patients_Age$aHT_known==1),"aHT_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$aHT_known==0),"aHT_known"]<-"No"
	CAD_Patients_Age$aHT_known<-factor(CAD_Patients_Age$aHT_known)

	# Create factors
	CAD_Patients_Age$HLP_known<-as.numeric(as.vector(CAD_Patients_Age$HLP_known))
	CAD_Patients_Age[which(CAD_Patients_Age$HLP_known==1),"HLP_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$HLP_known==0),"HLP_known"]<-"No"
	CAD_Patients_Age$HLP_known<-factor(CAD_Patients_Age$HLP_known)

	# Create factors
	CAD_Patients_Age$DMT2_known<-as.numeric(as.vector(CAD_Patients_Age$DMT2_known))
	CAD_Patients_Age[which(CAD_Patients_Age$DMT2_known==1),"DMT2_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$DMT2_known==0),"DMT2_known"]<-"No"
	CAD_Patients_Age$DMT2_known<-factor(CAD_Patients_Age$DMT2_known)

	# Create factors
	CAD_Patients_Age$Smoking_known<-as.numeric(as.vector(CAD_Patients_Age$Smoking_known))
	CAD_Patients_Age[which(CAD_Patients_Age$Smoking_known==1),"Smoking_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$Smoking_known==0),"Smoking_known"]<-"No"
	CAD_Patients_Age$Smoking_known<-factor(CAD_Patients_Age$Smoking_known)

	# Create factors
	CAD_Patients_Age$Fam_known<-as.numeric(as.vector(CAD_Patients_Age$Fam_known))
	CAD_Patients_Age[which(CAD_Patients_Age$Fam_known==1),"Fam_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$Fam_known==0),"Fam_known"]<-"No"
	CAD_Patients_Age$Fam_known<-factor(CAD_Patients_Age$Fam_known)

	# Create factors
	CAD_Patients_Age$CHD_known<-as.numeric(as.vector(CAD_Patients_Age$CHD_known))
	CAD_Patients_Age[which(CAD_Patients_Age$CHD_known==1),"CHD_known"]<-"Yes"
	CAD_Patients_Age[which(CAD_Patients_Age$CHD_known==0),"CHD_known"]<-"No"
	CAD_Patients_Age$CHD_known<-factor(CAD_Patients_Age$CHD_known)
	
	# Return full table
	return(CAD_Patients_Age)
}

##########################################################################################################################################
# Second, function to load biomarkers data:
##########################################################################################################################################
##########################################################################################################################################
# Function to load the biomarkers data
load_data_Biomarkers_normalized_filtered <- function() 
{
	# Load biomarkers dataset
	# Use only data for which the all datasets are present  as.vector(CAD_Patients_Age$ID_PATIENT)
	# Plot patients vs. biomarkers
	# Try clustering/non-clustering (ordering Ischemia/Sex)
	# Number of biomarkers
	# Process MRI data
	#Load patient data
	CAD_Biomarkers<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Biomarkers_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames
	rownames(CAD_Biomarkers)<-as.vector(CAD_Biomarkers$ID_PATIENT)

	# Filter-out table
	CAD_Biomarkers<-CAD_Biomarkers[,-c(1,2)]

	# Percentage of complete data
	complete_data_per_variable<-data.frame(Biomarker=c(),completeness=c())


	# For each column, convert to numeric
	for (col_bio in colnames(CAD_Biomarkers))
	{
		# Replace by numeric
		CAD_Biomarkers[,col_bio]<-log(as.numeric(as.vector(CAD_Biomarkers[,col_bio])),10)
		#CAD_Biomarkers[,col_bio]<-as.numeric(as.vector(CAD_Biomarkers[,col_bio]))
				
		# Replace -inf
		CAD_Biomarkers[is.infinite(CAD_Biomarkers[,col_bio]),col_bio] <- NA
		CAD_Biomarkers[-is.infinite(CAD_Biomarkers[,col_bio]),col_bio] <- NA
			
		# Percentage of complete data
		complete_data_per_variable<-rbind(complete_data_per_variable,data.frame(Biomarker=c(col_bio),completeness=c(sum(!is.na(CAD_Biomarkers[,col_bio]))/length(CAD_Biomarkers[,col_bio])*100)))
	}
	rownames(complete_data_per_variable)<-complete_data_per_variable$Biomarker
	
	##########################################################################################################################################
	##########################################################################################################################################
	# Set test variable
	testingVar=colnames((CAD_Biomarkers))

	# remove variables with less than 90% completeness
	toRemovePatienInfoVar<-rownames(complete_data_per_variable[which(complete_data_per_variable$completeness<90),])
	#toRemovePatienInfoVar<-rownames(complete_data_per_variable[which(complete_data_per_variable$completeness<75),])
	#toRemovePatienInfoVar<-rownames(complete_data_per_variable[which(complete_data_per_variable$completeness<50),])

	# Remove variable
	testingVar<-testingVar[which(!testingVar %in% toRemovePatienInfoVar)]

	# Remove variable
	CAD_Biomarkers<-CAD_Biomarkers[rownames(CAD_Patients_Age),-which(colnames(CAD_Biomarkers) %in% toRemovePatienInfoVar)]	
	
	#########################################################################################################################################*
	# Make copy of biomarker data
	CAD_Biomarkers_work<-CAD_Biomarkers

	# Remove na
	CAD_Biomarkers_work<-CAD_Biomarkers_work[complete.cases(CAD_Biomarkers_work), ]	
	
	##########################################################################################################################################
	# Process age and selec variables
	# sig_variables
	# I stopped here for Monday
	# Look at the slide "Interactions among pairs of variables and Ischemia + DMT2"
	# Select top interactions (df_pval_results_cat)
	# Plot the correlation plots as well the countour plots around each of the phenotypes
	# Take only significant variables
	# Clean dataset by row
	CAD_Biomarkers_work<-CAD_Biomarkers_work[complete.cases(CAD_Biomarkers_work), ]


	# Scale data
	CAD_Biomarkers_work3<-CAD_Biomarkers_work
	#CAD_Biomarkers_work<-scale(CAD_Biomarkers_work,scale=FALSE)

	# Center for each variable 
	for (biom in colnames(CAD_Biomarkers_work))
	{
		# mean centering
		CAD_Biomarkers_work[,biom]<-(CAD_Biomarkers_work[,biom]-mean(CAD_Biomarkers_work[,biom]))/sd(CAD_Biomarkers_work[,biom])
	}
	##########################################################################################################################################	
	return(CAD_Biomarkers_work)
}

##########################################################################################################################################
# Function to load the biomarkers data
load_data_Biomarkers_lognormalized_filtered <- function() 
{
	# Load biomarkers dataset
	# Use only data for which the all datasets are present  as.vector(CAD_Patients_Age$ID_PATIENT)
	# Plot patients vs. biomarkers
	# Try clustering/non-clustering (ordering Ischemia/Sex)
	# Number of biomarkers
	# Process MRI data
	#Load patient data
	CAD_Biomarkers<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Biomarkers_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames
	rownames(CAD_Biomarkers)<-as.vector(CAD_Biomarkers$ID_PATIENT)

	# Filter-out table
	CAD_Biomarkers<-CAD_Biomarkers[,-c(1,2)]

	# Percentage of complete data
	complete_data_per_variable<-data.frame(Biomarker=c(),completeness=c())


	# For each column, convert to numeric
	for (col_bio in colnames(CAD_Biomarkers))
	{
		# Replace by numeric
		CAD_Biomarkers[,col_bio]<-log(as.numeric(as.vector(CAD_Biomarkers[,col_bio])),10)
		#CAD_Biomarkers[,col_bio]<-as.numeric(as.vector(CAD_Biomarkers[,col_bio]))
				
		# Replace -inf
		CAD_Biomarkers[is.infinite(CAD_Biomarkers[,col_bio]),col_bio] <- NA
		CAD_Biomarkers[-is.infinite(CAD_Biomarkers[,col_bio]),col_bio] <- NA
			
		# Percentage of complete data
		complete_data_per_variable<-rbind(complete_data_per_variable,data.frame(Biomarker=c(col_bio),completeness=c(sum(!is.na(CAD_Biomarkers[,col_bio]))/length(CAD_Biomarkers[,col_bio])*100)))
	}
	rownames(complete_data_per_variable)<-complete_data_per_variable$Biomarker
	
	##########################################################################################################################################
	##########################################################################################################################################
	# Set test variable
	testingVar=colnames((CAD_Biomarkers))

	# remove variables with less than 90% completeness
	toRemovePatienInfoVar<-rownames(complete_data_per_variable[which(complete_data_per_variable$completeness<90),])
	#toRemovePatienInfoVar<-rownames(complete_data_per_variable[which(complete_data_per_variable$completeness<75),])
	#toRemovePatienInfoVar<-rownames(complete_data_per_variable[which(complete_data_per_variable$completeness<50),])

	# Remove variable
	testingVar<-testingVar[which(!testingVar %in% toRemovePatienInfoVar)]

	# Remove variable
	CAD_Biomarkers<-CAD_Biomarkers[rownames(CAD_Patients_Age),-which(colnames(CAD_Biomarkers) %in% toRemovePatienInfoVar)]	
	
	#########################################################################################################################################*
	# Make copy of biomarker data
	CAD_Biomarkers_work<-CAD_Biomarkers

	# Remove na
	CAD_Biomarkers_work<-CAD_Biomarkers_work[complete.cases(CAD_Biomarkers_work), ]	
	
	##########################################################################################################################################
	# Process age and selec variables
	# sig_variables
	# I stopped here for Monday
	# Look at the slide "Interactions among pairs of variables and Ischemia + DMT2"
	# Select top interactions (df_pval_results_cat)
	# Plot the correlation plots as well the countour plots around each of the phenotypes
	# Take only significant variables

	# Clean dataset by row
	CAD_Biomarkers_work<-CAD_Biomarkers_work[complete.cases(CAD_Biomarkers_work), ]

	##########################################################################################################################################	
	return(CAD_Biomarkers_work)
}

##########################################################################################################################################
# Function to load the biomarkers data
load_data_Biomarkers_raw_filtered <- function() 
{
	# Load biomarkers dataset
	# Use only data for which the all datasets are present  as.vector(CAD_Patients_Age$ID_PATIENT)
	# Plot patients vs. biomarkers
	# Try clustering/non-clustering (ordering Ischemia/Sex)
	# Number of biomarkers
	# Process MRI data
	#Load patient data
	CAD_Biomarkers<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Biomarkers_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames
	rownames(CAD_Biomarkers)<-as.vector(CAD_Biomarkers$ID_PATIENT)

	# Filter-out table
	CAD_Biomarkers<-CAD_Biomarkers[,-c(1,2)]
	
	
	# For each column, convert to numeric
	for (col_bio in colnames(CAD_Biomarkers))
	{
		# Replace by numeric
		CAD_Biomarkers[,col_bio]<-as.numeric(as.vector(CAD_Biomarkers[,col_bio]))
	}	
	
			
	##########################################################################################################################################	
	return(CAD_Biomarkers)

}
##########################################################################################################################################
# Function to load the biomarkers data
load_data_Biomarkers_batchRemoval <- function(CAD_Biomarkers_work=NULL,CAD_Patients_Age=NULL) 
{
	library(limma)
	# Merge tables
	CAD_Biomarkers_batch<-merge(data.frame(CAD_Biomarkers_work,ID=rownames(CAD_Biomarkers_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_Biomarkers_batch)<-as.vector(CAD_Biomarkers_batch$ID)
	
	# Set rownames(CAD_Biomarkers_batch)
	rownames(CAD_Biomarkers_batch)<-as.vector(CAD_Biomarkers_batch$ID)	

	# Remove col ID
	CAD_Biomarkers_batch<-CAD_Biomarkers_batch[,-c(1)]
	
	# Set factors
	CAD_Biomarkers_batch$Box_Blood_samples<-as.factor(CAD_Biomarkers_batch$Box_Blood_samples)
	
	# Create model design
	design <- model.matrix(~CAD_Biomarkers_batch$Ischemia+CAD_Biomarkers_batch$Age+CAD_Biomarkers_batch$Sex)
	
	# Remove batch effect
	CAD_Biomarkers_batch <- t(removeBatchEffect(t(CAD_Biomarkers_batch[,colnames(CAD_Biomarkers_work)]), batch=CAD_Biomarkers_batch$Box_Blood_samples, design=design)) # y is a DEGList object	
		

	# Center for each variable 
	for (biom in colnames(CAD_Biomarkers_work))
	{			
		# mean centering
		CAD_Biomarkers_batch[,biom]<-(CAD_Biomarkers_batch[,biom]-mean(CAD_Biomarkers_batch[,biom]))/sd(CAD_Biomarkers_batch[,biom])
	}	
	return(CAD_Biomarkers_batch[,colnames(CAD_Biomarkers_work)])
}
##########################################################################################################################################
# Function to load the biomarkers data
load_data_Biomarkers_complete_raw <- function() 
{
	# Load biomarkers dataset
	# Use only data for which the all datasets are present  as.vector(CAD_Patients_Age$ID_PATIENT)
	# Plot patients vs. biomarkers
	# Try clustering/non-clustering (ordering Ischemia/Sex)
	# Number of biomarkers
	# Process MRI data
	#Load patient data
	CAD_Biomarkers<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Biomarkers_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames
	rownames(CAD_Biomarkers)<-as.vector(CAD_Biomarkers$ID_PATIENT)

	# Filter-out table
	CAD_Biomarkers<-CAD_Biomarkers[,-c(1,2)]

	# Percentage of complete data
	complete_data_per_variable<-data.frame(Biomarker=c(),completeness=c())


	# For each column, convert to numeric
	for (col_bio in colnames(CAD_Biomarkers))
	{
		# Replace by numeric
		CAD_Biomarkers[,col_bio]<-log(as.numeric(as.vector(CAD_Biomarkers[,col_bio])),10)
		#CAD_Biomarkers[,col_bio]<-as.numeric(as.vector(CAD_Biomarkers[,col_bio]))
				
		# Replace -inf
		CAD_Biomarkers[is.infinite(CAD_Biomarkers[,col_bio]),col_bio] <- NA
		CAD_Biomarkers[-is.infinite(CAD_Biomarkers[,col_bio]),col_bio] <- NA
			
		# Percentage of complete data
		complete_data_per_variable<-rbind(complete_data_per_variable,data.frame(Biomarker=c(col_bio),completeness=c(sum(!is.na(CAD_Biomarkers[,col_bio]))/length(CAD_Biomarkers[,col_bio])*100)))
	}
	rownames(complete_data_per_variable)<-complete_data_per_variable$Biomarker
	
	##########################################################################################################################################
	##########################################################################################################################################
	# Set test variable
	testingVar=colnames((CAD_Biomarkers))

	# remove variables with less than 90% completeness
	toRemovePatienInfoVar<-rownames(complete_data_per_variable[which(complete_data_per_variable$completeness<90),])
	#toRemovePatienInfoVar<-rownames(complete_data_per_variable[which(complete_data_per_variable$completeness<75),])
	#toRemovePatienInfoVar<-rownames(complete_data_per_variable[which(complete_data_per_variable$completeness<50),])

	# Remove variable
	testingVar<-testingVar[which(!testingVar %in% toRemovePatienInfoVar)]

	# Remove variable
	CAD_Biomarkers<-CAD_Biomarkers[rownames(CAD_Patients_Age),]	
	

	##########################################################################################################################################	
	return(CAD_Biomarkers)
}
##########################################################################################################################################
# Third, function to load metabolites data:
##########################################################################################################################################
##########################################################################################################################################
# Function to load the Metabolites data
load_data_Metabolites_noOutilers_raw <- function() 
{
	#Load patient data
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Percentage of complete data
	complete_data_per_variable<-data.frame(Metabolite=c(),completeness=c())

	# For each column, convert to numeric
	for (col_bio in colnames(CAD_Metabolites))
	{
		# Replace by numeric
		CAD_Metabolites[,col_bio]<-log(as.numeric(as.vector(CAD_Metabolites[,col_bio])),10)
		
		# Replace -inf
		CAD_Metabolites[is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
		CAD_Metabolites[-is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
			
		# Percentage of complete data
		complete_data_per_variable<-rbind(complete_data_per_variable,data.frame(Metabolite=c(col_bio),completeness=c(sum(!is.na(CAD_Metabolites[,col_bio]))/length(CAD_Metabolites[,col_bio])*100)))
	}
	# Remove na
	CAD_Metabolites<-CAD_Metabolites[,complete_data_per_variable[which(complete_data_per_variable$completeness>90),"Metabolite"]]

	# Remove na
	CAD_Metabolites<-CAD_Metabolites[complete.cases(CAD_Metabolites), ]

	# Filter-out smaller than 90% completeness
	PATIENS_ID<-intersect(rownames(CAD_Patients_Age),rownames(CAD_Metabolites))
	METABOLITES_ID<-colnames(CAD_Metabolites)

	# Reload file
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Filter-out smaller than 90% completeness
	CAD_Metabolites<-CAD_Metabolites[PATIENS_ID,METABOLITES_ID]


	CAD_Metabolites_return<-CAD_Metabolites		
	
	# Center for each variable 
	for (micro in colnames(CAD_Metabolites_return))
	{
		# mean centering
		CAD_Metabolites_return[,micro]<-as.numeric(as.vector(as.numeric(as.vector(CAD_Metabolites_return[,micro]))))
	}
			
	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_Metabolites_return)
}

##########################################################################################################################################
# Function to load the Metabolites data
load_data_Metabolites_noOutilers_logNorm_meanCentered <- function() 
{
	##########################################################################################################################################
	# Load biomarkers dataset
	#Load patient data
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Percentage of complete data
	complete_data_per_variable<-data.frame(Metabolite=c(),completeness=c())

	# For each column, convert to numeric
	for (col_bio in colnames(CAD_Metabolites))
	{
		# Replace by numeric
		CAD_Metabolites[,col_bio]<-log(as.numeric(as.vector(CAD_Metabolites[,col_bio])),10)
		
		# Replace -inf
		CAD_Metabolites[is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
		CAD_Metabolites[-is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
			
		# Percentage of complete data
		complete_data_per_variable<-rbind(complete_data_per_variable,data.frame(Metabolite=c(col_bio),completeness=c(sum(!is.na(CAD_Metabolites[,col_bio]))/length(CAD_Metabolites[,col_bio])*100)))
	}
	# Remove na
	CAD_Metabolites<-CAD_Metabolites[,complete_data_per_variable[which(complete_data_per_variable$completeness>90),"Metabolite"]]

	# Remove na
	CAD_Metabolites<-CAD_Metabolites[complete.cases(CAD_Metabolites), ]

	# Filter-out smaller than 90% completeness
	PATIENS_ID<-intersect(rownames(CAD_Patients_Age),rownames(CAD_Metabolites))
	METABOLITES_ID<-colnames(CAD_Metabolites)

	# Reload file
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Filter-out smaller than 90% completeness
	CAD_Metabolites<-CAD_Metabolites[PATIENS_ID,METABOLITES_ID]
	
	CAD_Metabolites_return<-CAD_Metabolites
	
	# Center for each variable 
	for (micro in colnames(CAD_Metabolites_return))
	{
		# mean centering
		CAD_Metabolites_return[,micro]<-log(as.numeric(as.vector(CAD_Metabolites_return[,micro])),10)
	}	
		
	# Center for each variable 
	for (micro in colnames(CAD_Metabolites_return))
	{
		# mean centering
		CAD_Metabolites_return[,micro]<-(CAD_Metabolites_return[,micro]-mean(as.numeric(as.vector(CAD_Metabolites_return[,micro]))))/sd( as.numeric(as.vector(CAD_Metabolites_return[,micro])))
	}	
	
	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_Metabolites_return)
}
##########################################################################################################################################
# Function to load the Metabolites data
load_data_Metabolites_noOutilers_logNorm <- function() 
{
	##########################################################################################################################################
	# Load biomarkers dataset
	#Load patient data
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Percentage of complete data
	complete_data_per_variable<-data.frame(Metabolite=c(),completeness=c())

	# For each column, convert to numeric
	for (col_bio in colnames(CAD_Metabolites))
	{
		# Replace by numeric
		CAD_Metabolites[,col_bio]<-log(as.numeric(as.vector(CAD_Metabolites[,col_bio])),10)
		
		# Replace -inf
		CAD_Metabolites[is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
		CAD_Metabolites[-is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
			
		# Percentage of complete data
		complete_data_per_variable<-rbind(complete_data_per_variable,data.frame(Metabolite=c(col_bio),completeness=c(sum(!is.na(CAD_Metabolites[,col_bio]))/length(CAD_Metabolites[,col_bio])*100)))
	}
	# Remove na
	CAD_Metabolites<-CAD_Metabolites[,complete_data_per_variable[which(complete_data_per_variable$completeness>90),"Metabolite"]]

	# Remove na
	CAD_Metabolites<-CAD_Metabolites[complete.cases(CAD_Metabolites), ]

	# Filter-out smaller than 90% completeness
	PATIENS_ID<-intersect(rownames(CAD_Patients_Age),rownames(CAD_Metabolites))
	METABOLITES_ID<-colnames(CAD_Metabolites)

	# Reload file
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Filter-out smaller than 90% completeness
	CAD_Metabolites<-CAD_Metabolites[PATIENS_ID,METABOLITES_ID]
	
	CAD_Metabolites_return<-CAD_Metabolites
	
	# Center for each variable 
	for (micro in colnames(CAD_Metabolites_return))
	{
		# mean centering
		CAD_Metabolites_return[,micro]<-log(as.numeric(as.vector(CAD_Metabolites_return[,micro])),10)
	}	
	
	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_Metabolites_return)
}
##########################################################################################################################################
# Function to load the Metabolites data
load_data_Metabolites_noOutilers_batch_removal_logNorm_meanCentered <- function(Metabolites=NULL) 
{
	##########################################################################################################################################
	# Load biomarkers dataset
	#Load patient data
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Percentage of complete data
	complete_data_per_variable<-data.frame(Metabolite=c(),completeness=c())

	# For each column, convert to numeric
	for (col_bio in colnames(CAD_Metabolites))
	{
		# Replace by numeric
		CAD_Metabolites[,col_bio]<-log(as.numeric(as.vector(CAD_Metabolites[,col_bio])),10)
		
		# Replace -inf
		CAD_Metabolites[is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
		CAD_Metabolites[-is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
			
		# Percentage of complete data
		complete_data_per_variable<-rbind(complete_data_per_variable,data.frame(Metabolite=c(col_bio),completeness=c(sum(!is.na(CAD_Metabolites[,col_bio]))/length(CAD_Metabolites[,col_bio])*100)))
	}
	# Remove na
	CAD_Metabolites<-CAD_Metabolites[,complete_data_per_variable[which(complete_data_per_variable$completeness>90),"Metabolite"]]

	# Remove na
	CAD_Metabolites<-CAD_Metabolites[complete.cases(CAD_Metabolites), ]

	# Filter-out smaller than 90% completeness
	PATIENS_ID<-intersect(rownames(CAD_Patients_Age),rownames(CAD_Metabolites))
	METABOLITES_ID<-colnames(CAD_Metabolites)

	# Reload file
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Filter-out smaller than 90% completeness
	CAD_Metabolites<-CAD_Metabolites[PATIENS_ID,METABOLITES_ID]
	
	# Chech if metabolites is null
	if (is.null(Metabolites))
	{
		Metabolites<-METABOLITES_ID
	}

	# Load Metabolites data
	CAD_Metabolites_work<-CAD_Metabolites[,Metabolites]

	# Merge tables
	CAD_Metabolites_work<-merge(data.frame(CAD_Metabolites_work,ID=rownames(CAD_Metabolites_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_Metabolites_work)<-as.vector(CAD_Metabolites_work$ID)
	
	# Remove col ID
	CAD_Metabolites_work<-CAD_Metabolites_work[,-c(1)]
	
	# Create factor
	CAD_Metabolites_work$Box_Blood_samples<-as.factor(CAD_Metabolites_work$Box_Blood_samples)
	
	# Set colnames
	colnames(CAD_Metabolites_work)[1:length(Metabolites)]<-Metabolites
	
	
	# Drop outliers	
	#CAD_Metabolites<-CAD_Metabolites[,-which(colnames(CAD_Metabolites) %in% outliers)]	
	CAD_Metabolites_return<-CAD_Metabolites_work[,Metabolites]	
	
	# Center for each variable 
	for (micro in colnames(CAD_Metabolites_return))
	{
		# mean centering
		CAD_Metabolites_return[,micro]<-as.numeric(as.vector(CAD_Metabolites_return[,micro]))
	}

	# Center for each variable 
	for (micro in colnames(CAD_Metabolites_return))
	{
		# mean centering
		CAD_Metabolites_return[,micro]<-log(as.numeric(as.vector(CAD_Metabolites_return[,micro])),10)
	}
	
	Ischemia<-CAD_Metabolites_work[rownames(CAD_Metabolites_return),"Ischemia"]
	Age<-CAD_Metabolites_work[rownames(CAD_Metabolites_return),"Age"]
	Sex<-CAD_Metabolites_work[rownames(CAD_Metabolites_return),"Sex"]
	
	# Create model design
	design <- model.matrix(~Ischemia+Age+Sex)
	
	# Remove batch effect
	CAD_Metabolites_return <- t(removeBatchEffect(t(CAD_Metabolites_return), batch=CAD_Metabolites_work[rownames(CAD_Metabolites_return),"Box_Blood_samples"], design=design))
		
		
	# Center for each variable 
	for (micro in colnames(CAD_Metabolites_return))
	{
		# mean centering
		CAD_Metabolites_return[,micro]<-(CAD_Metabolites_return[,micro]-mean(as.numeric(as.vector(CAD_Metabolites_return[,micro]))))/sd( as.numeric(as.vector(CAD_Metabolites_return[,micro])))
	}	
	
	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_Metabolites_return)
}	

##########################################################################################################################################
# Function to load the Metabolites data
load_data_Metabolites_noOutilers_batch_removal_logNorm <- function() 
{
	##########################################################################################################################################
	# Load biomarkers dataset
	#Load patient data
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Percentage of complete data
	complete_data_per_variable<-data.frame(Metabolite=c(),completeness=c())

	# For each column, convert to numeric
	for (col_bio in colnames(CAD_Metabolites))
	{
		# Replace by numeric
		CAD_Metabolites[,col_bio]<-log(as.numeric(as.vector(CAD_Metabolites[,col_bio])),10)
		
		# Replace -inf
		CAD_Metabolites[is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
		CAD_Metabolites[-is.infinite(CAD_Metabolites[,col_bio]),col_bio] <- NA
			
		# Percentage of complete data
		complete_data_per_variable<-rbind(complete_data_per_variable,data.frame(Metabolite=c(col_bio),completeness=c(sum(!is.na(CAD_Metabolites[,col_bio]))/length(CAD_Metabolites[,col_bio])*100)))
	}
	# Remove na
	CAD_Metabolites<-CAD_Metabolites[,complete_data_per_variable[which(complete_data_per_variable$completeness>90),"Metabolite"]]

	# Remove na
	CAD_Metabolites<-CAD_Metabolites[complete.cases(CAD_Metabolites), ]

	# Filter-out smaller than 90% completeness
	PATIENS_ID<-intersect(rownames(CAD_Patients_Age),rownames(CAD_Metabolites))
	METABOLITES_ID<-colnames(CAD_Metabolites)

	# Reload file
	CAD_Metabolites<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_Metabolites_Curated.xlsx",startRow = 2, sheetIndex=1)

	# Set rownames(CAD_Metabolites)
	rownames(CAD_Metabolites)<-as.vector(CAD_Metabolites[,2])

	# Drop first column
	CAD_Metabolites<-CAD_Metabolites[,-c(1:2)]	

	# Filter-out smaller than 90% completeness
	CAD_Metabolites<-CAD_Metabolites[PATIENS_ID,METABOLITES_ID]
	
	# Load Metabolites data
	CAD_Metabolites_work<-CAD_Metabolites

	# Merge tables
	CAD_Metabolites_work<-merge(data.frame(CAD_Metabolites_work,ID=rownames(CAD_Metabolites_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_Metabolites_work)<-as.vector(CAD_Metabolites_work$ID)
	
	# Remove col ID
	CAD_Metabolites_work<-CAD_Metabolites_work[,-c(1)]
	
	# Create factor
	CAD_Metabolites_work$Box_Blood_samples<-as.factor(CAD_Metabolites_work$Box_Blood_samples)
	
	# Set colnames
	colnames(CAD_Metabolites_work)[1:length(colnames(CAD_Metabolites))]<-colnames(CAD_Metabolites)
	
	
	# Drop outliers	
	#CAD_Metabolites<-CAD_Metabolites[,-which(colnames(CAD_Metabolites) %in% outliers)]	
	CAD_Metabolites_return<-CAD_Metabolites_work[,colnames(CAD_Metabolites)]	
	
	# Center for each variable 
	for (micro in colnames(CAD_Metabolites_return))
	{
		# mean centering
		CAD_Metabolites_return[,micro]<-as.numeric(as.vector(as.numeric(as.vector(CAD_Metabolites_return[,micro]))))
	}		
	
	Ischemia<-CAD_Metabolites_work[rownames(CAD_Metabolites_return),"Ischemia"]
	Age<-CAD_Metabolites_work[rownames(CAD_Metabolites_return),"Age"]
	Sex<-CAD_Metabolites_work[rownames(CAD_Metabolites_return),"Sex"]
	
	# Create model design
	design <- model.matrix(~Ischemia+Age+Sex)
	
	# Remove batch effect
	CAD_Metabolites_batch <- t(removeBatchEffect(t(CAD_Metabolites_return), batch=CAD_Metabolites_work[rownames(CAD_Metabolites_return),"Box_Blood_samples"], design=design))
	
	# Center for each variable 
	for (micro in colnames(CAD_Metabolites_return))
	{
		# mean centering
		CAD_Metabolites_return[,micro]<-log(as.numeric(as.vector(CAD_Metabolites_return[,micro])),10)
	}	

	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_Metabolites_return)
}	
##########################################################################################################################################
# Fourth, function to load microRNA data:
##########################################################################################################################################
##########################################################################################################################################
# Function to load the microRNA data
load_data_microRNA_noOutilers_raw <- function() 
{
	# Load biomarkers dataset
	#Load patient data
	CAD_microRNA<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_microRNA_Curated.xlsx",startRow = 1, sheetIndex=2)

	# Set rownames(CAD_microRNA)
	rownames(CAD_microRNA)<-as.vector(CAD_microRNA[,1])

	# Remove outliers
	outliers<-c("PATIENT174","PATIENT185","PATIENT224","PATIENT229","PATIENT273","PATIENT281","PATIENT283","PATIENT306","PATIENT341","PATIENT345","PATIENT384","PATIENT093","PATIENT369","PATIENT050")
	
	# Drop first column
	CAD_microRNA<-CAD_microRNA[,-c(1)]	
	
	# Drop outliers	
	CAD_microRNA<-CAD_microRNA[,-which(colnames(CAD_microRNA) %in% outliers)]	
			
	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_microRNA)
}

##########################################################################################################################################
# Function to load the microRNA data
load_data_microRNA_noOutilers_logNorm_meanCentered <- function() 
{
	# Load biomarkers dataset
	#Load patient data
	CAD_microRNA<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_microRNA_Curated.xlsx",startRow = 1, sheetIndex=1)

	# Set rownames(CAD_microRNA)
	rownames(CAD_microRNA)<-as.vector(CAD_microRNA[,1])

	# Remove outliers
	outliers<-c("PATIENT174","PATIENT185","PATIENT224","PATIENT229","PATIENT273","PATIENT281","PATIENT283","PATIENT306","PATIENT341","PATIENT345","PATIENT384","PATIENT093","PATIENT369","PATIENT050")
	
	# Drop first column
	CAD_microRNA<-CAD_microRNA[,-c(1)]	
	
	# Drop outliers	
	CAD_microRNA<-CAD_microRNA[,-which(colnames(CAD_microRNA) %in% outliers)]	
	
		
	# Center for each variable 
	for (micro in rownames(CAD_microRNA))
	{
		# mean centering
		CAD_microRNA[micro,]<-(CAD_microRNA[micro,]-mean(as.numeric(as.vector(CAD_microRNA[micro,]))))/sd( as.numeric(as.vector(CAD_microRNA[micro,])))
	}	
	
	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_microRNA)
}
##########################################################################################################################################
# Function to load the microRNA data
load_data_microRNA_noOutilers_logNorm <- function() 
{
	# Load biomarkers dataset
	#Load patient data
	CAD_microRNA<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_microRNA_Curated.xlsx",startRow = 1, sheetIndex=1)

	# Set rownames(CAD_microRNA)
	rownames(CAD_microRNA)<-as.vector(CAD_microRNA[,1])

	# Remove outliers
	outliers<-c("PATIENT174","PATIENT185","PATIENT224","PATIENT229","PATIENT273","PATIENT281","PATIENT283","PATIENT306","PATIENT341","PATIENT345","PATIENT384","PATIENT093","PATIENT369","PATIENT050")
	
	# Drop first column
	CAD_microRNA<-CAD_microRNA[,-c(1)]	
	
	# Drop outliers	
	CAD_microRNA<-CAD_microRNA[,-which(colnames(CAD_microRNA) %in% outliers)]	
	
	# Center for each variable 
	#for (micro in colnames(CAD_microRNA))
	#{
	#	# mean centering
	#	CAD_microRNA[,micro]<-(CAD_microRNA[,micro]-mean(CAD_microRNA[,micro]))/sd(CAD_microRNA[,micro])
	#}	
	
	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_microRNA)
}
##########################################################################################################################################
# Function to load the microRNA data
load_data_microRNA_noOutilers_batch_removal_logNorm_meanCentered <- function(microRNA=NULL) 
{
	# Load biomarkers dataset
	#Load patient data
	CAD_microRNA<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_microRNA_Curated.xlsx",startRow = 1, sheetIndex=1)

	# Set rownames(CAD_microRNA)
	rownames(CAD_microRNA)<-as.vector(CAD_microRNA[,1])

	# Remove outliers
	outliers<-c("PATIENT174","PATIENT185","PATIENT224","PATIENT229","PATIENT273","PATIENT281","PATIENT283","PATIENT306","PATIENT341","PATIENT345","PATIENT384","PATIENT093","PATIENT369","PATIENT050")
	
	# Drop first column
	CAD_microRNA<-CAD_microRNA[,-c(1)]	
	
	# Drop outliers	
	CAD_microRNA<-CAD_microRNA[,-which(colnames(CAD_microRNA) %in% outliers)]	
	
	# Load microRNA data
	CAD_microRNA_work<-CAD_microRNA

	# Merge tables
	CAD_microRNA_work<-merge(data.frame(t(CAD_microRNA_work),ID=rownames(t(CAD_microRNA_work))),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_microRNA_work)<-as.vector(CAD_microRNA_work$ID)
	
	# Remove col ID
	CAD_microRNA_work<-CAD_microRNA_work[,-c(1)]
	
	# Create factor
	CAD_microRNA_work$Box_Blood_samples<-as.factor(CAD_microRNA_work$Box_Blood_samples)
	
	# Set colnames
	colnames(CAD_microRNA_work)[1:length(rownames(CAD_microRNA))]<-rownames(CAD_microRNA)
	
	# Fitler out
	CAD_microRNA<-CAD_microRNA[,rownames(CAD_microRNA_work)]
	
	
	# Chech if metabolites is null
	if (is.null(microRNA))
	{
		microRNA<-rownames(CAD_microRNA)
	}	
		
	# Save the batch effect removed values
	CAD_microRNA_batch<-CAD_microRNA[microRNA,]
	
	# Create model design
	design <- model.matrix(~CAD_microRNA_work$Ischemia+CAD_microRNA_work$Age+CAD_microRNA_work$Sex)
	
	# Remove batch effect
	CAD_microRNA_batch <- removeBatchEffect(CAD_microRNA_batch, batch=CAD_microRNA_work$Box_Blood_samples, design=design) # y is a DEGList object
		
	# Center for each variable 
	for (micro in microRNA)
	{
		# mean centering
		CAD_microRNA_batch[micro,]<-(CAD_microRNA_batch[micro,]-mean(CAD_microRNA_batch[micro,]))/sd(CAD_microRNA_batch[micro,])
	}	
	
	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_microRNA_batch)
}	

##########################################################################################################################################
# Function to load the microRNA data
load_data_microRNA_noOutilers_batch_removal_logNorm <- function() 
{
	# Load biomarkers dataset
	#Load patient data
	CAD_microRNA<-read.xlsx("/home/flealvalentim/data/PREMED-CAD/BMI-CAD_microRNA_Curated.xlsx",startRow = 1, sheetIndex=1)

	# Set rownames(CAD_microRNA)
	rownames(CAD_microRNA)<-as.vector(CAD_microRNA[,1])

	# Remove outliers
	outliers<-c("PATIENT174","PATIENT185","PATIENT224","PATIENT229","PATIENT273","PATIENT281","PATIENT283","PATIENT306","PATIENT341","PATIENT345","PATIENT384","PATIENT093","PATIENT369","PATIENT050")
	
	# Drop first column
	CAD_microRNA<-CAD_microRNA[,-c(1)]	
	
	# Drop outliers	
	CAD_microRNA<-CAD_microRNA[,-which(colnames(CAD_microRNA) %in% outliers)]	
	
	# Load microRNA data
	CAD_microRNA_work<-CAD_microRNA

	# Merge tables
	CAD_microRNA_work<-merge(data.frame(t(CAD_microRNA_work),ID=rownames(t(CAD_microRNA_work))),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_microRNA_work)<-as.vector(CAD_microRNA_work$ID)
	
	# Remove col ID
	CAD_microRNA_work<-CAD_microRNA_work[,-c(1)]
	
	# Create factor
	CAD_microRNA_work$Box_Blood_samples<-as.factor(CAD_microRNA_work$Box_Blood_samples)
	
	# Set colnames
	colnames(CAD_microRNA_work)[1:length(rownames(CAD_microRNA))]<-rownames(CAD_microRNA)
	
	# Fitler out
	CAD_microRNA<-CAD_microRNA[,rownames(CAD_microRNA_work)]
	
	# Save the batch effect removed values
	CAD_microRNA_batch<-CAD_microRNA
	
	# Create model design
	design <- model.matrix(~CAD_microRNA_work$Ischemia+CAD_microRNA_work$Age+CAD_microRNA_work$Sex)
	
	# Remove batch effect
	CAD_microRNA_batch <- removeBatchEffect(CAD_microRNA_batch, batch=CAD_microRNA_work$Box_Blood_samples, design=design) # y is a DEGList object
	
	##########################################################################################################################################
	# Create file with all the layers
	##########################################################################################################################################
	# Filter-out table
	return(CAD_microRNA_batch)

}	
##########################################################################################################################################
# Function to compute glm
##########################################################################################################################################
# Function to load the biomarkers data
compute_glm_Testing <- function(dataset=NULL,dataset_raw=NULL,tesVar=NULL,Sex=FALSE,correction=NULL)
{
	CAD_Biomarkers_work<-dataset

	# Merge tables
	CAD_Biomarkers_work<-merge(data.frame(CAD_Biomarkers_work,ID=rownames(CAD_Biomarkers_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_Biomarkers_work)<-as.vector(CAD_Biomarkers_work$ID)

	# Remove col ID
	CAD_Biomarkers_work<-CAD_Biomarkers_work[,-c(1)]

	# Save final pvaules
	df_pval_results_final<-data.frame()
	
	# Create numeric respresentation of sex	
	CAD_Biomarkers_work$Sex2<-as.numeric(gsub("F",0,as.vector(gsub("M",1,as.vector(CAD_Biomarkers_work$Sex)))))

	# Take expression levels
	df_fc<-data.frame(Biomarker=c(),lfc_Ischemia_Control=c(),lfc_Male_Female=c())
	
	# Change protein names
	colnames(CAD_Biomarkers_work)[1:dim(dataset)[2]]<-colnames(dataset)	
	
	
		
	#for each protein
	for (protein in colnames(dataset))
	{
		print(protein)
				
		# Create results df
		df_pval_results_cat<-data.frame(estimate=c(),pvalue=c())
		
		# teste var
		testedVar<-c()		
								
		# If test var if Sex
		if (tesVar=="Sex")
		{
			# Take expression in cased
			female_exp<-dataset_raw[intersect(all_ids,female_ids),protein]
			
			# Take expression in control
			male_exp<-dataset_raw[intersect(all_ids,male_ids),protein]
			
			# Take expression in cased
			Ischemia_exp<-dataset_raw[intersect(all_ids,patients_ids),protein]
			
			# Take expression in control
			Control_exp<-dataset_raw[intersect(all_ids,control_ids),protein]		
			
			# Fold change Male/Female
			fc_male_female=formatC(log((mean(male_exp)/mean(female_exp)),10), format = "f", digits = 3)
												
			
			# Fold change Ishchemia/Control
			fc_ischemia_control=formatC(log((mean(Ischemia_exp)/mean(Control_exp)),10), format = "f", digits = 3)
									
			# Concatenate results
			df_fc<-rbind(df_fc,data.frame(Biomarker=protein,lfc_Ischemia_Control=fc_ischemia_control,lfc_Male_Female=fc_male_female))
			
			# Check if contain string "-"
			if (grepl('[*|-]', protein))
			{
				# Create formula : tested variable ~ age_sampling				
				formula.cat=paste("Sex2",paste(paste0("`", protein, "`"),"Age","Box_Blood_samples",sep=" + "),sep=" ~ ")				
				#formula.restraint=paste("Sex2",paste("Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
			}else
			{
				formula.cat=paste("Sex2",paste(protein,"Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
			}				
			# Create formula : tested variable ~ age_sampling			
			formula.restraint=paste("Sex2",paste("Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
		}else
		{
			# Create formula : tested variable ~ age_sampling
			# Check if contain string "-"
			if (grepl('[*|-]', protein))
			{
				# Create formula : tested variable ~ age_sampling				
				formula.cat=paste(tesVar,paste(paste0("`", protein, "`"),"Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ ")				
				#formula.cat=paste(tesVar,paste(protein,"Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ ")
			}else
			{
				formula.cat=paste(tesVar,paste(protein,"Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ ")
			}							
			
			formula.restraint=paste(tesVar,paste("Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ ")
		}		
		if(Sex)
		{					
			# Create formula : tested variable ~ age_sampling
			# Check if contain string "-"
			if (grepl('[*|-]', protein))
			{
				# Create formula : tested variable ~ age_sampling				
				formula.cat=paste(tesVar,paste(paste0("`", protein, "`"),"Age","Box_Blood_samples",sep=" + "),sep=" ~ ")				
				#formula.cat=paste(tesVar,paste(protein,"Age","Box_Blood_samples",sep=" + "),sep=" ~ ")				
			}else
			{
				formula.cat=paste(tesVar,paste(protein,"Age","Box_Blood_samples",sep=" + "),sep=" ~ ")				
			}

			formula.restraint=paste(tesVar,paste("Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
		}
		# If there is any correction 
		if (!is.null(correction))
		{
			# If corrections not null				
			formula.cat<-as.formula(paste(formula.cat,paste(correction,collapse=" + "),sep=" + "))	
			formula.restraint<-as.formula(paste(formula.restraint,paste(correction,collapse=" + "),sep=" + "))
		}
		# If variable different from age and se
		if (tesVar!="Age" & tesVar!="BMI" & tesVar!="Box_Blood_samples")
		{
			# take variable
			testedVar<-c(testedVar,tesVar)
		
			# Fit lm models
			glm.cat<-glm(formula=formula.cat,family=binomial(link='logit'), data=CAD_Biomarkers_work, na.action=na.omit)						
			glm.restraint<-glm(formula=formula.restraint,family=binomial(link='logit'), data=CAD_Biomarkers_work, na.action=na.omit)						
		
			# summary
			summary.glm.cat<-summary(glm.cat)
			# Take p-value
			# Check if contain string "-"
			if (grepl('[*|-]', protein))
			{
				pvalue<-formatC(summary(glm.cat)$coefficients[paste0("`", protein, "`"),4], format = "E", digits = 4)
				beta<-formatC(summary(glm.cat)$coefficients[paste0("`", protein, "`"),1], format = "f", digits = 2)

			}else
			{
				pvalue<-formatC(summary(glm.cat)$coefficients[protein,4], format = "E", digits = 4)
				beta<-formatC(summary(glm.cat)$coefficients[protein,1], format = "f", digits = 2)
			}	
			#pvalue<-summary(glm.cat)$coefficients[protein,4]
			#beta<-summary(glm.cat)$coefficients[protein,1]
		
			# Calculate nrows
			if (nrow(df_pval_results_cat)==0)
			{
				# Start data.frame
				df_pval_results_cat<-data.frame(estimate=beta,pvalue=pvalue)
			}else
			#
			{
				# Concatenate results
				df_pval_results_cat<-cbind(df_pval_results_cat,data.frame(estimate=beta,pvalue=pvalue))
			}								
		}	
		
		# data.frame results
		df_pval_results_final<-rbind(df_pval_results_final,df_pval_results_cat)
	}
	# Set rownames(df_pval_results_final)
	rownames(df_pval_results_final)<-colnames(dataset)

	# Set colnames(df_pval_results_final)
	colnames(df_pval_results_final)<-c(rbind(paste("b",testedVar), paste("p",testedVar)))

	# Set biomarker coluln
	df_pval_results_final$Biomarker<-colnames(dataset)
			
	# Truncate values
	#df_pval_results_final[,2:14]<-round(df_pval_results_final[,2:14],5)

	# Order by pvalue
	df_pval_results_final<-df_pval_results_final[order(df_pval_results_final[,2]),]

	library(ggpubr)
	# Create how names
	rownames(df_pval_results_final)<-as.vector(df_pval_results_final$Biomarker)

	# Exclude biomarker column
	df_pval_results_final2<-df_pval_results_final
	
	# If test var if Sex
	if (tesVar=="Sex")
	{
		# Merge datasets
		df_pval_results_final2<-merge(df_pval_results_final2,df_fc,by=colnames(df_pval_results_final)[3])
	}	

	# Return results
	return(df_pval_results_final2)
	
}

##########################################################################################################################################
# Function to compute glm
##########################################################################################################################################
# Function to load the biomarkers data
compute_glm_Testing_complete <- function(dataset=NULL,dataset_raw=NULL,tesVar=NULL,Sex=FALSE,correction=NULL)
{
	CAD_Biomarkers_work<-dataset

	# Merge tables
	CAD_Biomarkers_work<-merge(data.frame(CAD_Biomarkers_work,ID=rownames(CAD_Biomarkers_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_Biomarkers_work)<-as.vector(CAD_Biomarkers_work$ID)

	# Remove col ID
	CAD_Biomarkers_work<-CAD_Biomarkers_work[,-c(1)]

	# Save final pvaules
	df_pval_results_final<-data.frame()
	
	# Create numeric respresentation of sex	
	CAD_Biomarkers_work$Sex2<-as.numeric(gsub("F",0,as.vector(gsub("M",1,as.vector(CAD_Biomarkers_work$Sex)))))
	
	# Change protein names
	colnames(CAD_Biomarkers_work)[1:dim(dataset)[2]]<-colnames(dataset)		

	# Take expression levels
	df_fc<-data.frame(Biomarker=c(),lfc_Ischemia_Control=c(),lfc_Male_Female=c())
		
	#for each protein
	for (protein in colnames(dataset))
	{
		print(protein)
				
		# Create results df
		df_pval_results_cat<-data.frame(estimate=c(),pvalue=c())
		
		# teste var
		testedVar<-c()		
								
		# If test var if Sex
		if (tesVar=="Sex")
		{
			# Take expression in cased
			female_exp<-dataset_raw[intersect(all_ids,female_ids),protein]
			
			# Take expression in control
			male_exp<-dataset_raw[intersect(all_ids,male_ids),protein]
			
			# Take expression in cased
			Ischemia_exp<-dataset_raw[intersect(all_ids,patients_ids),protein]
			
			# Take expression in control
			Control_exp<-dataset_raw[intersect(all_ids,control_ids),protein]		
			
			# Fold change Male/Female
			fc_male_female=formatC(log((mean(male_exp)/mean(female_exp)),10), format = "f", digits = 3)
															
			# Fold change Ishchemia/Control
			fc_ischemia_control=formatC(log((mean(Ischemia_exp)/mean(Control_exp)),10), format = "f", digits = 3)
			
						
			# Concatenate results
			df_fc<-rbind(df_fc,data.frame(Biomarker=protein,lfc_Ischemia_Control=fc_ischemia_control,lfc_Male_Female=fc_male_female))
		
			# Create formula : tested variable ~ age_sampling
			formula.cat=paste("Sex2",paste(protein,"Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
			formula.restraint=paste("Sex2",paste("Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
		}else
		{
			# Create formula : tested variable ~ age_sampling
			formula.cat=paste(tesVar,paste(protein,"Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ ")
			formula.restraint=paste(tesVar,paste("Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ ")
		}		
		if(Sex)
		{			
			# Create formula : tested variable ~ age_sampling
			formula.cat=paste(tesVar,paste(protein,"Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
			formula.restraint=paste(tesVar,paste("Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
		}
		# Check if contain string "-"
		if (grepl('[*|-]', protein))
		{
			# Correct formula
			formula.cat<-gsub(protein,paste0("`", protein, "`"),formula.cat)
		}		
		# If there is any correction 
		if (!is.null(correction))
		{
			# If corrections not null
			formula.cat<-as.formula(paste(formula.cat,paste(correction,collapse=" + "),sep=" + "))
			formula.restraint<-as.formula(paste(formula.restraint,paste(correction,collapse=" + "),sep=" + "))
		}
		# If variable different from age and se
		if (tesVar!="Age" & tesVar!="BMI" & tesVar!="Box_Blood_samples")
		{
			# take variable
			testedVar<-c(testedVar,tesVar)
			
		
			# Fit lm models
			glm.cat<-glm(formula=formula.cat,family=binomial(link='logit'), data=CAD_Biomarkers_work, na.action=na.omit)						
			glm.restraint<-glm(formula=formula.restraint,family=binomial(link='logit'), data=CAD_Biomarkers_work, na.action=na.omit)						
		
			# summary
			summary.glm.cat<-summary(glm.cat)
			# Take p-value
			# Check if contain string "-"
			if (grepl('[*|-]', protein))
			{
				pvalue<-formatC(summary(glm.cat)$coefficients[paste0("`", protein, "`"),4], format = "E", digits = 4)
				beta<-formatC(summary(glm.cat)$coefficients[paste0("`", protein, "`"),1], format = "f", digits = 2)
				se<-formatC(summary(glm.cat)$coefficients[paste0("`", protein, "`"),2], format = "f", digits = 2)			

			}else
			{
				pvalue<-formatC(summary(glm.cat)$coefficients[protein,4], format = "E", digits = 4)
				beta<-formatC(summary(glm.cat)$coefficients[protein,1], format = "f", digits = 2)
				se<-formatC(summary(glm.cat)$coefficients[protein,2], format = "f", digits = 2)
			}
			
			#pvalue<-summary(glm.cat)$coefficients[protein,4]
			#beta<-summary(glm.cat)$coefficients[protein,1]
		
			# Calculate nrows
			if (nrow(df_pval_results_cat)==0)
			{
				# Start data.frame
				df_pval_results_cat<-data.frame(estimate=beta,se=se,pvalue=pvalue)
			}else
			#
			{
				# Concatenate results
				df_pval_results_cat<-cbind(df_pval_results_cat,data.frame(estimate=beta,se=se,pvalue=pvalue))
			}								
		}	
		
		# data.frame results
		df_pval_results_final<-rbind(df_pval_results_final,df_pval_results_cat)
	}
	# Set rownames(df_pval_results_final)
	rownames(df_pval_results_final)<-colnames(dataset)

	# Set colnames(df_pval_results_final)
	colnames(df_pval_results_final)<-c(rbind(paste("b",testedVar),paste("se",testedVar), paste("p",testedVar)))

	# Set biomarker coluln
	df_pval_results_final$Biomarker<-colnames(dataset)
			
	# Truncate values
	#df_pval_results_final[,2:14]<-round(df_pval_results_final[,2:14],5)

	# Order by pvalue
	df_pval_results_final<-df_pval_results_final[order(df_pval_results_final[,2]),]

	library(ggpubr)
	# Create how names
	rownames(df_pval_results_final)<-as.vector(df_pval_results_final$Biomarker)

	# Exclude biomarker column
	df_pval_results_final2<-df_pval_results_final	

	# Return results
	return(df_pval_results_final2)
	
}
##########################################################################################################################################
# Function to plot glm results
##########################################################################################################################################
# Function to load the biomarkers data
plot_Association_Ischemia_DMT2_Sex <- function(testVar=NULL,table_plot=NULL,filename=NULL)
{
	# Plot table
	# Print Association Results Patients All Var Info	
	print(filename)
	Cairo(width = 18.5, height = dim(table_plot)[1]*0.35, units = 'in', res = 600, file=filename, type="png", bg="white")		
		# Truncate values
		tab <- ggtexttable(table_plot,theme = ttheme("classic",base_size=16))		
		
		# First, color the significant ones for ischemia in orange
		# Mark significant cells with the color of the variable
		
		sigcells_All_Ischemia<-which(as.numeric(as.vector(table_plot[,paste("All p ",testVar,sep="")]))<0.1)
		
		# For each cell
		for (cell in sigcells_All_Ischemia)
		{		
			# Set colors
			if(testVar=="Ischemia")
			{
				# Ischemia
				color  = as.vector(varColor$Ischemia["Yes"])
			}
			# Set colors
			if(testVar=="DMT2")
			{
				# DMT2
				color  = as.vector(varColor$DMT2_known["Yes"])
			}
		
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 2,fill=color, color  = color)
			tab <- table_cell_bg(tab, row = cell+1, column = 3,fill=color, color  = color)
			tab <- table_cell_bg(tab, row = cell+1, column = 4,fill=color, color  = color)
		}		
		# First, color the significant ones for ischemia in orange
		# Mark significant cells with the color of the variable
		sigcells_Male_Ischemia<-which(as.numeric(as.vector(table_plot[,paste("Male p ",testVar,sep="")]))<0.1)

		# For each cell
		for (cell in sigcells_Male_Ischemia)
		{		
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 5,fill=as.vector(varColor$Sex["M"]), color  = as.vector(varColor$Sex["M"]))
			tab <- table_cell_bg(tab, row = cell+1, column = 6,fill=as.vector(varColor$Sex["M"]), color  = as.vector(varColor$Sex["M"]))
		}	
		
		# First, color the significant ones for ischemia in orange
		# Mark significant cells with the color of the variable
		sigcells_Female_Ischemia<-which(as.numeric(as.vector(table_plot[,paste("Female p ",testVar,sep="")]))<0.1)

		# For each cell
		for (cell in sigcells_Female_Ischemia)
		{		
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 7,fill=as.vector(varColor$Sex["F"]), color  = as.vector(varColor$Sex["F"]))
			tab <- table_cell_bg(tab, row = cell+1, column = 8,fill=as.vector(varColor$Sex["F"]), color  = as.vector(varColor$Sex["F"]))
		}

		# First, color the significant ones for ischemia in orange
		# Mark significant cells with the color of the variable
		sigcells_All_Sex<-which(as.numeric(as.vector(table_plot[,"All p Sex"]))<0.1)

		# For each cell
		for (cell in sigcells_All_Sex)
		{		
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 9,fill="grey", color  = "grey")
			tab <- table_cell_bg(tab, row = cell+1, column = 10,fill="grey", color  = "grey")
			tab <- table_cell_bg(tab, row = cell+1, column = 11,fill="grey", color  = "grey")
		}		
		
		print(tab)
	dev.off()
}	
##########################################################################################################################################
# Function to compute glm
##########################################################################################################################################
# Function to load the biomarkers data
compute_multinomial_Testing <- function(dataset=NULL,dataset_raw=NULL,tesVar=NULL,Sex=FALSE,correction=NULL,mergeby=NULL)
{
	# Load required library
	library("nnet")
	
	# CAD_Biomarkers_work<-NULL
	CAD_Biomarkers_work<-NULL
	
	# Start data.frame
	CAD_Biomarkers_work<-dataset

	# Merge tables
	CAD_Biomarkers_work<-merge(data.frame(CAD_Biomarkers_work,ID=rownames(CAD_Biomarkers_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_Biomarkers_work)<-as.vector(CAD_Biomarkers_work$ID)

	# Remove col ID
	CAD_Biomarkers_work<-CAD_Biomarkers_work[,-c(1)]

	# Save final pvaules
	df_pval_results_final<-data.frame()	
		
	#for each protein
	for (protein in colnames(dataset))
	{
		print(protein)
				
		# Create results df
		df_pval_results_cat<-data.frame(estimate=c(),pvalue=c())
		
		# teste var
		testedVar<-c()		
									
		# Create formula : tested variable ~ age_sampling
		formula.cat=paste(tesVar,paste(protein,"Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ ")
		formula.restraint=paste(tesVar,paste("Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ ")
		
		if(Sex)
		{			
			# Create formula : tested variable ~ age_sampling
			formula.cat=paste(tesVar,paste(protein,"Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
			formula.restraint=paste(tesVar,paste("Age","Box_Blood_samples",sep=" + "),sep=" ~ ")
		}
		# If there is any correction 
		if (!is.null(correction))
		{
			# If corrections not null
			formula.cat<-as.formula(paste(formula.cat,paste(correction,collapse=" + "),sep=" + "))
			formula.restraint<-as.formula(paste(formula.restraint,paste(correction,collapse=" + "),sep=" + "))
		}
		# If variable different from age and se
		if (tesVar!="Age" & tesVar!="BMI" & tesVar!="Box_Blood_samples")
		{
			# take variable
			testedVar<-c(testedVar,tesVar)
		
			# Fit lm models
			glm.cat<-multinom(formula=formula.cat, data=CAD_Biomarkers_work, na.action=na.omit)						
			glm.restraint<-multinom(formula=formula.restraint, data=CAD_Biomarkers_work, na.action=na.omit)						

			# Compute anova
			anova(glm.cat,glm.restraint)
			z <- summary(glm.cat)$coefficients/summary(glm.cat)$standard.errors
			p <- data.frame((1 - pnorm(abs(z), 0, 1)) * 2)[,protein]
			beta<-data.frame(summary(glm.cat)$coefficients)[,protein]


			# Take p-value
			pvalue<-formatC(p, format = "E", digits = 4)
			beta<-formatC(beta, format = "f", digits = 2)
			
			# Set names(pvalue)
			names(pvalue)<-rownames(summary(glm.cat)$coefficients)
			names(beta)<-rownames(summary(glm.cat)$coefficients)
			
			# Take the final row
			final_row<-c()
			
			# Create final row
			for (level_result in rownames(summary(glm.cat)$coefficients))
			{
				# Take pvalue and the beta
				final_row<-c(final_row,beta[level_result],pvalue[level_result])				
						
			}
			# For each unique name
			for (l in rep(seq(from=1, to=length(final_row), by=2),1))
			{
				# Take tha value
				names(final_row)[l]<-paste("b",names(final_row)[l])
				names(final_row)[l+1]<-paste("p",names(final_row)[l+1])				
			}
			# Calculate nrows
			if (nrow(df_pval_results_cat)==0)
			{
				# Start data.frame
				df_pval_results_cat<-data.frame(t(final_row))
				
				# Set colnames()
				colnames(df_pval_results_cat)<-names(final_row)

			}else
			#
			{
				# Concatenate results
				df_pval_results_cat<-rbind(df_pval_results_cat,final_row)
			}								
		}	
		
		# data.frame results
		df_pval_results_final<-rbind(df_pval_results_final,df_pval_results_cat)
	}
	# Set rownames(df_pval_results_final)
	rownames(df_pval_results_final)<-colnames(CAD_Biomarkers)

	# Set colnames(df_pval_results_final)
	#colnames(df_pval_results_final)<-c(rbind(paste("b",testedVar), paste("p",testedVar)))

	# Set biomarker coluln
	df_pval_results_final$Biomarker<-colnames(CAD_Biomarkers)
			
	# Truncate values
	#df_pval_results_final[,2:14]<-round(df_pval_results_final[,2:14],5)

	# Order by pvalue
	df_pval_results_final<-df_pval_results_final[order(df_pval_results_final[,2]),]

	library(ggpubr)
	# Create how names
	rownames(df_pval_results_final)<-as.vector(df_pval_results_final$Biomarker)

	# Exclude biomarker column
	df_pval_results_final2<-df_pval_results_final
	
	# Return results
	return(df_pval_results_final2)
	
}
##########################################################################################################################################
# Function to plot glm results
##########################################################################################################################################
# Function to load the biomarkers data
plot_Association_Multinomial <- function(testVar=NULL,data=NULL,table_plot=NULL,filename=NULL)
{
	# Plot table
	# Print Association Results Patients All Var Info	
	print(filename)
	Cairo(width = 24.0, height = dim(table_plot)[1]*0.35, units = 'in', res = 600, file=filename, type="png", bg="white")		
		# Copy table
		table_plot_f<-table_plot
	
		# Replace colnames
		colnames(table_plot_f)<-gsub(data,"",colnames(table_plot))
	
		# Truncate values
		tab <- ggtexttable(table_plot_f,theme = ttheme("classic",base_size=16))		
		
		# For each beta column
		levels_plot<-unique(gsub(data,"",gsub(" p ","",gsub(" b ","",colnames(table_plot)))))
		
		# Start iterator
		IT<-0
		
		# For each level_result
		for (level_result in levels_plot)
		{	

			# Set iterator
			IT<-IT+1
			
			# First, color the significant ones for ischemia in orange
			# Mark significant cells with the color of the variable		
			sigcells_levels<-which(as.numeric(as.vector(table_plot[,paste(data," p ",level_result,sep="")]))<0.001)					
			
			# Take talso the coluln
			sigcells_column<-which(colnames(table_plot)==paste(data," p ",level_result,sep=""))					

			# For each cell
			for (cell in sigcells_levels)
			{		
				# Set colors
				if(data=="All")
				{
					# Ischemia
					color  = "grey"
															
				}
				# Set colors
				if(data=="Male")
				{
					# Male
					color  = as.vector(varColor$Sex["M"])
				}
				# Set Female
				if(data=="Female")
				{
					# DMT2
					color  = as.vector(varColor$Sex["F"])
				}	
				# Set color
				color  = addalpha(color, 0.25*IT)
							
				# Add color to cell
				tab <- table_cell_bg(tab, row = cell+1, column = sigcells_column,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = sigcells_column+1,fill=color, color  = color)
			}				
		}				
		print(tab)		
	dev.off()
	return(tab)
}	

##########################################################################################################################################
# Function to plot glm results
##########################################################################################################################################
# Function to load the biomarkers data
plot_stepAIC_results <- function(stepAIC_results=NULL,filename=NULL,dataset=NULL)
{
	# Print Association Results Patients All Var Info	
	print(filename)
	# Truncate values
	#table<-round(summary(glm.ddsPLS)$coefficient,5)[-c(1),]
	table<-round(summary(stepAIC_results)$coefficients,5)[-c(1),]
	table<-data.frame(cbind(Var=rownames(table),table))
	colnames(table)<-c("Var","Estimate","std.error","z.value","pvalue")	
	table<-table[order(-abs(as.numeric(as.vector(table$Estimate)))),]
	table<-data.frame(cbind(RNK=1:length(rownames(table)),table))
	table$Var<-gsub("Yes","",gsub("SexM","Sex",table$Var))

	# Ronwmaes(table)
	rownames(table)<-table$Var
	
	# Define basal bariables
	basal_variables<-c("Age","Sex","Box_Blood_samples","DMT2_known","Smoking_known")
	
	# Take basal variables in rtable
	basal_variables<-basal_variables[which(basal_variables %in% rownames(table)[which( rownames(table) %in% basal_variables)])]
	
	# Start table position
	table$POS<-1000
	
	# For each basal variable
	IT<-1
	for (bv in basal_variables)
	{
		# Put basal barial in first place
		basal_index<-which(table$Var==bv)
		
		# If greater than zero
		if(length(basal_index)>0)
		{
			table[c(which(rownames(table) %in% bv)),"POS"]<-IT
			IT<-IT+1
		}
		
	}
	# Re-order table
	table<-table[with(table, order(POS, RNK)), ]
	
	# Take max position
	max_position<-max(table[which(table$POS<1000),"POS"])
	
	#for each undefined position
	IT<-max_position+1
	for (undef_pos in which(table$POS==1000))
	{
		# Redefine position
		table[undef_pos,"POS"]<-IT
		
		# Set IT
		IT<-IT+1		
	}	
	tab <- ggtexttable(table,theme = ttheme("classic",base_size=16),rows = NULL)		

	# For each variable
	for (Testedvariable in colnames(dataset))
	{	
		# Take the name of the variable
		var_name<-Testedvariable
								
		# Mark significant cells with the color of the variable
		sigcells<-c(which(as.numeric(as.vector(table$pvalue))<0.05),which(as.numeric(as.vector(table$POS))<=2))
		
		# Take the colors of the variable
		color<-"#add8e6"			

				
		# For each cell
		for (cell in sigcells)
		{		
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 2,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 3,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 4,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 5,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 6,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 7,fill=color)
			
		}
	}			
	
	print(tab)
	
	return(table)
}
##########################################################################################################################################
# Function to tertile analysis
##########################################################################################################################################
# Function to tertile analysis
plot_interactionPairs_Selected_Terciles <- function(dataset=NULL,dataset_complete=NULL,selected_interacting_table=NULL,outputfolder=NULL)
{
	library("questionr")
	library("latticeExtra")
	library("lattice")
	# Take the interacting pairs
	#interacting_pair<-as.vector(selected_interacting_table$Interaction)[1]
	interacting_pair<-as.vector(selected_interacting_table$Interaction)[1]
	
	
	# For each biomarker
	for (biomarker_pair in as.vector(selected_interacting_table$Interaction))
	#for (biomarker_pair in as.vector(c("HbA1c*MRPROANP","Homoarginin*MRPROADM","MRPROADM*CRP")))
	{
		# Take the two termw independently
		term1<-unlist(strsplit(biomarker_pair,split="\\*"))[1]
		term2<-unlist(strsplit(biomarker_pair,split="\\*"))[2]	
		
		# Create tertile 
		PATIENTS_1_TERTILE_term1<-rownames(dataset[which(ntile(dataset[,term1], 3)==1),])
		PATIENTS_2_TERTILE_term1<-rownames(dataset[which(ntile(dataset[,term1], 3)==2),])
		PATIENTS_3_TERTILE_term1<-rownames(dataset[which(ntile(dataset[,term1], 3)==3),])
		
		# Create tertile 
		PATIENTS_1_TERTILE_term2<-rownames(dataset[which(ntile(dataset[,term2], 3)==1),])
		PATIENTS_2_TERTILE_term2<-rownames(dataset[which(ntile(dataset[,term2], 3)==2),])
		PATIENTS_3_TERTILE_term2<-rownames(dataset[which(ntile(dataset[,term2], 3)==3),])		
		
		# Save tertile
		dataset_complete$TertileTerm1<-""		
		dataset_complete[PATIENTS_1_TERTILE_term1,"Tertile"]<-"1st"
		dataset_complete[PATIENTS_2_TERTILE_term1,"Tertile"]<-"2nd"
		dataset_complete[PATIENTS_3_TERTILE_term1,"Tertile"]<-"3rd"
		dataset_complete$Term2<-dataset_complete[,term2]
				
		# Contruct interaction term
		formula.cat<-paste(paste("Tertile"," ~ ",sep=""), " Age + Sex + Box_Blood_samples + Term2",sep="")
		
		# Fit glm models
		dataset_complete$Tertile <- factor(dataset_complete$Tertile, levels = c("1st","2nd","3rd"))
		glm.cat.tertile1<-multinom(formula=formula.cat, data=dataset_complete, na.action=na.omit)						
		or.tertile1<-odds.ratio(glm.cat.tertile1, level = 0.95)		
		
		# Fit glm models
		dataset_complete$Tertile <- factor(dataset_complete$Tertile, levels = c("2nd","1st","3rd"))
		glm.cat.tertile2<-multinom(formula=formula.cat, data=dataset_complete, na.action=na.omit)						
		or.tertile2<-odds.ratio(glm.cat.tertile2, level = 0.95)				
		
		# Fit glm models
		dataset_complete$Tertile <- factor(dataset_complete$Tertile, levels = c("3rd","1st","2nd"))
		glm.cat.tertile3<-multinom(formula=formula.cat, data=dataset_complete, na.action=na.omit)						
		or.tertile3<-odds.ratio(glm.cat.tertile3, level = 0.95)		
		
		# Take OR results 
		tertile_1_OR<-c(NA,
		or.tertile1[which(rownames((or.tertile1))==paste("2nd/Term2")),"OR"],
		or.tertile1[which(rownames((or.tertile1))==paste("3rd/Term2")),"OR"])		
		tertile_2_OR<-c(or.tertile2[which(rownames((or.tertile2))==paste("1st/Term2")),"OR"],
		NA,
		or.tertile2[which(rownames((or.tertile2))==paste("3rd/Term2")),"OR"])				
		tertile_3_OR<-c(or.tertile3[which(rownames((or.tertile3))==paste("1st/Term2")),"OR"],
		or.tertile3[which(rownames((or.tertile3))==paste("2nd/Term2")),"OR"],
		NA)		

		# Take OR results 
		tertile_1_pval<-c(NA,
		or.tertile1[which(rownames((or.tertile1))==paste("2nd/Term2")),"p"],
		or.tertile1[which(rownames((or.tertile1))==paste("3rd/Term2")),"p"])		
		tertile_2_pval<-c(or.tertile2[which(rownames((or.tertile2))==paste("1st/Term2")),"p"],
		NA,
		or.tertile2[which(rownames((or.tertile2))==paste("3rd/Term2")),"p"])				
		tertile_3_pval<-c(or.tertile3[which(rownames((or.tertile3))==paste("1st/Term2")),"p"],
		or.tertile3[which(rownames((or.tertile3))==paste("2nd/Term2")),"p"],
		NA)	
		
		# Takle
		tertile_1_beta<-c(NA,
		summary(glm.cat.tertile1)$coefficients["2nd","Term2"],
		summary(glm.cat.tertile1)$coefficients["3rd","Term2"])		
		tertile_2_beta<-c(summary(glm.cat.tertile2)$coefficients["1st","Term2"],
		NA,
		summary(glm.cat.tertile2)$coefficients["3rd","Term2"])		
		tertile_3_beta<-c(summary(glm.cat.tertile3)$coefficients["1st","Term2"],
		summary(glm.cat.tertile3)$coefficients["2nd","Term2"],
		NA)				
		
		# Create tables
		df_tertile_OR<-rbind(round(tertile_1_OR,4),round(tertile_2_OR,4),round(tertile_3_OR,4))
		df_tertile_pval<-rbind(round(tertile_1_pval,4),round(tertile_2_pval,4),round(tertile_3_pval,4))
		df_tertile_beta<-rbind(round(tertile_1_beta,4),round(tertile_2_beta,4),round(tertile_3_beta,4))
		# set colnames and rownames
		colnames(df_tertile_OR)<-c("1st","2nd","3rd")
		colnames(df_tertile_pval)<-c("1st","2nd","3rd")
		colnames(df_tertile_beta)<-c("1st","2nd","3rd")
		rownames(df_tertile_OR)<-c("1st","2nd","3rd")
		rownames(df_tertile_pval)<-c("1st","2nd","3rd")
		rownames(df_tertile_beta)<-c("1st","2nd","3rd")
		
		# Greate plot
		tab_df_tertile_OR <- ggtexttable(df_tertile_OR,theme = ttheme("classic",base_size=16))		
		tab_df_tertile_pval <- ggtexttable(df_tertile_pval,theme = ttheme("classic",base_size=16))		
		tab_df_tertile_beta <- ggtexttable(df_tertile_beta,theme = ttheme("classic",base_size=16))		

		# Create tables
		pval_df_formatted<-rbind(data.frame(Term1="1st",Term2="1st",pval=1-log(tertile_1_pval[1])),
		data.frame(Term1="1st",Term2="2nd",pval=1-log(tertile_1_pval[2])),
		data.frame(Term1="1st",Term2="3rd",pval=1-log(tertile_1_pval[3])),	
		data.frame(Term1="2nd",Term2="1st",pval=1-log(tertile_2_pval[1])),
		data.frame(Term1="2nd",Term2="2nd",pval=1-log(tertile_2_pval[2])),
		data.frame(Term1="2nd",Term2="3rd",pval=1-log(tertile_2_pval[3])),		
		data.frame(Term1="3rd",Term2="1st",pval=1-log(tertile_3_pval[1])),
		data.frame(Term1="3rd",Term2="2nd",pval=1-log(tertile_3_pval[2])),
		data.frame(Term1="3rd",Term2="3rd",pval=1-log(tertile_3_pval[3])))	
		
		# Create tables
		or_df_formatted<-rbind(data.frame(Term1="1st",Term2="1st",OR=1-log(tertile_1_pval[1])),
		data.frame(Term1="1st",Term2="2nd",OR=1-log(tertile_1_pval[2])),
		data.frame(Term1="1st",Term2="3rd",OR=1-log(tertile_1_pval[3])),	
		data.frame(Term1="2nd",Term2="1st",OR=1-log(tertile_2_pval[1])),
		data.frame(Term1="2nd",Term2="2nd",OR=1-log(tertile_2_pval[2])),
		data.frame(Term1="2nd",Term2="3rd",OR=1-log(tertile_2_pval[3])),		
		data.frame(Term1="3rd",Term2="1st",OR=1-log(tertile_3_pval[1])),
		data.frame(Term1="3rd",Term2="2nd",OR=1-log(tertile_3_pval[2])),
		data.frame(Term1="3rd",Term2="3rd",OR=1-log(tertile_3_pval[3])))

		# Create tables
		or_df_formatted<-rbind(data.frame(Term1="1st",Term2="1st",OR=tertile_1_OR[1]),
		data.frame(Term1="1st",Term2="2nd",OR=tertile_1_OR[2]),
		data.frame(Term1="1st",Term2="3rd",OR=tertile_1_OR[3]),
		data.frame(Term1="2nd",Term2="1st",OR=tertile_2_OR[1]),
		data.frame(Term1="2nd",Term2="2nd",OR=tertile_2_OR[2]),
		data.frame(Term1="2nd",Term2="3rd",OR=tertile_2_OR[3]),
		data.frame(Term1="3rd",Term2="1st",OR=tertile_3_OR[1]),
		data.frame(Term1="3rd",Term2="2nd",OR=tertile_3_OR[2]),
		data.frame(Term1="3rd",Term2="3rd",OR=tertile_3_OR[3]))
		
		# Create tables
		beta_df_formatted<-rbind(data.frame(Term1="1st",Term2="1st",beta=tertile_1_beta[1]),
		data.frame(Term1="1st",Term2="2nd",beta=tertile_1_beta[2]),
		data.frame(Term1="1st",Term2="3rd",beta=tertile_1_beta[3]),
		data.frame(Term1="2nd",Term2="1st",beta=tertile_2_beta[1]),
		data.frame(Term1="2nd",Term2="2nd",beta=tertile_2_beta[2]),
		data.frame(Term1="2nd",Term2="3rd",beta=tertile_2_beta[3]),
		data.frame(Term1="3rd",Term2="1st",beta=tertile_3_beta[1]),
		data.frame(Term1="3rd",Term2="2nd",beta=tertile_3_beta[2]),
		data.frame(Term1="3rd",Term2="3rd",beta=tertile_3_beta[3]))		
		
		
		
		# Plot table
		# Print Association Results Patients All Var Info	
		Cairo(width = 8, height = 8, units = 'in', res = 600, file=paste(outputfolder,"/",paste(term1,"_",term2,sep=""),"_TertileAnalysis_pval.png",sep=""), type="png", bg="white")												
		print(cloud(pval~Term1+Term2, pval_df_formatted, panel.3d.cloud=panel.3dbars, col.facet='grey',
				main = "p-values",xbase=0.5, ybase=0.5, scales=list(arrows=FALSE, col=1), panel.aspect = 1,zlab="1-log(pval)",xlab=paste( "tertiles",term1,sep="\n"),ylab=paste( "tertiles",term2,sep="\n"),par.settings = list(axis.line = list(col = "transparent"),par.main.text = list(y=-6))))
		dev.off()

		# Plot table
		# Print Association Results Patients All Var Info	
		Cairo(width = 8, height = 8, units = 'in', res = 600, file=paste(outputfolder,"/",paste(term1,"_",term2,sep=""),"_TertileAnalysis_OR.png",sep=""), type="png", bg="white")										
		par(adj = 0)
		print(cloud(OR~Term1+Term2, or_df_formatted, panel.3d.cloud=panel.3dbars, col.facet='grey',
				main = "OR",xbase=0.5, ybase=0.5, scales=list(arrows=FALSE, col=1), panel.aspect = 1,zlab="OR",xlab=paste( "tertiles",term1,sep="\n"),ylab=paste( "tertiles",term2,sep="\n"),par.settings = list(axis.line = list(col = "transparent"),par.main.text = list(y=-6))))
		dev.off()				
		
		# Plot table
		# Print Association Results Patients All Var Info	
		Cairo(width = 8, height = 8, units = 'in', res = 600, file=paste(outputfolder,"/",paste(term1,"_",term2,sep=""),"_TertileAnalysis_beta.png",sep=""), type="png", bg="white")										
		par(adj = 0)
		print(cloud(beta~Term1+Term2, beta_df_formatted, panel.3d.cloud=panel.3dbars, col.facet='grey',
				main = "coefficient",xbase=0.5, ybase=0.5, scales=list(arrows=FALSE, col=1), panel.aspect = 1,zlab="beta",xlab=paste( "tertiles",term1,sep="\n"),ylab=paste( "tertiles",term2,sep="\n"),par.settings = list(axis.line = list(col = "transparent"),par.main.text = list(y=-6))))
		dev.off()	
		
		# Load package
		require(gridExtra)
		# Combine plots
		plot1<-cloud(pval~Term1+Term2, pval_df_formatted, panel.3d.cloud=panel.3dbars, col.facet='grey',main = "p-values",xbase=0.5, ybase=0.5, scales=list(arrows=FALSE, col=1), panel.aspect = 1,zlab="1-log(pval)",xlab=paste( "tertiles",term1,sep="\n"),ylab=paste( "tertiles",term2,sep="\n"),par.settings = list(axis.line = list(col = "transparent"),par.main.text = list(y=-6)))		
		plot3<-cloud(OR~Term1+Term2, or_df_formatted, panel.3d.cloud=panel.3dbars, col.facet='grey',main = "OR",xbase=0.5, ybase=0.5, scales=list(arrows=FALSE, col=1), panel.aspect = 1,zlab="OR",xlab=paste( "tertiles",term1,sep="\n"),ylab=paste( "tertiles",term2,sep="\n"),par.settings = list(axis.line = list(col = "transparent"),par.main.text = list(y=-6)))		
		plot2<-cloud(beta~Term1+Term2, beta_df_formatted, panel.3d.cloud=panel.3dbars, col.facet='grey',main = "coefficient",xbase=0.5, ybase=0.5, scales=list(arrows=FALSE, col=1), panel.aspect = 1,zlab="beta",xlab=paste( "tertiles",term1,sep="\n"),ylab=paste( "tertiles",term2,sep="\n"),par.settings = list(axis.line = list(col = "transparent"),par.main.text = list(y=-6)))
		
		# Print Association Results Patients All Var Info	
		Cairo(width = 24, height = 8, units = 'in', res = 600, file=paste(outputfolder,"/",paste(term1,"_",term2,sep=""),"_TertileAnalysis_comb1.png",sep=""), type="png", bg="white")										
			 Figure1<-grid.arrange(plot1,plot2,plot3, ncol=3,nrow=1,padding = c(0))
			 print(Figure1)
		dev.off()
		
		# Print Association Results Patients All Var Info	
		Cairo(width = 24, height = 4, units = 'in', res = 600, file=paste(outputfolder,"/",paste(term1,"_",term2,sep=""),"_TertileAnalysis_comb2.png",sep=""), type="png", bg="white")										
			 Figure2<-grid.arrange(tab_df_tertile_pval,tab_df_tertile_beta,tab_df_tertile_OR, ncol=3,nrow=1,padding = c(0))
			 print(Figure2)
		dev.off()		
	
	}		
}	
##########################################################################################################################################
# Function to tertile analysis
##########################################################################################################################################
# Function to tertile analysis
plot_BN_Selected_Terciles <- function(dataset_log=NULL,dataset_complete=NULL,molecules=NULL,outputfolder=NULL,datalayer="biomarker")
{
	library("questionr")
	library("latticeExtra")
	library("lattice")
	Ischemia_color<-c(colorblind_pal()(8)[c(1,2)])
	# For each of the selected molecules
	for (molecule in molecules)
	{
		print(molecule)
		# Take expression in cased
		cases_exp<-dataset_log[intersect(patients_ids,rownames(dataset_log)),molecule]

		# Take expression in control
		control_exp<-dataset_log[intersect(control_ids,rownames(dataset_log)),molecule]
		
		# Set names
		names(cases_exp)<-intersect(patients_ids,rownames(dataset_log))
		names(control_exp)<-intersect(control_ids,rownames(dataset_log))
		
		# Put results of table
		df_results<-rbind(data.frame(Exp=cases_exp,Ischemia="Yes"),data.frame(Exp=control_exp,Ischemia="No"))
		
		# Remove na
		df_results<-df_results[complete.cases(df_results), ]
		
		# For each of the molecules
		mu <- ddply(df_results, "Ischemia", summarise, grp.mean=mean(Exp))	
		A<-ggplot(df_results, aes(x=Exp,color=Ischemia)) + geom_histogram(fill="white", position="dodge")+scale_color_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+  theme(legend.position="bottom")+geom_vline(data=mu, aes(xintercept=grp.mean, color=Ischemia),linetype="dashed")+ ggtitle(paste(molecule,": All",sep=""))+ theme_bw()
		B<-ggplot(df_results, aes(x=Ischemia,y=Exp,fill=Ischemia)) +  geom_boxplot()+scale_fill_manual(values= c(Ischemia_color[2],Ischemia_color[1]))+  theme(legend.position="bottom")+ggtitle(paste("",molecule,sep=""))+ylab("Exp")+ stat_compare_means(method = "t.test",label = "p.signif")	+ ggtitle("whole dataset")+ theme_bw()
		
		# Divide patients in tertile according to molecule
		# Create tertile 
		PATIENTS_1_TERTILE<-intersect(rownames(dataset_log[which(ntile(dataset_log[,molecule], 3)==1),]),rownames(df_results))
		PATIENTS_2_TERTILE<-intersect(rownames(dataset_log[which(ntile(dataset_log[,molecule], 3)==2),]),rownames(df_results))
		PATIENTS_3_TERTILE<-intersect(rownames(dataset_log[which(ntile(dataset_log[,molecule], 3)==3),]),rownames(df_results))
		
		# For each of the tertiles, create the pairplot
		mu <- ddply(df_results[PATIENTS_1_TERTILE,], "Ischemia", summarise, grp.mean=mean(Exp))			
		C<-ggplot(df_results[PATIENTS_1_TERTILE,], aes(x=Exp,color=Ischemia)) + geom_histogram(fill="white", position="dodge")+scale_color_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+  theme(legend.position="bottom")+geom_vline(data=mu, aes(xintercept=grp.mean, color=Ischemia),linetype="dashed")+ ggtitle(paste(molecule,": 1st tertile",sep=""))+ theme_bw()
		D<-ggplot(df_results[PATIENTS_1_TERTILE,], aes(x=Ischemia,y=Exp,fill=Ischemia)) +  geom_boxplot()+scale_fill_manual(values= c(Ischemia_color[2],Ischemia_color[1]))+  theme(legend.position="bottom")+ggtitle(paste("",molecule,sep=""))+ylab("Exp")+ stat_compare_means(method = "t.test",label = "p.signif")	+ ggtitle("1st tertile")+ theme_bw()
		
		# For each of the tertiles, create the pairplot
		mu <- ddply(df_results[PATIENTS_2_TERTILE,], "Ischemia", summarise, grp.mean=mean(Exp))			
		E<-ggplot(df_results[PATIENTS_2_TERTILE,], aes(x=Exp,color=Ischemia)) + geom_histogram(fill="white", position="dodge")+scale_color_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+  theme(legend.position="bottom")+geom_vline(data=mu, aes(xintercept=grp.mean, color=Ischemia),linetype="dashed")+ ggtitle(paste(molecule,": 2nd tertile",sep=""))+ theme_bw()
		F<-ggplot(df_results[PATIENTS_2_TERTILE,], aes(x=Ischemia,y=Exp,fill=Ischemia)) +  geom_boxplot()+scale_fill_manual(values= c(Ischemia_color[2],Ischemia_color[1]))+  theme(legend.position="bottom")+ggtitle(paste("",molecule,sep=""))+ylab("Exp")+ stat_compare_means(method = "t.test",label = "p.signif")	+ ggtitle("2nd tertile")+ theme_bw()
		
		# For each of the tertiles, create the pairplot
		mu <- ddply(df_results[PATIENTS_3_TERTILE,], "Ischemia", summarise, grp.mean=mean(Exp))			
		G<-ggplot(df_results[PATIENTS_3_TERTILE,], aes(x=Exp,color=Ischemia)) + geom_histogram(fill="white", position="dodge")+scale_color_manual(values=c(Ischemia_color[2],Ischemia_color[1]))+  theme(legend.position="bottom")+geom_vline(data=mu, aes(xintercept=grp.mean, color=Ischemia),linetype="dashed")+ ggtitle(paste(molecule,": 3rd tertile",sep=""))+ theme_bw()
		H<-ggplot(df_results[PATIENTS_3_TERTILE,], aes(x=Ischemia,y=Exp,fill=Ischemia)) +  geom_boxplot()+scale_fill_manual(values= c(Ischemia_color[2],Ischemia_color[1]))+  theme(legend.position="bottom")+ggtitle(paste("",molecule,sep=""))+ylab("Exp")+ stat_compare_means(method = "t.test",label = "p.signif")	+ ggtitle("3rd tertile")+ theme_bw()
		
		# Create tertile 
		dataset_complete$ntileTerm<-ntile(dataset_complete[,molecule], 3)	
			
		# Take term1 and term2
		#term1<-as.vector(interactionTerms[interactionTerm_index,1])
		#term2<-as.vector(interactionTerms[interactionTerm_index,2])
		# Contruct interaction term
		formula.cat<-paste("Ischemia ~ Age + Sex + Box_Blood_samples + ",molecule,sep="")		
		
		# Set datalayer
		if(datalayer=="microRNA")
		{
			# Rename-it
			molecule<-paste0("`", molecule, "`")
			
			# Contruct interaction term
			formula.cat<-paste("Ischemia ~ Age + Sex + Box_Blood_samples + ",molecule,sep="")		
		}
		
		
			
		# Fit lm models
		glm.cat.0<- glm(formula=formula.cat,family=binomial(link='logit'), data=dataset_complete, na.action=na.omit)
		glm.cat.1<- glm(formula=formula.cat,family=binomial(link='logit'), data=dataset_complete[which(dataset_complete$ntileTerm==1),], na.action=na.omit)
		glm.cat.2<- glm(formula=formula.cat,family=binomial(link='logit'), data=dataset_complete[which(dataset_complete$ntileTerm==2),], na.action=na.omit)
		glm.cat.3<- glm(formula=formula.cat,family=binomial(link='logit'), data=dataset_complete[which(dataset_complete$ntileTerm==3),], na.action=na.omit)
		
		# Create table tertile
		table_tertiles<-data.frame(rbind(summary(glm.cat.0)$coefficients[molecule,c(1,4)],
		summary(glm.cat.1)$coefficients[molecule,c(1,4)],
		summary(glm.cat.2)$coefficients[molecule,c(1,4)],
		summary(glm.cat.3)$coefficients[molecule,c(1,4)])	)
		
		colnames(table_tertiles)<-c(paste("beta"),paste("pvalue"))
		rownames(table_tertiles)<-c(paste("All dataset"),paste("1st_tertile"),paste("2nd_tertile"),paste("3rd_tertile"))	
		
		# Save pdd ration
		odds.ratio.0<-odds.ratio(glm.cat.0, level = 0.95)
		odds.ratio.1<-odds.ratio(glm.cat.1, level = 0.95)
		odds.ratio.2<-odds.ratio(glm.cat.2, level = 0.95)
		odds.ratio.3<-odds.ratio(glm.cat.3, level = 0.95)
		
		odds.ratio.0<-odds.ratio.0[molecule,"OR"]
		odds.ratio.1<-odds.ratio.1[molecule,"OR"]
		odds.ratio.2<-odds.ratio.2[molecule,"OR"]
		odds.ratio.3<-odds.ratio.3[molecule,"OR"]		
		
		
		# Take p-value glogal
		table_tertiles$pvalue<-formatC( table_tertiles$pvalue, format = "E", digits = 4)			
		table_tertiles$beta<-formatC( table_tertiles$beta, format = "f", digits = 2)						
		table_tertiles$OR<-formatC(c(odds.ratio.0,odds.ratio.1,odds.ratio.2,odds.ratio.3), format = "f", digits = 2)					
		
		# Plot table
		I<-ggplot(df_results[PATIENTS_1_TERTILE,], aes(x=Exp,color=Ischemia))+ annotation_custom(tableGrob(table_tertiles,theme=ttheme_minimal())) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+theme(panel.border = element_blank())+ theme(axis.title.x = element_blank(), axis.title.y = element_blank())	+ ggtitle(paste("Ischemia ~ ..",molecule,sep=""))+ theme_bw()+theme(axis.title.x = element_blank())
				
		# Create tertile 
		PATIENTS_1_TERTILE<-intersect(rownames(dataset_log[which(ntile(dataset_log[,gsub("`","" , molecule)], 3)==1),]),rownames(df_results))
		PATIENTS_2_TERTILE<-intersect(rownames(dataset_log[which(ntile(dataset_log[,gsub("`","" , molecule)], 3)==2),]),rownames(df_results))
		PATIENTS_3_TERTILE<-intersect(rownames(dataset_log[which(ntile(dataset_log[,gsub("`","" , molecule)], 3)==3),]),rownames(df_results))
		
		# Save tertile
		dataset_complete$Tertile<-""		
		dataset_complete[PATIENTS_1_TERTILE,"Tertile"]<-"1st"
		dataset_complete[PATIENTS_2_TERTILE,"Tertile"]<-"2nd"
		dataset_complete[PATIENTS_3_TERTILE,"Tertile"]<-"3rd"
		
		# Contruct interaction term
		formula.cat<-paste("Ischemia ~ Age + Sex + Box_Blood_samples + Tertile",sep="")
		
		# Fit glm models
		dataset_complete$Tertile <- factor(dataset_complete$Tertile, levels = c("1st","2nd","3rd"))
		glm.cat.tertile1<- glm(formula=formula.cat,family=binomial(link='logit'), data=dataset_complete, na.action=na.omit)				
		or.tertile1<-odds.ratio(glm.cat.tertile1, level = 0.95)
		
		# Fit glm models
		dataset_complete$Tertile <- factor(dataset_complete$Tertile, levels = c("2nd","1st","3rd"))
		glm.cat.tertile2<- glm(formula=formula.cat,family=binomial(link='logit'), data=dataset_complete, na.action=na.omit)				
		or.tertile2<-odds.ratio(glm.cat.tertile2, level = 0.95)		
		
		# Fit glm models
		dataset_complete$Tertile <- factor(dataset_complete$Tertile, levels = c("3rd","2nd","1st"))
		glm.cat.tertile3<- glm(formula=formula.cat,family=binomial(link='logit'), data=dataset_complete, na.action=na.omit)						
		or.tertile3<-odds.ratio(glm.cat.tertile3, level = 0.95)		
		
		# Take coefficient results results 
		tertile_1_beta<-c(NA,summary(glm.cat.tertile1)$coefficients["Tertile2nd","Estimate"],summary(glm.cat.tertile1)$coefficients["Tertile3rd","Estimate"])
		tertile_2_beta<-c(summary(glm.cat.tertile2)$coefficients["Tertile1st","Estimate"],NA,summary(glm.cat.tertile2)$coefficients["Tertile3rd","Estimate"])
		tertile_3_beta<-c(summary(glm.cat.tertile3)$coefficients["Tertile1st","Estimate"],summary(glm.cat.tertile3)$coefficients["Tertile2nd","Estimate"],NA)
		
		# Take coefficient results results 
		tertile_1_pval<-c(NA,summary(glm.cat.tertile1)$coefficients["Tertile2nd","Pr(>|z|)"],summary(glm.cat.tertile1)$coefficients["Tertile3rd","Pr(>|z|)"])
		tertile_2_pval<-c(summary(glm.cat.tertile2)$coefficients["Tertile1st","Pr(>|z|)"],NA,summary(glm.cat.tertile2)$coefficients["Tertile3rd","Pr(>|z|)"])
		tertile_3_pval<-c(summary(glm.cat.tertile3)$coefficients["Tertile1st","Pr(>|z|)"],summary(glm.cat.tertile3)$coefficients["Tertile2nd","Pr(>|z|)"],NA)		
		
		# Take coefficient results results 
		tertile_1_OR<-c(NA,or.tertile1["Tertile2nd","OR"],or.tertile1["Tertile3rd","OR"])
		tertile_2_OR<-c(or.tertile2["Tertile1st","OR"],NA,or.tertile2["Tertile3rd","OR"])
		tertile_3_OR<-c(or.tertile3["Tertile1st","OR"],or.tertile3["Tertile2nd","OR"],NA)
		
		# Creta data.frame
		beta_df<-data.frame(rbind(first=round(tertile_1_beta,3),second=round(tertile_2_beta,3),third=round(tertile_3_beta,3)))
		pval_df<-data.frame(rbind(first=round(tertile_1_pval,4),second=round(tertile_2_pval,4),third=round(tertile_3_pval,4)))
		OR_df<-data.frame(rbind(first=round(tertile_1_OR,3),second=round(tertile_2_OR,3),third=round(tertile_3_OR,3)))
		
		colnames(beta_df)<-c("1st","2nd","3rd")
		rownames(beta_df)<-c("1st","2nd","3rd")
		colnames(pval_df)<-c("1st","2nd","3rd")
		rownames(pval_df)<-c("1st","2nd","3rd")				
		colnames(OR_df)<-c("1st","2nd","3rd")
		rownames(OR_df)<-c("1st","2nd","3rd")				
		
		# Plot table
		J<-ggplot(df_results[PATIENTS_1_TERTILE,], aes(x=Exp,color=Ischemia))+ annotation_custom(tableGrob(beta_df,theme=ttheme_minimal())) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+theme(panel.border = element_blank())+ theme(axis.title.x = element_blank(), axis.title.y = element_blank())+ ggtitle(paste("Ischemia ~ nTertile : beta",sep=""))+ theme_bw()+theme(axis.title.x = element_blank())
		K<-ggplot(df_results[PATIENTS_1_TERTILE,], aes(x=Exp,color=Ischemia))+ annotation_custom(tableGrob(pval_df,theme=ttheme_minimal())) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+theme(panel.border = element_blank())+ theme(axis.title.x = element_blank(), axis.title.y = element_blank())+ ggtitle(paste("Ischemia ~ nTertile : pval",sep=""))+ theme_bw()+theme(axis.title.x = element_blank())
		L<-ggplot(df_results[PATIENTS_1_TERTILE,], aes(x=Exp,color=Ischemia))+ annotation_custom(tableGrob(pval_df,theme=ttheme_minimal())) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+theme(panel.border = element_blank())+ theme(axis.title.x = element_blank(), axis.title.y = element_blank())+ ggtitle(paste("Ischemia ~ nTertile : OR",sep=""))+ theme_bw()+theme(axis.title.x = element_blank())
						
		# Create tables
		beta_df_formatted<-rbind(data.frame(Tertile1="1st",Tertile2="1st",beta=tertile_1_beta[1]),
		data.frame(Tertile1="1st",Tertile2="2nd",beta=tertile_1_beta[2]),
		data.frame(Tertile1="1st",Tertile2="3rd",beta=tertile_1_beta[3]),	
		data.frame(Tertile1="2nd",Tertile2="1st",beta=tertile_2_beta[1]),
		data.frame(Tertile1="2nd",Tertile2="2nd",beta=tertile_2_beta[2]),
		data.frame(Tertile1="2nd",Tertile2="3rd",beta=tertile_2_beta[3]),		
		data.frame(Tertile1="3rd",Tertile2="1st",beta=tertile_3_beta[1]),
		data.frame(Tertile1="3rd",Tertile2="2nd",beta=tertile_3_beta[2]),
		data.frame(Tertile1="3rd",Tertile2="3rd",beta=tertile_3_beta[3]))		
		
		# Plot table
		# Print Association Results Patients All Var Info	
		Cairo(width = 8, height = 8, units = 'in', res = 600, file=paste(outputfolder,"/",molecule,"_TertileAnalysis_beta.png",sep=""), type="png", bg="white")										
		print(cloud(beta~Tertile1+Tertile2, beta_df_formatted, panel.3d.cloud=panel.3dbars, col.facet='grey',
				main = "Coefficients",xbase=0.5, ybase=0.5, scales=list(arrows=FALSE, col=1), panel.aspect = 1,xlab="Tertile",ylab="Tertile",par.settings = list(axis.line = list(col = "transparent"))))						
		dev.off()		
		
		# Create tables
		pval_df_formatted<-rbind(data.frame(Tertile1="1st",Tertile2="1st",pval=1-log(tertile_1_pval[1])),
		data.frame(Tertile1="1st",Tertile2="2nd",pval=1-log(tertile_1_pval[2])),
		data.frame(Tertile1="1st",Tertile2="3rd",pval=1-log(tertile_1_pval[3])),	
		data.frame(Tertile1="2nd",Tertile2="1st",pval=1-log(tertile_2_pval[1])),
		data.frame(Tertile1="2nd",Tertile2="2nd",pval=1-log(tertile_2_pval[2])),
		data.frame(Tertile1="2nd",Tertile2="3rd",pval=1-log(tertile_2_pval[3])),		
		data.frame(Tertile1="3rd",Tertile2="1st",pval=1-log(tertile_3_pval[1])),
		data.frame(Tertile1="3rd",Tertile2="2nd",pval=1-log(tertile_3_pval[2])),
		data.frame(Tertile1="3rd",Tertile2="3rd",pval=1-log(tertile_3_pval[3]))	)	
		
		# Plot table
		# Print Association Results Patients All Var Info	
		Cairo(width = 8, height = 8, units = 'in', res = 600, file=paste(outputfolder,"/",molecule,"_TertileAnalysis_pval.png",sep=""), type="png", bg="white")										
		print(cloud(pval~Tertile1+Tertile2, pval_df_formatted, panel.3d.cloud=panel.3dbars, col.facet='grey',
				main = "p-values",xbase=0.5, ybase=0.5, scales=list(arrows=FALSE, col=1), panel.aspect = 1,zlab="1-log(pval)",xlab="Tertile",ylab="Tertile",par.settings = list(axis.line = list(col = "transparent")))						)
		dev.off()	

		# Create tables
		or_df_formatted<-rbind(data.frame(Tertile1="1st",Tertile2="1st",pval=tertile_1_OR[1]),
		data.frame(Tertile1="1st",Tertile2="2nd",pval=tertile_1_OR[2]),
		data.frame(Tertile1="1st",Tertile2="3rd",pval=tertile_1_OR[3]),	
		data.frame(Tertile1="2nd",Tertile2="1st",pval=tertile_2_OR[1]),
		data.frame(Tertile1="2nd",Tertile2="2nd",pval=tertile_2_OR[2]),
		data.frame(Tertile1="2nd",Tertile2="3rd",pval=tertile_2_OR[3]),		
		data.frame(Tertile1="3rd",Tertile2="1st",pval=tertile_3_OR[1]),
		data.frame(Tertile1="3rd",Tertile2="2nd",pval=tertile_3_OR[2]),
		data.frame(Tertile1="3rd",Tertile2="3rd",pval=tertile_3_OR[3])	)		
		# Plot table
		# Print Association Results Patients All Var Info	
		Cairo(width = 8, height = 8, units = 'in', res = 600, file=paste(outputfolder,"/",molecule,"_TertileAnalysis_OR.png",sep=""), type="png", bg="white")										
		print(cloud(pval~Tertile1+Tertile2, or_df_formatted, panel.3d.cloud=panel.3dbars, col.facet='grey',
				main = "OR",xbase=0.5, ybase=0.5, scales=list(arrows=FALSE, col=1), panel.aspect = 1,zlab="OR",xlab="Tertile",ylab="Tertile",par.settings = list(axis.line = list(col = "transparent")))						)
		dev.off()		
		
		
	
		# Plot table
		# Print Association Results Patients All Var Info	
		Cairo(width = 13, height = 8, units = 'in', res = 600, file=paste(outputfolder,"/",molecule,"_TertileAnalysis.png",sep=""), type="png", bg="white")						
			#Figure_all<-ggarrange(A, B,labels = c("", ""), ncol = 2, nrow = 1,common.legend = TRUE, legend = "top")
			#Figure_1<-ggarrange(C, D,labels = c("", ""), ncol = 2, nrow = 1,common.legend = TRUE, legend = "top")
			#Figure_2<-ggarrange(E, F,labels = c("", ""), ncol = 2, nrow = 1,common.legend = TRUE, legend = "top")
			#Figure_3<-ggarrange(G, H,labels = c("", ""), ncol = 2, nrow = 1,common.legend = TRUE, legend = "top")
			#print(ggarrange(Figure_all, Figure_1,Figure_2,Figure_3,labels = c("", ""), ncol = 2, nrow = 2,common.legend = TRUE, legend = "top"))	
			print(ggarrange(B,D,F,H,I,J,K,L,labels = c("", ""), ncol = 4, nrow = 2,common.legend = TRUE, legend = "top"))	
		dev.off()				
	}	
	
}
##########################################################################################################################################
# Plot batch effect assotiation test
# Function to tertile analysis
calc_batchEffectAssociationTest <- function(exp_dataset=NULL,patient_dataset=NULL)
{
#exp_dataset=CAD_Biomarkers_log
#patient_dataset=CAD_Patients_Age
#filename=paste(outputfolder,"BatchEffecrReport.png",sep="/")
	# Create merged table
	CAD_Biomarkers_work<-exp_dataset

	# Merge tables
	CAD_Biomarkers_work<-merge(data.frame(CAD_Biomarkers_work,ID=rownames(CAD_Biomarkers_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_Biomarkers_work)<-as.vector(CAD_Biomarkers_work$ID)

	# Remove col ID
	CAD_Biomarkers_work<-CAD_Biomarkers_work[,-c(1)]

	# Save final pvaules
	df_pval_results_final<-data.frame()
	
	#for each protein
	for (protein in colnames(exp_dataset))
	{
		print(protein)
		
		# Create results df
		df_pval_results_cat<-data.frame(estimate=c(),pvalue=c())	
		
		# Check if contain string "-"
		if (grepl('[*|-]', protein))
		{
			# Create formula : tested variable ~ age_sampling
			formula.cat=as.formula(paste(paste0("`", protein, "`"),paste("Age","Sex","DMT2_known","Ischemia","Box_Blood_samples",sep=" + "),sep=" ~ "))	

			# Adjust colnames
			colnames(CAD_Biomarkers_work)[1:length(colnames(exp_dataset))]<-colnames(exp_dataset)						
		}else
		{
			# Create formula : tested variable ~ age_sampling
			formula.cat=as.formula(paste(protein,paste("Age","Sex","DMT2_known","Ischemia","Box_Blood_samples",sep=" + "),sep=" ~ "))	
		}
		# Fit lm models
		glm.cat<-lm(formula=formula.cat, data=CAD_Biomarkers_work, na.action=na.omit)						
	
		# summary
		summary.glm.cat<-summary(glm.cat)
		# Take p-value
		pvalue<-formatC(summary(glm.cat)$coefficients["Box_Blood_samples",4], format = "E", digits = 4)
		beta<-formatC(summary(glm.cat)$coefficients["Box_Blood_samples",1], format = "f", digits = 4)
	
		# Calculate nrows
		if (nrow(df_pval_results_cat)==0)
		{
			# Start data.frame
			df_pval_results_cat<-data.frame(estimate=beta,pvalue=pvalue)
		}else
		#
		{
			# Concatenate results
			df_pval_results_cat<-cbind(df_pval_results_cat,data.frame(estimate=beta,pvalue=pvalue))
		}												
		# data.frame results
		df_pval_results_final<-rbind(df_pval_results_final,df_pval_results_cat)
	}
	# Set colnames
	rownames(df_pval_results_final)<-colnames(exp_dataset)
	
	# Bonferroni
	df_pval_results_final$bonferroni<-p.adjust(as.numeric(as.vector(df_pval_results_final$pvalue)), method = "bonferroni")
	
	# Return table
	return(df_pval_results_final)
}
##########################################################################################################################################
# Plot batch effect assotiation test
# Function to tertile analysis
plot_batchEffectAssociationTest <- function(plot_batch_table=NULL,filename=NULL)
{
	# Plot table
	# Print Association Results Patients All Var Info	
	print(filename)
	Cairo(width = dim(plot_batch_table)[2]*2, height = dim(plot_batch_table)[1]*0.35, units = 'in', res = 600, file=filename, type="png", bg="white")		
		# Truncate values
		tab <- ggtexttable(plot_batch_table,theme = ttheme("classic",base_size=16))		
		
		# First, color the significant ones for ischemia in orange
		# Mark significant cells with the color of the variable		
		sigcells_batch<-which(as.numeric(as.vector(plot_batch_table[,paste("pvalue",sep="")]))<0.05)
		
		# For each cell
		for (cell in sigcells_batch)
		{		
			
			# Select color
			color  = "red"
					
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 2,fill=color, color  = color)
			tab <- table_cell_bg(tab, row = cell+1, column = 3,fill=color, color  = color)
			tab <- table_cell_bg(tab, row = cell+1, column = 4,fill=color, color  = color)

		}		
		print(tab)
	dev.off()	
	# Return plot
	return(tab)
}
##########################################################################################################################################
# Function to tertile analysis
create_correlationPlotClusters <- function(exp_dataset_complete=NULL,outputfolder=NULL)
{

	##########################################################################################################################################
	library("nnet")
	# Create results df
	#df_pval_results_cat<-data.frame(Var=c(),beta=c(),pvalue=c())
	df_pval_results_cat<-data.frame(Var=c(),pvalue=c())

	# Set variables
	variables=c("Ischemia","Sex","aHT_known","HLP_known","DMT2_known","Smoking_known","Fam_known")

	# Save lists
	list_pval_results<-list()
	list_se_results<-list()
	list_beta_results<-list()

	# For each interaction term
	for (cluster in levels(exp_dataset_complete$Cluster))
	{
		
		#df_pval_results_cat<-data.frame(Var=c(),beta=c(),pvalue=c())
		df_pval_results_pval<-data.frame()
		df_pval_results_se<-data.frame()
		df_pval_results_beta<-data.frame()
		
		# Then for each cluster
		for (term1 in variables)
		{
			# Contruct interaction term
			formula.cat<-paste(paste(term1,paste("Age + Box_Blood_samples + ", paste(variables[-which(variables==term1)],collapse=" + "),sep=""),sep=" ~ "))
			
			print(formula.cat)
				
			# Fit lm models
			glm.cat<-glm(formula=formula.cat,family=binomial(link='logit'), data=exp_dataset_complete[which(exp_dataset_complete$Cluster==cluster),], na.action=na.omit)								
											
			# Save table
			summary_table<-summary(glm.cat)$coefficients
			
			# Replace rownames
			rownames(summary_table)<-gsub("SexM","Sex",gsub("SexF","Sex",gsub("Yes","",rownames(summary_table))))
			
			# Add column of the variable being testes
			df_to_bind<-data.frame(0,1,0,1)
			
			# Set rownames
			rownames(df_to_bind)<-term1
			
			# Set colnames()
			colnames(df_to_bind)<-colnames(summary_table)
			
			# Save summary table
			summary_table<-rbind(summary_table,df_to_bind)
			
			# Sort table
			summary_table<-summary_table[variables,]
			
			df_pval_results_pval<-rbind(df_pval_results_pval,summary_table[,"Pr(>|z|)"])
			df_pval_results_beta<-rbind(df_pval_results_beta,summary_table[,"Estimate"])
			df_pval_results_se<-rbind(df_pval_results_se,summary_table[,"Std. Error"])
					

		}
		# Set col and rownames
		rownames(df_pval_results_pval)<-variables	
		colnames(df_pval_results_pval)<-variables
		rownames(df_pval_results_beta)<-variables	
		colnames(df_pval_results_beta)<-variables
		rownames(df_pval_results_se)<-variables	
		colnames(df_pval_results_se)<-variables
		
		# Save lists
		list_pval_results[[cluster]]<-df_pval_results_pval
		list_se_results[[cluster]]<-df_pval_results_se
		list_beta_results[[cluster]]<-df_pval_results_beta
		
		# Print Association Results Patients All Var Info	
		print(paste(outputfolder,paste("AssociationResultsCluster",cluster,".png",sep=""),sep="/"))
			Cairo(width = 7.5, height = 7.5, units = 'in', res = 600, file=paste(outputfolder,paste("AssociationResultsCluster",cluster,".png",sep=""),sep="/"), type="png", bg="white")		
			corrplot(t(list_beta_results[[cluster]]), p.mat = t(list_pval_results[[cluster]]),col = colorblind_pal()(8)[c(2,6)], sig.level = c(.05, .01, .1),insig="label_sig", is.corr = FALSE,type = "upper", diag = FALSE,tl.col = "black",title=paste("Cluster",cluster),mar=c(0,0,2,0))
		dev.off()		
	}
}	

##########################################################################################################################################
# Calculate feature selection
# Function to tertile analysis
create_CorrelationPlot <- function(exp_dataset=NULL,filename=NULL, nclust=10)
{
	
	# Load library
	library(corrplot)
	print(filename)
	library("NbClust")
	
	# Estimate otimal number of clusters
	# All tests -  
	method_names=c("kl", "ch", "hartigan", "ccc", "scott", "marriot", "trcovw", "tracew", "friedman", "rubin", "cindex", "db", "silhouette", "duda", "pseudot2", "beale", "ratkowsky", "ball", "ptbiserial","dunn",  "sdindex", "sdbw")

	# Optimal value
	optimal_value_samples<-c()
	names_value_samples<-c()

	# Optimal value
	all_results_samples<-list()

	# Clean dataset
	#data_scaled<-data_scaled[complete.cases(data_scaled), ]

	# For each method
	for (method in method_names)
	{
		# Print
		print(method)
		
		# For each method
		try(all_results_samples[[method]]<-NbClust(data = t(exp_dataset),distance=NULL, diss=as.dist(1-cor(exp_dataset, method = "pearson", use = "complete.obs")), min.nc = 1, max.nc = 10, method = "ward.D2", index = method, alphaBeale = 0.2),silent=TRUE)
		#try(all_results_protein[[method]]<-NbClust(data = t(protein_levels_scaled), distance = "euclidean", min.nc = 2, max.nc = max.k, method = "complete", index = method, alphaBeale = 0.1),silent=TRUE)
		
		# If there is at least one
		if (length(all_results_samples[[method]])>0)
		{
			# Add value to vector
			optimal_value_samples<-c(optimal_value_samples,all_results_samples[[method]]$Best.nc["Number_clusters"])	
			names_value_samples<-c(names_value_samples,method)
		}	
	}	
	
	names(optimal_value_samples)<-names_value_samples
		
	# Create optimam number of clusters results
	df_optimal_value_table_samples<-data.frame(table(optimal_value_samples))
	#df_optimal_value_table_proteins<-data.frame(table(optimal_value_proteins))

	# Colnames
	colnames(df_optimal_value_table_samples)<-c("clusters","frequency")
	#colnames(df_optimal_value_table_proteins)<-c("clusters","frequency")
	
	# Create the plot
	print(paste(outputfolder,"NBClusterOptimalNumber_Molecules.png",sep="/"))
	Cairo(width = 4.0, height = 8, units = 'in', res = 600, file=paste(outputfolder,"NBClusterOptimalNumber.png",sep="/"), type="png", bg="white")		
	# Diverging Barcharts
		# Truncate values
		plot_table<-data.frame(Index=rownames(data.frame(optimal_value_samples)),optimalK=optimal_value_samples)
		g <- tableGrob( plot_table, rows = NULL)
		g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),t = 2, b = nrow(g), l = 1, r = ncol(g))
		g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(g))
		grid.draw(g)
	dev.off()	
	
	# Create the plot
	print(paste(outputfolder,"NBClustSamples_Moleculres.png",sep="/"))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"NBClustSamples.png",sep="/"), type="png", bg="white")		
		print(ggplot( df_optimal_value_table_samples, aes( x = clusters, y = frequency ) )+ 
			geom_bar( stat = "identity", position = "stack" )+theme_minimal() + theme( legend.position = "bottom" )+labs(title="Optimal number of biomarker clusters",
			x ="Number of biomarker clusters k", y = "Frequency among all indices"))
	dev.off()	
	
	# Save plot
	Cairo(width = dim(exp_dataset)[2]*0.8, height = dim(exp_dataset)[2]*0.8, units = 'in', res = 600, file=filename, type="png", bg="white")		
		corrplot(cor(exp_dataset, method = "pearson", use = "complete.obs"), method = "number",order = "hclust",addrect = nclust,tl.col = "black",cl.cex=1.2, col = c("black","darkgrey","#1A1110"), number.cex = 2.0,tl.cex =2.5) # Display the correlation coefficient
	dev.off()	
}

##########################################################################################################################################
# Calculate feature selection
# Function to tertile analysis
create_OptimaNumberMoleculeClusters <- function(exp_dataset=NULL,work=NULL,outputfolder=NULL)
{
	
	# Load library
	library(corrplot)
	library("NbClust")
	library("ape")
	
	# Estimate otimal number of clusters
	# All tests -  
	method_names=c("kl", "ch", "hartigan", "ccc", "scott", "marriot", "trcovw", "tracew", "friedman", "rubin", "cindex", "db", "silhouette", "duda", "pseudot2", "beale", "ratkowsky", "ball", "ptbiserial","dunn",  "sdindex", "sdbw")

	# Optimal value
	optimal_value_molecules<-c()
	names_value_molecules<-c()
	
	# Optimal value
	optimal_value_samples<-c()
	names_value_samples<-c()

	# Optimal value
	all_results_molecules<-list()
	
	# Optimal value
	all_results_samples<-list()	

	# Clean dataset
	#data_scaled<-data_scaled[complete.cases(data_scaled), ]

	# For each method
	for (method in method_names)
	{
		# Print
		print(method)
		
		# For each method
		try(all_results_molecules[[method]]<-NbClust(data = t(exp_dataset),distance=NULL, diss=as.dist(1-cor(exp_dataset, method = "pearson", use = "complete.obs")), min.nc = 1, max.nc = 10, method = "ward.D2", index = method, alphaBeale = 0.2),silent=TRUE)
		try(all_results_samples[[method]]<-NbClust(data = exp_dataset, distance = "euclidean", min.nc = 1, max.nc = 10, method = "ward.D2", index = method, alphaBeale = 0.1),silent=TRUE)
		#try(all_results_protein[[method]]<-NbClust(data = t(protein_levels_scaled), distance = "euclidean", min.nc = 2, max.nc = max.k, method = "complete", index = method, alphaBeale = 0.1),silent=TRUE)
		
		# If there is at least one
		if (length(all_results_molecules[[method]])>0)
		{
			# Add value to vector
			optimal_value_molecules<-c(optimal_value_molecules,all_results_molecules[[method]]$Best.nc["Number_clusters"])	
			names_value_molecules<-c(names_value_molecules,method)
		}	
		
		# If there is at least one
		if (length(all_results_samples[[method]])>0)
		{
			# Add value to vector
			optimal_value_samples<-c(optimal_value_samples,all_results_samples[[method]]$Best.nc["Number_clusters"])	
			names_value_samples<-c(names_value_samples,method)
		}			
	}	
	
	names(optimal_value_molecules)<-names_value_molecules
	names(optimal_value_samples)<-names_value_samples
		
	# Create optimam number of clusters results
	df_optimal_value_table_molecules<-data.frame(table(optimal_value_molecules))
	df_optimal_value_table_samples<-data.frame(table(optimal_value_samples))

	# Colnames
	colnames(df_optimal_value_table_molecules)<-c("clusters","frequency")
	colnames(df_optimal_value_table_samples)<-c("clusters","frequency")
	#colnames(df_optimal_value_table_proteins)<-c("clusters","frequency")
	
	# Create the plot
	print(paste(outputfolder,"NBClusterOptimalNumber_Molecules.png",sep="/"))
	Cairo(width = 2.0, height = 4.75, units = 'in', res = 600, file=paste(outputfolder,"NBClusterOptimalNumber_Molecules.png",sep="/"), type="png", bg="white")		
	# Diverging Barcharts
		# Truncate values
		plot_table<-data.frame(Index=rownames(data.frame(optimal_value_molecules)),optimalK=optimal_value_molecules)
		g <- tableGrob( plot_table, rows = NULL)
		g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),t = 2, b = nrow(g), l = 1, r = ncol(g))
		g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(g))
		grid.draw(g)
	dev.off()	
	
	# Create the plot
	print(paste(outputfolder,"NBClusterOptimalNumber_Samples.png",sep="/"))
	Cairo(width = 2.0, height = 6.0, units = 'in', res = 600, file=paste(outputfolder,"NBClusterOptimalNumber_Samples.png",sep="/"), type="png", bg="white")		
	# Diverging Barcharts
		# Truncate values
		plot_table<-data.frame(Index=rownames(data.frame(optimal_value_samples)),optimalK=optimal_value_samples)
		g <- tableGrob( plot_table, rows = NULL)
		g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),t = 2, b = nrow(g), l = 1, r = ncol(g))
		g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(g))
		grid.draw(g)
	dev.off()		
	
	# Create the plot
	print(paste(outputfolder,"NBClustSamples_Molecules.png",sep="/"))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"NBClustSamples_Molecules.png",sep="/"), type="png", bg="white")		
		print(ggplot( df_optimal_value_table_molecules, aes( x = clusters, y = frequency ) )+ 
			geom_bar( stat = "identity", position = "stack" )+theme_minimal() + theme( legend.position = "bottom" )+labs(title="Optimal number of molecule clusters",
			x ="Number of molecule clusters k", y = "Frequency among all indices"))
	dev.off()

	# Create the plot
	print(paste(outputfolder,"NBClustSamples_Samples.png",sep="/"))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"NBClustSamples_Samples.png",sep="/"), type="png", bg="white")		
		print(ggplot( df_optimal_value_table_samples, aes( x = clusters, y = frequency ) )+ 
			geom_bar( stat = "identity", position = "stack" )+theme_minimal() + theme( legend.position = "bottom" )+labs(title="Optimal number of sample clusters",
			x ="Number of sample clusters k", y = "Frequency among all indices"))
	dev.off()
	
	
	
	# Return optimal number os clusters
	hvlust_molecules<-hclust(as.dist(1-cor(exp_dataset, method = "pearson", use = "complete.obs")),method="ward.D2")
	hvlust_samples<-hclust(dist(exp_dataset,method = "euclidean"), method="ward.D2")
		
	# Set number of clusters
	k.samples<-as.numeric(as.vector(df_optimal_value_table_samples[which(df_optimal_value_table_samples$frequency==max(df_optimal_value_table_samples$frequency)),"clusters"]))	
	k.molecules<-head(as.numeric(as.vector(df_optimal_value_table_molecules[which(df_optimal_value_table_molecules$frequency==max(df_optimal_value_table_molecules$frequency)),"clusters"])),1)
	
	data_pheat_map<-t(exp_dataset)
	ha<-ha[ colnames(data_pheat_map),c("Smoking_known","DMT2_known","Sex","Ischemia")]
	anno_colors<-varColor[c("Smoking_known","DMT2_known","Sex","Ischemia")]
	anno_colors[["Cluster"]]<-c("1"="#56B4E9","2"="#009E73")	
	# Calculate tree row
	tree_row<-hvlust_molecules
	tree_col<-hvlust_samples
	res<-pheatmap(data_pheat_map,cluster_cols=tree_col,cluster_rows=tree_row,cutree_cols=k.samples,cutree_rows=k.molecules,main="all selected molecules (biomarker, microRNA or metabolites)",fontsize_row = 8,annotation_col=ha,annotation_colors=anno_colors,show_colnames=FALSE, scale="none",color = viridis(32))	
	ha$Cluster=factor(cutree(res$tree_col, k = k.samples)[rownames(ha)]	)
	
	# Create the plot
	print(paste(outputfolder,paste("Heatmap_","joint_","plot.png",sep=""),sep="/"))
	Cairo(width = 9, height = 10.0, units = 'in', res = 600, file=paste(outputfolder,paste("Heatmap_","joint_","plot.png",sep=""),sep="/"), type="png", bg="white")			
		print(res)
	dev.off()
	
	# Variables
	variables<-c("Ischemia","Sex","DMT2_known","Smoking_known")
	
	# For each molecule cluster
	for (k in 1:k.molecules)
	{
		# Take all molecules of cluster k
		calc_cor<-names(which(cutree(hvlust_molecules, k = k.molecules)==k))
		
		# Set filename
		filename<-paste(outputfolder,"/MoleculeCluster",k,".png",sep="")
		
		# Save plot
		Cairo(width = 20, height = 20, units = 'in', res = 600, file=filename, type="png", bg="white")		
			corrplot(cor(exp_dataset[,calc_cor], method = "pearson", use = "complete.obs"), method = "number",order = "hclust",tl.col = "black",cl.cex=1, col = c("black","darkgrey","#1A1110"), number.cex = 1.3,tl.cex =2,hclust.method="ward.D2") # Display the correlation coefficient
		dev.off()
		
		# Create results df
		df_pval_results_cat<-data.frame(Variable=c(),beta=c(),pvalue=c())		
		
		# Filter the info param
		calc_cor<-calc_cor[calc_cor!="DMT2_known"]
		
		# For each variable
		for (var_i in variables)
		{
			print(var_i)
			# Create formula : tested variable ~ age_sampling + bmi_proteo + Sex + Cluster
			#formula.cat=paste("Ischemia + DMT2_known ~ Age + Sex",sep="")
			formula.cat=paste(paste(var_i," ~",sep=""), "Age + Sex + ",paste(paste0("`", calc_cor, "`"),collapse=" + "),sep="")
			formula.constraint=paste(paste(var_i," ~",sep=""), "Age + Sex",sep="")
			
			# Fit lm models
			glm.cat.cat<-glm(formula=formula.cat,family=binomial(link='logit'), data=work, na.action=na.omit)
			glm.cat.constraint<-glm(formula=formula.constraint,family=binomial(link='logit'), data=work, na.action=na.omit)
			
			# Perform anova
			anova.glm<-anova(glm.cat.cat,glm.cat.constraint,test = "Rao")
			
			# Take anova p-value
			anova_pvalue<-as.vector(anova.glm[6])[2,]

			# Bind to data.frame
			df_pval_results_cat<-rbind(df_pval_results_cat,data.frame(Variable=var_i,pvalue=anova_pvalue))
		}	
		# Calculate the PCA		
		##########################################################################################################################################*
		# PCA analysis on the
		library("factoextra")

		#Use the R function prcomp() for PCA
		res.pca <- prcomp(exp_dataset[,calc_cor], scale = TRUE)
		
		# Set filename
		filename<-paste(outputfolder,"/Molecule_PCA",k,".png",sep="")
		
		A<-fviz_pca_ind(res.pca,ellipse.level = 0.75, repel = FALSE, addEllipses = TRUE, label = "none",habillage =  CAD_Patients_Age[rownames(res.pca$x),"Ischemia"],palette=varColor$Ischemia,title="PCA vs. Ischemia")
		B<-fviz_pca_ind(res.pca,ellipse.level = 0.75, repel = FALSE, addEllipses = TRUE, label = "none",habillage =  CAD_Patients_Age[rownames(res.pca$x),"DMT2_known"],palette=varColor$DMT2_known,title="PCA vs. DMT2")
		C<-fviz_pca_ind(res.pca,ellipse.level = 0.75, repel = FALSE, addEllipses = TRUE, label = "none",habillage =  CAD_Patients_Age[rownames(res.pca$x),"Sex"],palette=varColor$Sex,title="PCA vs. Sex")
		D<-fviz_pca_ind(res.pca,ellipse.level = 0.75, repel = FALSE, addEllipses = TRUE, label = "none",habillage =  CAD_Patients_Age[rownames(res.pca$x),"Smoking_known"],palette=varColor$Smoking_known,title="PCA vs. Smoking")		
		
		# Save plot
		Cairo(width = 8, height = 8, units = 'in', res = 600, file=filename, type="png", bg="white")		
		# Create the plot
			print(ggarrange(plotlist=list(A,B,C,D), ncol = 2, nrow = 2,common.legend = FALSE, legend = "bottom"))			
		dev.off()		
					
		# Rethink CH indexes and decide if you need the PCA
		# Re-think also how to get only the first three components
		# Get CH indexes 
		ch_ischemia<-round(get_CH(res.pca$x[,1:2] ,CAD_Patients_Age[rownames(res.pca$x),"Ischemia"], disMethod = "Euclidean"),3)
		ch_DMT2<-round(get_CH(res.pca$x[,1:2] ,CAD_Patients_Age[rownames(res.pca$x),"DMT2_known"], disMethod = "Euclidean"),3)
		ch_Sex<-round(get_CH(res.pca$x[,1:2] ,CAD_Patients_Age[rownames(res.pca$x),"Sex"], disMethod = "Euclidean"),3)
		ch_Smoking<-round(get_CH(res.pca$x[,1:2] ,CAD_Patients_Age[rownames(res.pca$x),"Smoking_known"], disMethod = "Euclidean"),3)
		
		# Numeric df
		ndf<-apply(exp_dataset[,calc_cor], 2, as.numeric)
		
		# Set rownames()
		rownames(ndf)<-rownames(exp_dataset)
		
		# Get CH indexes from all genes
		ch_ischemia2<-round(get_CH(ndf ,CAD_Patients_Age[rownames(ndf),"Ischemia"], disMethod = "Euclidean"),3)
		ch_DMT22<-round(get_CH(ndf ,CAD_Patients_Age[rownames(ndf),"DMT2_known"], disMethod = "Euclidean"),3)
		ch_Sex2<-round(get_CH(ndf ,CAD_Patients_Age[rownames(ndf),"Sex"], disMethod = "Euclidean"),3)
		ch_Smoking2<-round(get_CH(ndf ,CAD_Patients_Age[rownames(ndf),"Smoking_known"], disMethod = "Euclidean")		,3)
		
		# Create results df
		df_pval_results_ch<-data.frame(Variable=c("Ischemia","DMT2_known","Sex","Smoking_known"),CH_Index=c(ch_ischemia,ch_DMT2,ch_Sex,ch_Smoking),CH_Index2=c(ch_ischemia2,ch_DMT22,ch_Sex2,ch_Smoking2))						
		
		df_pval_results_merged<-merge(df_pval_results_cat,df_pval_results_ch,by="Variable")
		
		colnames(df_pval_results_merged)<-c("Variable","association pvalue","CH Index PCA","CH Index molecules")
		
		
		# Plot table
		# Print Association Results Patients All Var Info	
		filename=paste(outputfolder,"/MoleculeAssociationCluster",k,".png",sep="")
		Cairo(width = 8.0, height = 2, units = 'in', res = 600, file=filename, type="png", bg="white")		
			# Truncate values
			tab <- ggtexttable(df_pval_results_merged,theme = ttheme("classic",base_size=16), rows=NULL)		
			
			# First, color the significant ones for ischemia in orange
			# Mark significant cells with the color of the variable
			
			sigcells_All_Ischemia<-which(as.numeric(as.vector(df_pval_results_merged[,2]))<0.05)
			
			# For each cell
			for (cell in sigcells_All_Ischemia)
			{		
				# Ischemia
				color  = "red"
			
				# Add color to cell
				tab <- table_cell_bg(tab, row = cell+1, column = 1,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = 2,fill=color, color  = color)			
				tab <- table_cell_bg(tab, row = cell+1, column = 3,fill=color, color  = color)			
				tab <- table_cell_bg(tab, row = cell+1, column = 4,fill=color, color  = color)			
			}		
			print(tab)
		dev.off()		
	}
	
	##########################################################################################################################################
	##########################################################################################################################################
	# Purity per cluster
	df_results<-data.frame()

	# Foe each cluster_mermbers
	for (cluster in levels(ha$Cluster))
	{
		# Condition for the first quadrant
		cluster_mermbers<-rownames(ha[which(ha$Cluster==cluster),])

		# Save variables
		variables_to_calculate<-c("Smoking_known","DMT2_known","Sex","Ischemia")

		df_cluster_result<-c()
		ref_levels<-c()
		# For each variables
		for (variable in variables_to_calculate)
		{
			# Set reference level and color
			ref_level<-names(varColor[[variable]][2])
			nonref_level<-names(varColor[[variable]][1])
			ref_levels<-c(ref_levels,ref_level)

			# Take reference individuals
			ref_individual_count<-sum(ha[,variable]==ref_level)	

			# Take reference individuals
			nonref_individual_count<-sum(ha[,variable]==nonref_level)	
			
			# scaling factor
			scaling_factor<-nonref_individual_count/ref_individual_count
			
			# Take the number of reference
			ref_count_quadrant1<-round(sum(ha[cluster_mermbers,variable]==ref_level)*scaling_factor)
			nonref_count_quadrant1<-round(sum(ha[cluster_mermbers,variable]==nonref_level))
			
			# Calculate purity
			purity_quadrant1<-round(ref_count_quadrant1/(ref_count_quadrant1+nonref_count_quadrant1),2)		
			
			df_cluster_result<-c(df_cluster_result,purity_quadrant1)
		}
		df_results<-rbind(df_results,data.frame(t(df_cluster_result)))
	}	
	colnames(df_results)<-c(paste(variables_to_calculate[1],ref_levels[1],sep="="),
	paste(variables_to_calculate[2],ref_levels[2],sep="="),
	paste(variables_to_calculate[3],ref_levels[3],sep="="),
	paste(variables_to_calculate[4],ref_levels[4],sep="="))
	df_results$Cluster=levels(ha$Cluster)	


	# Create the plot
	print(paste(outputfolder,"ClusterPurity.png",sep="/"))
	Cairo(width = 6.5, height = 1, units = 'in', res = 600, file=paste(outputfolder,"ClusterPurity.png",sep="/"), type="png", bg="white")		
	# Diverging Barcharts
		# Truncate values	
		g <- tableGrob( df_results[,5:1], rows = NULL)
		g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),t = 2, b = nrow(g), l = 1, r = ncol(g))
		g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(g))
		grid.draw(g)
	dev.off()	
	

}
Calc_interaction<- function(exp_dataset=NULL,patient_dataset=NULL,var=NULL)
{
	library(caret)
	library("pROC")
	library(glmnet)
	library("glmnetUtils")
	IT<-0
	
	# Create merged table
	CAD_molecule_work<-exp_dataset

	# Merge tables
	CAD_molecule_work<-merge(data.frame(CAD_molecule_work,ID=rownames(CAD_molecule_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_molecule_work)<-as.vector(CAD_molecule_work$ID)

	# Remove col ID
	CAD_molecule_work<-CAD_molecule_work[,-c(1)]

	# Here
	# For each molecule
	df_pval_results_final<-data.frame()
		
	#for each molecule
	for (molecule in colnames(exp_dataset))
	{
		IT<-IT+1	
		# Create results df
		df_pval_results_cat<-data.frame(estimate=c(),pvalue=c())
		
		# Check if contain string "-"
		if (grepl('[*|-]', molecule))
		{
			# Set interaction
			interaction=paste(var,paste0("`", molecule, "`"),sep="*")
			
			# Create formula : tested variable ~ age_sampling
			formula.cat=as.formula(paste("Ischemia",paste("Age","Sex","Box_Blood_samples",paste0("`", molecule, "`"),interaction,sep=" + "),sep=" ~ "))	
			
			# Adjust colnames
			colnames(CAD_molecule_work)[1:length(colnames(exp_dataset))]<-colnames(exp_dataset)						
		}else
		{
			# Set interaction
			interaction=paste(var, molecule,sep="*")
			
			# Create formula : tested testVar ~ age_sampling
			# Create formula : tested variable ~ age_sampling
			formula.cat=as.formula(paste("Ischemia",paste("Age","Sex","Box_Blood_samples", molecule,interaction,sep=" + "),sep=" ~ "))	
		}
		# Take also the varImp of glmnet
		# Take also the RF
		# Fit lm models
		glm.cat<-glm(formula=formula.cat,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)								

		# Take p-value
		#value<-pvalue<-formatC(anova(glm.cat,glm.restraint,test = "Rao")[2,6], format = "E", digits = 4)					
		#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
		interaction.pvalue<-summary(glm.cat)$coefficients[which(grepl(":", rownames(summary(glm.cat)$coefficients))),4]
		interaction.beta<-summary(glm.cat)$coefficients[which(grepl(":", rownames(summary(glm.cat)$coefficients))),1]			
								
		
		# Calculate nrows
		if (nrow(df_pval_results_cat)==0)
		{
			# Start data.frame
			df_pval_results_cat<-data.frame(interaction.beta=interaction.beta,interaction.pvalue=interaction.pvalue)
		}else
		{
			# Concatenate results
			df_pval_results_cat<-cbind(df_pval_results_cat,data.frame(interaction.beta=interaction.beta,interaction.pvalue=interaction.pvalue))
		}								
		# data.frame results
		df_pval_results_final<-rbind(df_pval_results_final,df_pval_results_cat)				
	}
	# Set rownames(df_pval_results_final)
	rownames(df_pval_results_final)<-colnames(exp_dataset)
	
	# Set colnames
	colnames(df_pval_results_final)<-paste(colnames(df_pval_results_final),var,sep=".")
			
	# Return table
	return(df_pval_results_final)

}


calc_featureSelection2<- function(exp_dataset=NULL,patient_dataset=NULL,testVar=NULL, male_id=NULL, female_id=NULL, DMT2_id=NULL,nonDMT2_id=NULL, smokers_id=NULL,nonSmokers_id=NULL)
{
	library(caret)
	library("pROC")
	library(glmnet)
	library("glmnetUtils")
	IT<-0
	
	# Create merged table
	CAD_molecule_work<-exp_dataset

	# Merge tables
	CAD_molecule_work<-merge(data.frame(CAD_molecule_work,ID=rownames(CAD_molecule_work)),data.frame(CAD_Patients_Age[,c("Age","Sex","Box_Blood_samples","Ischemia")],ID=rownames(CAD_Patients_Age[,c("Age","Sex","Box_Blood_samples","Ischemia")])),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_molecule_work)<-as.vector(CAD_molecule_work$ID)

	# Remove col ID
	CAD_molecule_work<-CAD_molecule_work[,-c(1)]

	# Here
	# For each molecule
	df_pval_results_final<-data.frame()
		
	#for each molecule
	for (molecule in colnames(exp_dataset))
	{
		IT<-IT+1	
		# Create results df
		df_pval_results_cat<-data.frame(estimate=c(),pvalue=c())
		
		# Check if contain string "-"
		if (grepl('[*|-]', molecule))
		{
			# Create formula : tested variable ~ age_sampling
			formula.cat=as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",paste0("`", molecule, "`"),sep=" + "),sep=" ~ "))	
			formula.sex=as.formula(paste(testVar,paste("Age","Box_Blood_samples",paste0("`", molecule, "`"),sep=" + "),sep=" ~ "))	
			formula.restraint=as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ "))	
			formula.full<-as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",paste(paste0("`",colnames(exp_dataset),"`",sep=""),collapse=" + "),sep=" + "),sep=" ~ "))	

			# Adjust colnames
			colnames(CAD_molecule_work)[1:length(colnames(exp_dataset))]<-colnames(exp_dataset)						
		}else
		{
			# Create formula : tested testVar ~ age_sampling
			formula.cat=as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",molecule,sep=" + "),sep=" ~ "))	
			formula.restraint=as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ "))	
			formula.full<-as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",paste(colnames(exp_dataset),collapse=" + "),sep=" + "),sep=" ~ "))				
			formula.sex=as.formula(paste(testVar,paste("Age","Box_Blood_samples",molecule,sep=" + "),sep=" ~ "))	
		}
		# Take also the varImp of glmnet
		# Take also the RF
		# Fit lm models
		glm.cat<-glm(formula=formula.cat,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)								
		
		# Fit dmt2 models
		glm.DMT2<-glm(formula=formula.cat,family=binomial(link='logit'), data=CAD_molecule_work[DMT2_id,], na.action=na.omit)								
		glm.nonDMT2<-glm(formula=formula.cat,family=binomial(link='logit'), data=CAD_molecule_work[nonDMT2_id,], na.action=na.omit)								
		
		# Fit dmt2 models
		glm.smokers<-glm(formula=formula.cat,family=binomial(link='logit'), data=CAD_molecule_work[smokers_id,], na.action=na.omit)								
		glm.nonSmokers<-glm(formula=formula.cat,family=binomial(link='logit'), data=CAD_molecule_work[nonSmokers_id,], na.action=na.omit)										
				
		# Fit lm models
		glm.male<-glm(formula=formula.sex,family=binomial(link='logit'), data=CAD_molecule_work[male_id,], na.action=na.omit)								
		glm.female<-glm(formula=formula.sex,family=binomial(link='logit'), data=CAD_molecule_work[female_id,], na.action=na.omit)								
		
				
		# Take the ids
		ids<-rownames(CAD_Patients_Age[intersect(rownames(CAD_Patients_Age),rownames(exp_dataset)),])
		
		# Check if contain string "-"
		if (grepl('[*|-]', molecule))
		{			
			# Take p-value
			#value<-pvalue<-formatC(anova(glm.cat,glm.restraint,test = "Rao")[2,6], format = "E", digits = 4)					
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			whole.pvalue<-summary(glm.cat)$coefficients[paste0("`", molecule, "`"),4]
			whole.beta<-summary(glm.cat)$coefficients[paste0("`", molecule, "`"),1]						
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			male.pvalue<-summary(glm.male)$coefficients[paste0("`", molecule, "`"),4]
			male.beta<-summary(glm.male)$coefficients[paste0("`", molecule, "`"),1]									
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			female.pvalue<-summary(glm.female)$coefficients[paste0("`", molecule, "`"),4]
			female.beta<-summary(glm.female)$coefficients[paste0("`", molecule, "`"),1]		

			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			DMT2.pvalue<-summary(glm.DMT2)$coefficients[paste0("`", molecule, "`"),4]
			DMT2.beta<-summary(glm.DMT2)$coefficients[paste0("`", molecule, "`"),1]									
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			nonDMT2.pvalue<-summary(glm.nonDMT2)$coefficients[paste0("`", molecule, "`"),4]
			nonDMT2.beta<-summary(glm.nonDMT2)$coefficients[paste0("`", molecule, "`"),1]
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			smokers.pvalue<-summary(glm.smokers)$coefficients[paste0("`", molecule, "`"),4]
			smokers.beta<-summary(glm.smokers)$coefficients[paste0("`", molecule, "`"),1]									
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			nonSmokers.pvalue<-summary(glm.nonSmokers)$coefficients[paste0("`", molecule, "`"),4]
			nonSmokers.beta<-summary(glm.nonSmokers)$coefficients[paste0("`", molecule, "`"),1]			
							
		}else
		{
			# Take p-value
			#value<-pvalue<-formatC(anova(glm.cat,glm.restraint,test = "Rao")[2,6], format = "E", digits = 4)					
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			whole.pvalue<-summary(glm.cat)$coefficients[molecule,4]
			whole.beta<-summary(glm.cat)$coefficients[molecule,1]
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			male.pvalue<-summary(glm.male)$coefficients[molecule,4]
			male.beta<-summary(glm.male)$coefficients[molecule,1]

			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			female.pvalue<-summary(glm.female)$coefficients[molecule,4]
			female.beta<-summary(glm.female)$coefficients[molecule,1]			
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			DMT2.pvalue<-summary(glm.DMT2)$coefficients[molecule,4]
			DMT2.beta<-summary(glm.DMT2)$coefficients[molecule,1]									
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			nonDMT2.pvalue<-summary(glm.nonDMT2)$coefficients[molecule,4]
			nonDMT2.beta<-summary(glm.nonDMT2)$coefficients[molecule,1]	
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			smokers.pvalue<-summary(glm.smokers)$coefficients[molecule,4]
			smokers.beta<-summary(glm.smokers)$coefficients[molecule,1]									
			
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			nonSmokers.pvalue<-summary(glm.nonSmokers)$coefficients[molecule,4]
			nonSmokers.beta<-summary(glm.nonSmokers)$coefficients[molecule,1]				
						
		}

		
		# Calculate nrows
		if (nrow(df_pval_results_cat)==0)
		{
			# Start data.frame
			df_pval_results_cat<-data.frame(whole.beta=whole.beta,whole.pvalue=whole.pvalue,male.beta=male.beta,male.pvalue=male.pvalue,female.beta=female.beta,female.pvalue=female.pvalue,DMT2.beta=DMT2.beta,DMT2.pvalue=DMT2.pvalue,nonDMT2.beta=nonDMT2.beta,nonDMT2.pvalue=nonDMT2.pvalue,smokers.beta=smokers.beta,smokers.pvalue=smokers.pvalue, nonSmokers.beta=nonSmokers.beta,nonSmokers.pvalue=nonSmokers.pvalue)
		}else
		{
			# Concatenate results
			df_pval_results_cat<-cbind(whole.beta=whole.beta,whole.pvalue=whole.pvalue,male.beta=male.beta,male.pvalue=male.pvalue,female.beta=female.beta,female.pvalue=female.pvalue,DMT2.beta=DMT2.beta,DMT2.pvalue=DMT2.pvalue,nonDMT2.beta=nonDMT2.beta,nonDMT2.pvalue=nonDMT2.pvalue,smokers.beta=smokers.beta,smokers.pvalue=smokers.pvalue, nonSmokers.beta=nonSmokers.beta,nonSmokers.pvalue=nonSmokers.pvalue)
		}								
		# data.frame results
		df_pval_results_final<-rbind(df_pval_results_final,df_pval_results_cat)				
	}
	# Set rownames(df_pval_results_final)
	rownames(df_pval_results_final)<-colnames(exp_dataset)
	
	# Add corrected p-value
	df_pval_results_final$whole.BH<-p.adjust(df_pval_results_final$whole.pvalue,method="BH") 
	df_pval_results_final$male.BH<-p.adjust(df_pval_results_final$male.pvalue,method="BH") 
	df_pval_results_final$female.BH<-p.adjust(df_pval_results_final$female.pvalue,method="BH") 	
	df_pval_results_final$DMT2.BH<-p.adjust(df_pval_results_final$DMT2.pvalue,method="BH") 
	df_pval_results_final$nonDMT2.BH<-p.adjust(df_pval_results_final$nonDMT2.pvalue,method="BH") 
	df_pval_results_final$smokers.BH<-p.adjust(df_pval_results_final$smokers.pvalue,method="BH") 
	df_pval_results_final$nonSmokers.BH<-p.adjust(df_pval_results_final$nonSmokers.pvalue,method="BH") 	
	
	# Sort table
	df_pval_results_final<-df_pval_results_final[,rev(sort(colnames(df_pval_results_final)))]
	
	# Add corrected p-value
	df_pval_results_final$whole.bonferroni<-p.adjust(df_pval_results_final$whole.pvalue,method="bonferroni") 
	df_pval_results_final$male.bonferroni<-p.adjust(df_pval_results_final$male.pvalue,method="bonferroni") 
	df_pval_results_final$female.bonferroni<-p.adjust(df_pval_results_final$female.pvalue,method="bonferroni") 	
	df_pval_results_final$DMT2.bonferroni<-p.adjust(df_pval_results_final$DMT2.pvalue,method="bonferroni") 
	df_pval_results_final$nonDMT2.bonferroni<-p.adjust(df_pval_results_final$nonDMT2.pvalue,method="bonferroni") 
	df_pval_results_final$smokers.bonferroni<-p.adjust(df_pval_results_final$smokers.pvalue,method="bonferroni") 
	df_pval_results_final$nonSmokers.bonferroni<-p.adjust(df_pval_results_final$nonSmokers.pvalue,method="bonferroni") 	
	
	#featureSelection_table<-df_pval_results_final	
	# Return table
	return(df_pval_results_final)

}

##########################################################################################################################################
# Calculate feature selection
# Function to tertile analysis
calc_featureSelection <- function(exp_dataset=NULL,patient_dataset=NULL,testVar=NULL)
{
	library(caret)
	library("pROC")
	library(glmnet)
	library("glmnetUtils")
	IT<-0
	
	# Create merged table
	CAD_molecule_work<-exp_dataset

	# Merge tables
	CAD_molecule_work<-merge(data.frame(CAD_molecule_work,ID=rownames(CAD_molecule_work)),data.frame(CAD_Patients_Age[,c("Age","Sex","Box_Blood_samples","Ischemia")],ID=rownames(CAD_Patients_Age[,c("Age","Sex","Box_Blood_samples","Ischemia")])),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_molecule_work)<-as.vector(CAD_molecule_work$ID)

	# Remove col ID
	CAD_molecule_work<-CAD_molecule_work[,-c(1)]

	# Here
	# For each molecule
	df_pval_results_final<-data.frame()
		
	#for each molecule
	for (molecule in colnames(exp_dataset))
	{
		IT<-IT+1	
		# Create results df
		df_pval_results_cat<-data.frame(estimate=c(),pvalue=c())
		
		# Check if contain string "-"
		if (grepl('[*|-]', molecule))
		{
			# Create formula : tested variable ~ age_sampling
			formula.cat=as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",paste0("`", molecule, "`"),sep=" + "),sep=" ~ "))	
			formula.restraint=as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ "))	
			formula.full<-as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",paste(paste0("`",colnames(exp_dataset),"`",sep=""),collapse=" + "),sep=" + "),sep=" ~ "))	

			# Adjust colnames
			colnames(CAD_molecule_work)[1:length(colnames(exp_dataset))]<-colnames(exp_dataset)						
		}else
		{
			# Create formula : tested testVar ~ age_sampling
			formula.cat=as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",molecule,sep=" + "),sep=" ~ "))	
			formula.restraint=as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ "))	
			formula.full<-as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",paste(colnames(exp_dataset),collapse=" + "),sep=" + "),sep=" ~ "))				
		}
		# Take also the varImp of glmnet
		# Take also the RF
		# Fit lm models
		glm.cat<-glm(formula=formula.cat,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)								
		glm.restraint<-glm(formula=formula.restraint,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)								
		
		# execute roc curve
		roc.cat<-roc(Ischemia~glm.cat$fitted.values, data = CAD_molecule_work, plot = FALSE)
		roc.restraint<-roc(Ischemia~glm.restraint$fitted.values, data = CAD_molecule_work, plot = FALSE)
		
		# Execute roc test
		roc.test<-roc.test(roc1=roc.cat,roc2=roc.restraint, method="bootstrap", boot.n=1000,alternative="greater")
		
		# Take the AUC of roc1
		roc.auc.cat<-as.vector(roc.test$roc1$auc)
		
		# Take the p-value
		roc.pval.cat<-roc.test$p.value
		
		# Take the ids
		ids<-rownames(CAD_Patients_Age[intersect(rownames(CAD_Patients_Age),rownames(exp_dataset)),])
						
		# Train glmnet 		
		glmnet.cat<-train(form=formula.cat, data=CAD_molecule_work, family="binomial",method = "glmnet",trControl = trainControl("cv",number = 100))		
		glmnet.restraint<-train(form=formula.restraint, data=CAD_molecule_work, family="binomial",method = "glmnet",trControl = trainControl("cv",number = 100))		
														
		# Random forest 
		# Train glmnet 		
		rf.cat<-train(form=formula.cat, data=CAD_molecule_work, family="binomial",method = "rf",trControl = trainControl("cv",number = 100),ntree=5)				
		rf.restraint<-train(form=formula.restraint, data=CAD_molecule_work, family="binomial",method = "rf",trControl = trainControl("cv",number = 100),ntree=5)				
		
		# collect resamples
		rf.results <- resamples(list(model=rf.cat, restraint=rf.restraint))		
		
		# Take p-value of glmnet
		rf.pvalue<-t.test(x=rf.results$values[,"model~Accuracy"], y=rf.results$values[,"restraint~Accuracy"], paired = TRUE, alternative = "greater")$p.value
		rf.accuracy<-mean(rf.cat$results$Accuracy)		
		
		# Check if contain string "-"
		if (grepl('[*|-]', molecule))
		{			
			# Take p-value
			#value<-pvalue<-formatC(anova(glm.cat,glm.restraint,test = "Rao")[2,6], format = "E", digits = 4)					
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			LR.pvalue<-summary(glm.cat)$coefficients[paste0("`", molecule, "`"),4]
			LR.beta<-summary(glm.cat)$coefficients[paste0("`", molecule, "`"),1]						
			
			# Take the coefficient for each molecule
			LASSO.beta<-coef(glmnet.cat$finalModel,glmnet.cat$finalModel$lambda)[paste0("`", molecule, "`"),1]			
		}else
		{
			# Take p-value
			#value<-pvalue<-formatC(anova(glm.cat,glm.restraint,test = "Rao")[2,6], format = "E", digits = 4)					
			#beta<-formatC(summary.glm.cat$coefficients[2,2], format = "f", digits = 2)
			LR.pvalue<-summary(glm.cat)$coefficients[molecule,4]
			LR.beta<-summary(glm.cat)$coefficients[molecule,1]
			
			# Take the coefficient for each molecule
			LASSO.beta<-coef(glmnet.cat$finalModel,glmnet.cat$finalModel$lambda)[molecule,1]			
		}
		# Train glmnet 		
		glmnet.cat<-train(form=formula.cat, data=CAD_molecule_work, family="binomial",method = "glmnet")		
		glmnet.restraint<-train(form=formula.restraint, data=CAD_molecule_work, family="binomial",method = "glmnet")		
									
		# collect resamples
		glmnet.results <- resamples(list(model=glmnet.cat, restraint=glmnet.restraint))		
		
		# Take p-value of glmnet
		glmnet.pvalue<-t.test(x=glmnet.results$values[,"model~Accuracy"], y=glmnet.results$values[,"restraint~Accuracy"], paired = TRUE, alternative = "greater")$p.value
		
		# Calculate nrows
		if (nrow(df_pval_results_cat)==0)
		{
			# Start data.frame
			df_pval_results_cat<-data.frame(LR.beta=LR.beta,LR.pvalue=LR.pvalue,ROC.auc=roc.auc.cat,ROC.pval=roc.pval.cat,LASSO.beta=LASSO.beta,LASSO.pvalue=glmnet.pvalue,RF.accuracy=rf.accuracy,RF.pvalue=rf.pvalue)
		}else
		{
			# Concatenate results
			df_pval_results_cat<-cbind(df_pval_results_cat,data.frame(LR.beta=LR.beta,LR.pvalue=LR.pvalue,ROC.auc=roc.auc.cat,ROC.pval=roc.pval.cat,LASSO.beta=LASSO.beta,LASSO.pvalue=glmnet.pvalue,RF.accuracy=rf.accuracy,RF.pvalue=rf.pvalue))
		}								
		# data.frame results
		df_pval_results_final<-rbind(df_pval_results_final,df_pval_results_cat)
		
		print(paste(molecule,IT,sep=":"))
		print(data.frame(LR.beta=LR.beta,LR.pvalue=LR.pvalue,ROC.auc=roc.auc.cat,ROC.pval=roc.pval.cat,LASSO.beta=LASSO.beta,LASSO.pvalue=glmnet.pvalue,RF.accuracy=rf.accuracy,RF.pvalue=rf.pvalue))
		
	}
	# Set rownames(df_pval_results_final)
	rownames(df_pval_results_final)<-colnames(exp_dataset)
	
	# calculate full.model glmnet
	glmnet.full<-train(form=formula.full, data=CAD_molecule_work, family="binomial",method = "glmnet",trControl = trainControl("cv",number = 100))		
		
	# Check if contain string "-"
	if (grepl('[*|-]', molecule))
	{			
		# Train rf varImp 
		df_pval_results_final$RF.varImp<-varImp(train(form=formula.full, data=CAD_molecule_work,trControl = trainControl("cv",number = 100), method = "rf",ntree = 500))$importance[paste0("`",rownames(df_pval_results_final),"`",sep=""),]	
		
		# Store lasso coefficient
		df_pval_results_final$LASSO.coeff<-coef(glmnet.full$finalModel,glmnet.full$finalModel$lambda)[paste0("`",rownames(df_pval_results_final),"`",sep=""),100]	

	}else
	{
		# Train rf varImp 
		df_pval_results_final$RF.varImp<-varImp(train(form=formula.full, data=CAD_molecule_work,trControl = trainControl("cv",number = 100), method = "rf",ntree = 500))$importance[rownames(df_pval_results_final),]	
		
		# Store lasso coefficient
		df_pval_results_final$LASSO.coeff<-coef(glmnet.full$finalModel,glmnet.full$finalModel$lambda)[rownames(df_pval_results_final),100]	

	}		
					
	# Return table
	return(df_pval_results_final)
}	
##########################################################################################################################################
# Calculate feature selection
# Function to tertile analysis
calc_thresholds_featureSelection <- function(exp_dataset=NULL,patient_dataset=NULL,testVar=NULL,featureSelection_table=NULL)
{
	library(caret)
	library(glmnet)
	library("glmnetUtils")
	
	# Create merged table
	CAD_molecule_work<-exp_dataset

	# Merge tables
	CAD_molecule_work<-merge(data.frame(CAD_molecule_work,ID=rownames(CAD_molecule_work)),data.frame(CAD_Patients_Age[,c("Age","Sex","Box_Blood_samples","Ischemia")],ID=rownames(CAD_Patients_Age[,c("Age","Sex","Box_Blood_samples","Ischemia")])),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_molecule_work)<-as.vector(CAD_molecule_work$ID)

	# Remove col ID
	CAD_molecule_work<-CAD_molecule_work[,-c(1)]

	# Here
	# For each molecule
	df_pval_results_final<-data.frame()
		
	# Create formula : tested variable ~ age_sampling
	formula.restraint=as.formula(paste(testVar,paste("Age","Sex","Box_Blood_samples",sep=" + "),sep=" ~ "))	

	# Take also the varImp of glmnet
	# Take also the RF
	# Fit lm models
	glm.restraint<-glm(formula=formula.restraint,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)								
		
	# execute roc curve
	roc.restraint<-roc(Ischemia~glm.restraint$fitted.values, data = CAD_molecule_work, plot = FALSE)
																
	# Random forest 
	# Train glmnet 	
	rf.restraint<-train(form=formula.restraint, data=CAD_molecule_work, family="binomial",method = "rf",trControl = trainControl("cv",number = 100),ntree=5)
	
	# Save the threshold for RandomForest
	treshold_RF<-mean(rf.restraint$results$Accuracy)	
	
	# Save the threshold for AUC
	treshold_ROC<-as.vector(roc.restraint$auc)
			
	# Return table
	return(list(ROC=treshold_ROC,RF=treshold_RF))
}	

##########################################################################################################################################
# Calculate feature selection
# Function to tertile analysis
save_plot_featureSelection <- function(featureSelection_table=NULL,outputfolder=outputfolder,datalayer=NULL,thresholds=featureSelection_tresholds)
{
	library("VennDiagram")
	library("ggpubr")
	
	# First, save excel file	
	write.xlsx(featureSelection_table, file=paste(outputfolder,"/","FeatureSelection_table_",datalayer,".xlsx",sep=""), append=FALSE)
	
	#Load patient data
	#featureSelection_table<-read.xlsx(paste(outputfolder,"/","FeatureSelection_table_",datalayer,".xlsx",sep=""),startRow = 1, sheetIndex=1)	
	#featureSelection_table<-featureSelection_table[,2:9]	
	
	# Save only pvalues on X
	X<-data.frame(LR=featureSelection_table$LR.pvalue,ROC=featureSelection_table$ROC.pval,LASSO=featureSelection_table$LASSO.pvalue,	RF=featureSelection_table$RF.pvalue)
		
	# Save only betas on Y	
	Y<-data.frame(LR=featureSelection_table$LR.beta,ROC=featureSelection_table$ROC.auc,LASSO=featureSelection_table$LASSO.coeff,RF=featureSelection_table$RF.accuracy)
	
	# Bind X and Yx
	XY <- rbind(X, Y)
		
	# Set colnames
	#colnames(XY)<-#Set for LR, RF, LASSO, ROC
	
	# Set the lower panel		
	upper.panel=function(x, y, ...) 
	{
		X1 <- x[seq_len(nrow(X))] # corresponds to X subset
		X2 <- y[seq_len(nrow(X))] # corresponds to X subset
		print(seq_len(nrow(X)))
		usr <- par("usr"); on.exit(par(usr))
		points(X1,X2, pch=19, col="black")
		# Take the colname				
		par(usr = c(range(X[, -ncol(X)]), range(X[, -1]))) # set up limits
		r <- round(cor(X1, X2), digits=2)				
		txt <- paste0("R = ", r)		
		par(usr = c(0, 1, 0, 1))
		text(0.5, 0.9, txt,cex = 2.5)	
		if(par('mfg')[2] == 1) axis(2) # if left plot, add left axis
		if(par('mfg')[1] == ncol(X)) axis(1) # if bottom plot add bottom axis
	}
	# Set the upper panel			
	lower.panel=function(x, y, ...) 
	{
		Y1 <- x[(nrow(X) + 1):length(x)] # corresponds to Y subset
		Y2 <- y[(nrow(X) + 1):length(y)] # corresponds to Y subset
		points(Y1,Y2, pch=19, col="black")
		usr <- par("usr"); on.exit(par(usr))
        par(usr = c(range(Y[, -1]), range(Y[, -ncol(Y)]))) # set up limits		
		r <- round(cor(Y1, Y2), digits=2)				
		txt <- paste0("R = ", r)		
		par(usr = c(0, 1, 0, 1))
		text(0.5, 0.9, txt,cex = 2.5)			
		if(par('mfg')[2] == ncol(Y)) axis(4) # if right plot, add right axis
		if(par('mfg')[1] == 1) axis(3) # if top plot, add top axis
	}		
	
	
	# Print Association Results Patients All Var Info	
	print(paste(outputfolder,"/","FeatureSelection_correlation_",datalayer,".png",sep=""))
	Cairo(width = 14, height = 14, units = 'in', res = 600, file=paste(outputfolder,"/","FeatureSelection_correlation_",datalayer,".png",sep=""), type="png", bg="white")				
		# Second create correlation plots among the p-values and beta's
		pairs(XY,lower.panel=lower.panel,upper.panel=upper.panel,labels=paste("pvalue","\n",colnames(XY),"\n",c("beta","auc","coeff","accuracy"),sep=""))
	dev.off()
		
	# Set pvalue treshold
	pvalue_treshold<-0.10
	
	# Print Association Results Patients All Var Info	
	print(paste(outputfolder,"/","FeatureSelection_pvalue_beta_",datalayer,".png",sep=""))
	Cairo(width = 8, height = 8, units = 'in', res = 600, file=paste(outputfolder,"/","FeatureSelection_pvalue_beta_",datalayer,".png",sep=""), type="png", bg="white")				
		# Plot for each method
		# Set colors
		featureSelection_table$Color="black"						
		# Set DE for LR.beta
		featureSelection_table[which(featureSelection_table$LR.pvalue<pvalue_treshold),"Color"]<-"red"		
		# Plot LR
		A<-ggplot(data=featureSelection_table, aes(y=LR.beta, x=1-log(LR.pvalue,10),color=Color))+ geom_point()+ theme_bw()+theme(legend.position="bottom")+ scale_color_manual(values=c("black", "red"))+ geom_vline(xintercept=1-log(pvalue_treshold,10), linetype="dashed", color = "red"	)
		# Plot for each method
		# Set colors
		featureSelection_table$Color="black"				
		# Set DE for LR.beta
		featureSelection_table[which(featureSelection_table$ROC.pval<pvalue_treshold & featureSelection_table$ROC.auc>thresholds$ROC),"Color"]<-"red"						
		# Plot ROC
		B<-ggplot(data=featureSelection_table, aes(y=ROC.auc, x=1-log(ROC.pval,10),color=Color))+ geom_point()+ theme_bw()+theme(legend.position="bottom")	+ scale_color_manual(values=c("black", "red"))+ geom_vline(xintercept=1-log(pvalue_treshold,10), linetype="dashed", color = "red"	)+ geom_hline(yintercept=thresholds$ROC, linetype="dashed", color = "red"	)
		# Plot for each method
		# Set colors
		featureSelection_table$Color="black"				
		# Set DE for LR.beta
		featureSelection_table[which(featureSelection_table$LASSO.pvalue<pvalue_treshold),"Color"]<-"red"						
		# Plot lasso
		C<-ggplot(data=featureSelection_table, aes(y=LASSO.coeff, x=1-log(LASSO.pvalue,10),color=Color))+ geom_point()+ theme_bw()+theme(legend.position="bottom")+ scale_color_manual(values=c("black", "red"))		+ geom_vline(xintercept=1-log(pvalue_treshold,10), linetype="dashed", color = "red")
		# Plot for each method
		# Set colors
		featureSelection_table$Color="black"				
		# Set DE for LR.beta
		featureSelection_table[which(featureSelection_table$RF.pvalue<pvalue_treshold & featureSelection_table$RF.accuracy>thresholds$RF)	,"Color"]<-"red"						
		# Plot random forest
		D<-ggplot(data=featureSelection_table, aes(y=RF.accuracy, x=1-log(RF.pvalue,10),color=Color))+ geom_point()+ theme_bw()+theme(legend.position="bottom")+ scale_color_manual(values=c("black", "red"))+ geom_vline(xintercept=1-log(pvalue_treshold,10), linetype="dashed", color = "red"	)+ geom_hline(yintercept=thresholds$RF, linetype="dashed", color = "red"	)		
		# Print
		print(ggarrange(plotlist=list(A,B,C,D), ncol = 2, nrow = 2,common.legend = TRUE, legend = "none"))	
	dev.off()
	
	# Create significant table
	DE_molecules<-unique(c(rownames(featureSelection_table[which(featureSelection_table$LR.pvalue<pvalue_treshold),]),
	rownames(featureSelection_table[which(featureSelection_table$ROC.pval<pvalue_treshold & featureSelection_table$ROC.auc>thresholds$ROC),]),
	rownames(featureSelection_table[which(featureSelection_table$LASSO.pvalue<pvalue_treshold) ,]),
	rownames(featureSelection_table[which(featureSelection_table$RF.pvalue<pvalue_treshold & featureSelection_table$RF.accuracy>thresholds$RF),])))
	
	# Create venn list
	venn_lis_de<-list(LR=rownames(featureSelection_table[which(featureSelection_table$LR.pvalue<pvalue_treshold),]),
	ROC=rownames(featureSelection_table[which(featureSelection_table$ROC.pval<pvalue_treshold & featureSelection_table$ROC.auc>thresholds$ROC),]),
	LASSO=rownames(featureSelection_table[which(featureSelection_table$LASSO.pvalue<pvalue_treshold) ,]),
	RF=rownames(featureSelection_table[which(featureSelection_table$RF.pvalue<pvalue_treshold & featureSelection_table$RF.accuracy>thresholds$RF),]))
	
	#venn.plot <- venn.diagram(venn_lis_de , , cex = 2, cat.fontface=4, category.names=c("A", "B"), main="Random Gene Lists")	
	venn.plot <- venn.diagram(venn_lis_de ,fill=c("#add8e6", "#FFFFE0","#CC79A7","#D55E00"), alpha=c(0.3,0.3,0.3,0.3),cex = 2, cat.fontface=4,filename=paste(outputfolder,paste("/VeenDiagram","phenotypes",".png",sep=""),sep=""),imagetype="png")	
	
	# Take the intersecting molecures	
	DE_table<-table(c(rownames(featureSelection_table[which(featureSelection_table$LR.pvalue<pvalue_treshold),]),
	rownames(featureSelection_table[which(featureSelection_table$ROC.pval<pvalue_treshold & featureSelection_table$ROC.auc>thresholds$ROC),]),
	rownames(featureSelection_table[which(featureSelection_table$LASSO.pvalue<pvalue_treshold) ,]),
	rownames(featureSelection_table[which(featureSelection_table$RF.pvalue<pvalue_treshold & featureSelection_table$RF.accuracy>thresholds$RF),])))		
	
	# Create sub table
	featureSelection_sub<-featureSelection_table[names(DE_table[which(DE_table>1)]),c(1:4,10,6:8)]
	
	# First, save excel file	
	write.xlsx(featureSelection_sub, file=paste(outputfolder,"/","DE_",datalayer,".xlsx",sep=""), append=FALSE)
	
	
	# Make copy and transoform notation
	featureSelection_sub_notation<-featureSelection_sub
	
	# Transoform notation
	featureSelection_sub_notation$LR.pvalue<-formatC(featureSelection_sub$LR.pvalue,format="E")
	featureSelection_sub_notation$ROC.pval<-formatC(featureSelection_sub$ROC.pval,format="E")
	featureSelection_sub_notation$LASSO.pvalue<-formatC(featureSelection_sub$LASSO.pvalue,format="E")
	featureSelection_sub_notation$RF.pvalue<-formatC(featureSelection_sub$RF.pvalue,format="E")

	# Transoform notation
	featureSelection_sub_notation$LR.beta<-formatC(featureSelection_sub$LR.beta,format="f")
	featureSelection_sub_notation$ROC.auc<-formatC(featureSelection_sub$ROC.auc,format="f")
	featureSelection_sub_notation$LASSO.coeff<-formatC(featureSelection_sub$LASSO.coeff,format="f")
	featureSelection_sub_notation$RF.accuracy<-formatC(featureSelection_sub$RF.accuracy,format="f")
	
	# Print Association Results Patients All Var Info		
	Cairo(width = dim(featureSelection_sub)[2]*1.75, height = dim(featureSelection_sub)[1]*0.35, units = 'in', res = 600, file=paste(outputfolder,"feature_selection_Selected.png",sep="/"), type="png", bg="white")		
	# Truncate values
		tab <- ggtexttable(featureSelection_sub_notation,theme = ttheme("classic",base_size=16))				
		# First for varIMP glm glm
		# Mark significant cells with the color of the variable
		sigcells_LR<-which(featureSelection_sub$LR.pvalue<pvalue_treshold)
		sigcells_ROC<-which(featureSelection_sub$ROC.pval<pvalue_treshold & featureSelection_sub$ROC.auc>thresholds$ROC)
		sigcells_LASSO<-which(featureSelection_sub$LASSO.pvalue<pvalue_treshold)
		sigcells_RF<-which(featureSelection_sub$RF.pvalue<pvalue_treshold & featureSelection_sub$RF.accuracy>thresholds$RF)
						
		# Take the colors of the variable
		color<-"#add8e6"							
		# For each cell
		for (cell in sigcells_LR)
		{		
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 1+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 2+1,fill=color)
		}
		# Take the colors of the variable
		color<-"#FFFFE0"							
		# For each cell
		for (cell in sigcells_ROC)
		{		
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 3+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 4+1,fill=color)
		}			
		# Take the colors of the variable
		color<-"#CC79A7"							
		# For each cell
		for (cell in sigcells_LASSO)
		{		
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 5+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 6+1,fill=color)
		}
		# Take the colors of the variable
		color<-"#D55E00"							
		# For each cell
		for (cell in sigcells_RF)
		{		
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 7+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 8+1,fill=color)
		}
		print(tab)
	dev.off()	
	# return table
	return(featureSelection_sub)
}	
##########################################################################################################################################
##########################################################################################################################################
# Calculate feature selection
# Function to tertile analysis
save_plot_featureSelection3 <- function(featureSelection_table=NULL,outputfolder=outputfolder,datalayer=NULL)
{
	library("VennDiagram")
	library("ggpubr")
	
	# Re-order table
	featureSelection_table<-featureSelection_table[,c(3,1,2,15,13,14,18,16,17,21,19,20,12,10,11,6,4,5,9,7,8)]
		
	
	# First, save excel file	
	write.xlsx(featureSelection_table, file=paste(outputfolder,"/","FeatureSelection_table_",datalayer,".xlsx",sep=""), append=FALSE)
		
	# Set pvalue treshold
	BH_treshold<-0.1
		
	# Create significant table
	DE_molecules<-featureSelection_table[unique(c(which(featureSelection_table$whole.BH<=BH_treshold),
	which(featureSelection_table$male.BH<=BH_treshold),
	which(featureSelection_table$female.BH<=BH_treshold),
	which(featureSelection_table$DMT2.BH<=BH_treshold),
	which(featureSelection_table$nonDMT2.BH<=BH_treshold),
	which(featureSelection_table$smokers.BH<=BH_treshold),
	which(featureSelection_table$nonSmokers.BH<=BH_treshold))),]
	
	
	# Create venn list
	venn_lis_de<-list(whole.dataset=rownames(featureSelection_table[c(which(featureSelection_table$whole.BH<=BH_treshold)),]),
	only.male=rownames(featureSelection_table[c(which(featureSelection_table$male.BH<=BH_treshold)),]),
	only.female=rownames(featureSelection_table[c(which(featureSelection_table$female.BH<=BH_treshold)),]),
	only.DMT2=rownames(featureSelection_table[c(which(featureSelection_table$DMT2.BH<=BH_treshold)),]),
	only.nonDMT2=rownames(featureSelection_table[c(which(featureSelection_table$nonDMT2.BH<=BH_treshold)),]),
	only.smokers=rownames(featureSelection_table[c(which(featureSelection_table$smokers.BH<=BH_treshold)),]),
	only.nonSmokers=rownames(featureSelection_table[c(which(featureSelection_table$nonSmokers.BH<=BH_treshold)),]))
	
	# Clean list
	venn_lis_de=list.clean(venn_lis_de,fun = function(x) length(x) == 0L)
	
	#venn.plot <- venn.diagram(venn_lis_de , , cex = 2, cat.fontface=4, category.names=c("A", "B"), main="Random Gene Lists")	
	venn.plot <- venn.diagram(venn_lis_de ,fill=c("grey",as.vector(c(varColor$DMT2_known["No"],varColor$Smoking_known["No"]))),alfa=c(0.3,0.3,0.3,0.3),cex = 2, cat.fontface=4,filename=paste(outputfolder,paste("/VeenDiagram","phenotypes",".png",sep=""),sep=""),imagetype="png")	
	

		
	# Create sub table
	featureSelection_sub<-featureSelection_table
	
	# First, save excel file	
	write.xlsx(featureSelection_sub, file=paste(outputfolder,"/","DE_",datalayer,".xlsx",sep=""), append=FALSE)
	
	
	# Make copy and transoform notation
	featureSelection_sub_notation<-featureSelection_sub
	
	# Adjust colulns
	for (col in colnames(featureSelection_sub_notation))
	{
		# Replace values
		featureSelection_sub_notation[,col]<-formatC(featureSelection_sub_notation[,col],format="E")
	}
	
	# Filter-out table
	featureSelection_sub_notation<-featureSelection_sub_notation[,c("whole.beta","whole.BH","male.beta","male.BH","female.beta","female.BH","DMT2.beta","DMT2.BH","nonDMT2.beta","nonDMT2.BH","smokers.beta","smokers.BH","nonSmokers.beta","nonSmokers.BH")]
	
	
	
	
	
	

	
	# Print Association Results Patients All Var Info		
	Cairo(width = dim(featureSelection_sub)[2]*1.10, height = dim(featureSelection_sub)[1]*0.35, units = 'in', res = 600, file=paste(outputfolder,"feature_selection_Selected.png",sep="/"), type="png", bg="white")		
	# Truncate values
		tab <- ggtexttable(featureSelection_sub_notation,theme = ttheme("classic",base_size=16))				
		# First for varIMP glm glm
		# Mark significant cells with the color of the variable
		sigcells_whole<-which(as.numeric(as.vector(featureSelection_sub_notation$whole.BH))<=BH_treshold)
		sigcells_male<-which(as.numeric(as.vector(featureSelection_sub_notation$male.BH))<=BH_treshold)
		sigcells_female<-which(as.numeric(as.vector(featureSelection_sub_notation$female.BH))<=BH_treshold)
		sigcells_dmt2<-which(as.numeric(as.vector(featureSelection_sub_notation$DMT2.BH))<=BH_treshold)
		sigcells_nonDMT2<-which(as.numeric(as.vector(featureSelection_sub_notation$nonDMT2.BH))<=BH_treshold)				
		sigcells_smokers<-which(as.numeric(as.vector(featureSelection_sub_notation$smokers.BH))<=BH_treshold)
		sigcells_nonSmokers<-which(as.numeric(as.vector(featureSelection_sub_notation$nonSmokers.BH))<=BH_treshold)				
						
		# For each cell
		for (cell in sigcells_whole)
		{		
			# Add color to cell
			color="grey"
			tab <- table_cell_bg(tab, row = cell+1, column = 1+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 2+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 3+1,fill=color)
		}
		
		# For each cell
		for (cell in sigcells_male)
		{		
			color=as.vector(varColor$Sex["M"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 3+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 4+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 6+1,fill=color)
		}	
		# For each cell
		for (cell in sigcells_female)
		{		
			color=as.vector(varColor$Sex["F"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 5+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 6+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 9+1,fill=color)
		}	
		# For each cell
		for (cell in sigcells_dmt2)
		{		
			color=as.vector(varColor$DMT2_known["Yes"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 7+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 8+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 12+1,fill=color)
		}	
		# For each cell
		for (cell in sigcells_nonDMT2)
		{		
			color=as.vector(varColor$DMT2_known["No"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 9+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 10+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 15+1,fill=color)
		}
		# For each cell
		for (cell in sigcells_smokers)
		{		
			color=as.vector(varColor$Smoking_known["Yes"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 11+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 12+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 18+1,fill=color)
			
		}
		for (cell in sigcells_nonSmokers)
		{		
			color=as.vector(varColor$Smoking_known["No"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 13+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 14+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 21+1,fill=color)
		}

		print(tab)
	dev.off()	
	# return table
	return(featureSelection_sub)
}	

##########################################################################################################################################
# Calculate feature selection
# Function to tertile analysis
save_plot_featureSelection4 <- function(featureSelection_table=NULL,outputfolder=outputfolder,datalayer=NULL)
{
	library("VennDiagram")
	library("ggpubr")
	
	# Re-order table
	featureSelection_table<-featureSelection_table[,c(3,1,2,15,13,14,18,16,17,21,19,20,12,10,11,6,4,5,9,7,8)]
		
	
	# First, save excel file	
	write.xlsx(featureSelection_table, file=paste(outputfolder,"/","FeatureSelection_table_",datalayer,".xlsx",sep=""), append=FALSE)
		
		
	# Create sub table
	featureSelection_sub<-featureSelection_table
	
	# First, save excel file	
	write.xlsx(featureSelection_sub, file=paste(outputfolder,"/","DE_",datalayer,".xlsx",sep=""), append=FALSE)
	
	
	# Make copy and transoform notation
	featureSelection_sub_notation<-featureSelection_sub
	
	# Adjust colulns
	for (col in colnames(featureSelection_sub_notation))
	{
		# Replace values
		featureSelection_sub_notation[,col]<-formatC(featureSelection_sub_notation[,col],format="E")
	}
	
	# Filter-out table
	featureSelection_sub_notation<-featureSelection_sub_notation[,c("whole.pvalue","whole.beta","male.pvalue","male.beta","female.pvalue","female.beta","DMT2.pvalue","DMT2.beta","nonDMT2.pvalue","nonDMT2.beta","smokers.pvalue","smokers.beta","nonSmokers.pvalue","nonSmokers.beta")]
	
	
	
	
	
	

	BH_treshold=0.05
	# Print Association Results Patients All Var Info		
	Cairo(width = dim(featureSelection_sub)[2]*1.30, height = dim(featureSelection_sub)[1]*0.35, units = 'in', res = 600, file=paste(outputfolder,"feature_selection_Selected.png",sep="/"), type="png", bg="white")		
	# Truncate values
		tab <- ggtexttable(featureSelection_sub_notation,theme = ttheme("classic",base_size=16))				
		# First for varIMP glm glm
		# Mark significant cells with the color of the variable
		sigcells_whole<-which(as.numeric(as.vector(featureSelection_sub_notation$whole.pvalue))<=BH_treshold)
		sigcells_male<-which(as.numeric(as.vector(featureSelection_sub_notation$male.pvalue))<=BH_treshold)
		sigcells_female<-which(as.numeric(as.vector(featureSelection_sub_notation$female.pvalue))<=BH_treshold)
		sigcells_dmt2<-which(as.numeric(as.vector(featureSelection_sub_notation$DMT2.pvalue))<=BH_treshold)
		sigcells_nonDMT2<-which(as.numeric(as.vector(featureSelection_sub_notation$nonDMT2.pvalue))<=BH_treshold)				
		sigcells_smokers<-which(as.numeric(as.vector(featureSelection_sub_notation$smokers.pvalue))<=BH_treshold)
		sigcells_nonSmokers<-which(as.numeric(as.vector(featureSelection_sub_notation$nonSmokers.pvalue))<=BH_treshold)				
						
		# For each cell
		for (cell in sigcells_whole)
		{		
			# Add color to cell
			color="grey"
			tab <- table_cell_bg(tab, row = cell+1, column = 1+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 2+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 3+1,fill=color)
		}
		
		# For each cell
		for (cell in sigcells_male)
		{		
			color=as.vector(varColor$Sex["M"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 3+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 4+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 6+1,fill=color)
		}	
		# For each cell
		for (cell in sigcells_female)
		{		
			color=as.vector(varColor$Sex["F"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 5+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 6+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 9+1,fill=color)
		}	
		# For each cell
		for (cell in sigcells_dmt2)
		{		
			color=as.vector(varColor$DMT2_known["Yes"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 7+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 8+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 12+1,fill=color)
		}	
		# For each cell
		for (cell in sigcells_nonDMT2)
		{		
			color=as.vector(varColor$DMT2_known["No"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 9+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 10+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 15+1,fill=color)
		}
		# For each cell
		for (cell in sigcells_smokers)
		{		
			color=as.vector(varColor$Smoking_known["Yes"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 11+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 12+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 18+1,fill=color)
			
		}
		for (cell in sigcells_nonSmokers)
		{		
			color=as.vector(varColor$Smoking_known["No"])
			# Add color to cell
			tab <- table_cell_bg(tab, row = cell+1, column = 13+1,fill=color)
			tab <- table_cell_bg(tab, row = cell+1, column = 14+1,fill=color)
			#tab <- table_cell_bg(tab, row = cell+1, column = 21+1,fill=color)
		}

		print(tab)
	dev.off()	
	# return table
	return(featureSelection_sub)
}	

##########################################################################################################################################
# Calculate feature selection
# Function to tertile analysis
save_plot_featureSelection2 <- function(featureSelection_table=NULL,outputfolder=outputfolder,datalayer=NULL)
{
	library("VennDiagram")
	library("ggpubr")
	
	# First, save excel file	
	write.xlsx(featureSelection_table, file=paste(outputfolder,"/","FeatureSelection_table_",datalayer,".xlsx",sep=""), append=FALSE)
	
	# Re-order table
	featureSelection_table<-featureSelection_table[,c(3,1,2,15,13,14,18,16,17,21,19,20,12,10,11,6,4,5,9,7,8)]
		
		
	# Set pvalue treshold
	pvalue_treshold<-0.05
		
	# Create significant table
	DE_molecules<-featureSelection_table[unique(c(which(featureSelection_table$whole.pvalue<=pvalue_treshold),
	which(featureSelection_table$male.BH<=pvalue_treshold),
	which(featureSelection_table$female.BH<=pvalue_treshold),
	which(featureSelection_table$DMT2.BH<=pvalue_treshold),
	which(featureSelection_table$nonDMT2.BH<=pvalue_treshold),
	which(featureSelection_table$smokers.BH<=pvalue_treshold),
	which(featureSelection_table$nonSmokers.BH<=pvalue_treshold))),]
	
	
	# Create venn list
	venn_lis_de<-list(whole.dataset=rownames(featureSelection_table[c(which(featureSelection_table$whole.pvalue<=pvalue_treshold)),]),
	only.male=rownames(featureSelection_table[c(which(featureSelection_table$male.BH<=pvalue_treshold)),]),
	only.female=rownames(featureSelection_table[c(which(featureSelection_table$female.BH<=pvalue_treshold)),]),
	only.DMT2=rownames(featureSelection_table[c(which(featureSelection_table$DMT2.BH<=pvalue_treshold)),]),
	only.nonDMT2=rownames(featureSelection_table[c(which(featureSelection_table$nonDMT2.BH<=pvalue_treshold)),]),
	only.smokers=rownames(featureSelection_table[c(which(featureSelection_table$smokers.BH<=pvalue_treshold)),]),
	only.nonSmokers=rownames(featureSelection_table[c(which(featureSelection_table$nonSmokers.BH<=pvalue_treshold)),]))
	
	# Clean list
	venn_lis_de=list.clean(venn_lis_de,fun = function(x) length(x) == 0L)
	
	#venn.plot <- venn.diagram(venn_lis_de , , cex = 2, cat.fontface=4, category.names=c("A", "B"), main="Random Gene Lists")	
	#venn.plot <- venn.diagram(venn_lis_de ,fill=c("grey",as.vector(c(varColor$Sex["M"],varColor$Smoking_known["Yes"]))),alfa=c(0.3,0.3,0.3,0.3),cex = 2, cat.fontface=4,filename=paste(outputfolder,paste("/VeenDiagram","phenotypes",".png",sep=""),sep=""),imagetype="png")	
		
	# Create sub table
	featureSelection_sub<-DE_molecules
	
	# First, save excel file	
	write.xlsx(featureSelection_sub, file=paste(outputfolder,"/","DE_",datalayer,".xlsx",sep=""), append=FALSE)
	
	
	# Make copy and transoform notation
	featureSelection_sub_notation<-featureSelection_sub
	
	# Adjust colulns
	for (col in colnames(featureSelection_sub_notation))
	{
		# Replace values
		featureSelection_sub_notation[,col]<-formatC(featureSelection_sub_notation[,col],format="E")
	}
	
	# Filter-out table
	featureSelection_sub_notation<-featureSelection_sub_notation[,c("whole.beta","whole.pvalue","male.beta","male.BH","female.beta","female.BH","DMT2.beta","DMT2.BH","nonDMT2.beta","nonDMT2.BH","smokers.beta","smokers.BH","nonSmokers.beta","nonSmokers.BH")]
	
	return(featureSelection_sub)
}	
##########################################################################################################################################
# After outliers excluding, please provide a « clean table ready for submission » of the main characteristics of the ischemia and non ischemia patients  (%, mean , SD)
##########################################################################################################################################
# Create table with average expression for submission
average_expression_table <- function(raw_expression_table=NULL,outputfolder=outputfolder,datalayer=NULL,patients_ids=patients_ids,control_ids=control_ids,diabetic_ids=diabetic_ids,nonDiabetic_ids=nonDiabetic_ids,filename=NULL)
{
	# Main data frame - Ishchemia yes vs. no
	ischemia_yes_no<-data.frame()
	ischemia_yes_no_diabetic<-data.frame()
	ischemia_yes_no_diabetic_sex<-data.frame()

	# For each biomarker in raw table
	for (molecule in colnames(raw_expression_table))
	{
		# First, exclude outlier
		print(molecule)
		
		# Take expression in cased
		cases_exp<-raw_expression_table[intersect(patients_ids,rownames(raw_expression_table)),molecule]
		
		# Remove outliers
		cases_exp<-cases_exp[which(!cases_exp %in% boxplot(cases_exp,range=1.0)$out)]

		# Take expression in control
		control_exp<-raw_expression_table[intersect(control_ids,rownames(raw_expression_table)),molecule]	
		
		# Remove outliers
		control_exp<-control_exp[which(!control_exp %in% boxplot(control_exp,range=1.0)$out)]			
		
		# Caculate mean()
		case_formatted<-paste("n=", length(cases_exp),",","mean=",round(mean(cases_exp),2),",sd=",round(sd(cases_exp)/mean(cases_exp)*100,2),"%",sep="")
		control_formatted<-paste("n=", length(control_exp),",","mean=",round(mean(control_exp),2),",sd=",round(sd(control_exp)/mean(control_exp)*100,2),"%",sep="")
		
		# Split futher into diabetic patients
		# Take expression in cased
		cases_exp_diabetic<-raw_expression_table[intersect(intersect(patients_ids,rownames(raw_expression_table)),diabetic_ids),molecule]			
		cases_exp_nondiabetic<-raw_expression_table[intersect(intersect(patients_ids,rownames(raw_expression_table)),nonDiabetic_ids),molecule]			
		
		# Take the control
		control_exp_diabetic<-raw_expression_table[intersect(intersect(control_ids,rownames(raw_expression_table)),diabetic_ids),molecule]			
		control_exp_nondiabetic<-raw_expression_table[intersect(intersect(control_ids,rownames(raw_expression_table)),nonDiabetic_ids),molecule]						
		
		# Remove outliers
		cases_exp_diabetic<-cases_exp_diabetic[which(!cases_exp_diabetic %in% boxplot(cases_exp_diabetic,range=1.0)$out)]			
		cases_exp_nondiabetic<-cases_exp_nondiabetic[which(!cases_exp_nondiabetic %in% boxplot(cases_exp_nondiabetic,range=1.0)$out)]			
					
		# Remove outliers
		control_exp_diabetic<-control_exp_diabetic[which(!control_exp_diabetic %in% boxplot(control_exp_diabetic,range=1.0)$out)]			
		control_exp_nondiabetic<-control_exp_nondiabetic[which(!control_exp_nondiabetic %in% boxplot(control_exp_nondiabetic,range=1.0)$out)]			
		
		# Caculate mean()
		case_diabetic_formatted<-paste("n=", length(cases_exp_diabetic),",","mean=",round(mean(cases_exp_diabetic),2),",sd=",round(sd(cases_exp_diabetic)/mean(cases_exp_diabetic)*100,2),"%",sep="")
		case_nondiabetic_formatted<-paste("n=", length(cases_exp_nondiabetic),",","mean=",round(mean(cases_exp_nondiabetic),2),",sd=",round(sd(cases_exp_nondiabetic)/mean(cases_exp_nondiabetic)*100,2),"%",sep="")					
		control_diabetic_formatted<-paste("n=", length(control_exp_diabetic),",","mean=",round(mean(control_exp_diabetic),2),",sd=",round(sd(control_exp_diabetic)/mean(control_exp_diabetic)*100,2),"%",sep="")
		control_nondiabetic_formatted<-paste("n=", length(control_exp_nondiabetic),",","mean=",round(mean(control_exp_nondiabetic),2),",sd=",round(sd(control_exp_nondiabetic)/mean(control_exp_nondiabetic)*100,2),"%",sep="")						
							
		# Bind to table
		ischemia_yes_no<-rbind(ischemia_yes_no,data.frame(IschemiaYes=case_formatted,IschemiaNo=control_formatted))			
		ischemia_yes_no_diabetic<-rbind(ischemia_yes_no_diabetic,data.frame(IschemiaYes=case_formatted,IschemicDiabetic=case_diabetic_formatted,IschemicNonDiabetic=case_nondiabetic_formatted,			
		IschemiaNo=control_formatted,nonIschemicDiabetic=control_diabetic_formatted,nonIschemicNonDiabetic=control_nondiabetic_formatted))
				
	}
	# Set rownames
	rownames(ischemia_yes_no)<-colnames(raw_expression_table)
	rownames(ischemia_yes_no_diabetic)<-colnames(raw_expression_table)
	
	# Set colnames
	colnames(ischemia_yes_no)[1]<-paste(colnames(ischemia_yes_no)[1],",n=",length(raw_expression_table[intersect(patients_ids,rownames(raw_expression_table)),molecule]),sep="")
	colnames(ischemia_yes_no)[2]<-paste(colnames(ischemia_yes_no)[2],",n=",length(raw_expression_table[intersect(control_ids,rownames(raw_expression_table)),molecule]),sep="")
	
	# Set colnames
	colnames(ischemia_yes_no_diabetic)[1]<-paste(colnames(ischemia_yes_no_diabetic)[1],",n=",length(intersect(patients_ids,rownames(raw_expression_table))),sep="")
	colnames(ischemia_yes_no_diabetic)[2]<-paste(colnames(ischemia_yes_no_diabetic)[2],",n=",length(intersect(intersect(patients_ids,rownames(raw_expression_table)),diabetic_ids)),sep="")
	colnames(ischemia_yes_no_diabetic)[3]<-paste(colnames(ischemia_yes_no_diabetic)[3],",n=",length(intersect(intersect(patients_ids,rownames(raw_expression_table)),nonDiabetic_ids)),sep="")
	colnames(ischemia_yes_no_diabetic)[4]<-paste(colnames(ischemia_yes_no_diabetic)[4],",n=",length(intersect(control_ids,rownames(raw_expression_table))),sep="")	
	colnames(ischemia_yes_no_diabetic)[5]<-paste(colnames(ischemia_yes_no_diabetic)[2],",n=",length(intersect(intersect(control_ids,rownames(raw_expression_table)),diabetic_ids)),sep="")
	colnames(ischemia_yes_no_diabetic)[6]<-paste(colnames(ischemia_yes_no_diabetic)[3],",n=",length(intersect(intersect(control_ids,rownames(raw_expression_table)),nonDiabetic_ids)),sep="")	
	
	# Set colnames
	#colnames(ischemia_yes_no_diabetic_sex)<-c("Var",colnames(ischemia_yes_no_diabetic))
	
	# Save on table
	filename=paste(outputfolder,"/DE_Biomarker_summary.xlsx",sep="")
	write.xlsx(ischemia_yes_no, file=filename,sheetName="Ischemia",append=FALSE)
	write.xlsx(ischemia_yes_no_diabetic, file=filename,sheetName="IschemiaDiabetes",append=TRUE)
	#write.xlsx(ischemia_yes_no_diabetic_sex, file=paste(outputfolder,"/DE_Biomarker_summary.xlsx",sep=""),sheetName="IschemiaDiabetesSex",append=TRUE)

}
##########################################################################################################################################
##########################################################################################################################################
# Please remove « box blood samples » variable from the StepWise and AUC analysis and rerun
# StepAIC
##########################################################################################################################################
# Create table with average expression for submission
run_stepAIC <- function(expression_table_batchRemoved=NULL,patient_dataset=NULL,outputfolder=outputfolder,datalayer=NULL)
{
	library("MASS")
	library("pROC")

	# Create merged table
	CAD_molecule_work<-expression_table_batchRemoved

	# Merge tables
	CAD_molecule_work<-merge(data.frame(CAD_molecule_work,ID=rownames(CAD_molecule_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_molecule_work)<-as.vector(CAD_molecule_work$ID)

	# Remove col ID
	CAD_molecule_work<-CAD_molecule_work[,-c(1)]
	
	# Set colnames
	colnames(CAD_molecule_work)[1:dim(expression_table_batchRemoved)[2]]<-colnames(expression_table_batchRemoved)

	##########################################################################################################################################
	if(datalayer=="microRNAs")
	{
		# Create models
		#formula.full=paste("Ischemia ~ Sex + ",paste(colnames(CAD_Biomarkers),collapse=" + "),sep="")
		formula.full=paste("Ischemia ~ Age + Sex + DMT2_known + Smoking_known + ",paste(paste0("`", colnames(expression_table_batchRemoved), "`"),collapse=" + "),sep="")
	
	}else
	{
		# Create models
		#formula.full=paste("Ischemia ~ Sex + ",paste(colnames(CAD_Biomarkers),collapse=" + "),sep="")
		formula.full=paste("Ischemia ~ Age + Sex + DMT2_known + Smoking_known + ",paste(colnames(expression_table_batchRemoved),collapse=" + "),sep="")	
	}
	# Produce glm model
	glm.full<-glm(formula=formula.full,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)

	# Produce step AIC
	stepAIC_glm.full<-stepAIC(glm.full,scope = list(upper=formula.full,lower="Ischemia ~ Age + Sex"), trace = TRUE)	
	
	# Plor results
	# Plot stepAIC table
	table<-plot_stepAIC_results(stepAIC_results=stepAIC_glm.full,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_",datalayer,sep=""),".png",sep=""),dataset=expression_table_batchRemoved)	
	
	# Filter out talbe
	table<-table[which(table$POS<=2 |  as.numeric(as.vector(table$pvalue))<=0.05),]
	
	
	# Create list
	roc_molecules<-list()
	roc_names<-list()
		
	# Re-generate formula
	formula.full=paste("Ischemia ~ ",paste(unique(c("Age","Sex",rownames(table))),collapse=" + "),sep="")
	
	#CAD_molecule_work$ratio_Cholesterin<-CAD_molecule_work$LDLCholesterin/CAD_molecule_work$HDLCholesterin
	
	# Produce glm model
	glm.full<-glm(formula=formula.full,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	
	# Re-generate formula
	#formula.full=paste("Ischemia ~ ",paste(unique(c("Age","Sex","Insulin","Insulin*DMT2_known",rownames(table))),collapse=" + "),sep="")	

	# Save all rock curve in a list
	roc_molecules[["stepAIC.selection"]] <- roc(Ischemia~glm.full$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)	
	
	# Calculate CI
	CI<-round(as.vector(roc_molecules[["stepAIC.selection"]]$ci),3)	
		
	# Save name of full model
	roc_names[["stepAIC.selection"]] <-paste("AUC=",CI[2]," 95%CI=",CI[1],"-",CI[3],sep="")
	
	
	# Take results data.frame
	table$auc<-0
	
	# Save formula
	table$formula<-""

	# For each position in the rnk
	for (rnk in 1:length(rownames(table) ))
	{	
		# Take the variables		
		# Create condensed formula
		formula.full=paste("Ischemia ~ ",paste(as.vector(table[1:rnk,"Var"]),collapse=" + "),sep="")		

		# Produce glm model
		glm.full<-glm(formula=formula.full,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)

		# take AUC		
		table[rnk,"auc"]<-as.vector(roc(Ischemia~glm.full$fitted.values, data = CAD_molecule_work, plot = FALSE)$auc)
		
		# Save formula
		table[rnk,"formula"]<-formula.full
	}
	
	# Create first plot
	names(roc_molecules)<-roc_names[["stepAIC.selection"]]
	C<-ggroc(roc_molecules)+ geom_line()+ theme_bw()+ ggtitle("ROC curve analysis of step selection model") + theme(legend.position = c(0.70, 0.3), legend.background = element_rect(color = NA,fill = NA, size = 1, linetype = "solid"))+theme(legend.title = element_blank())+ scale_color_manual(values = "black")
	 
	# Corrlation plot
	print(paste(outputfolder,"/",paste("stepAIC_ROC_Curve_plot_",datalayer,sep=""),".png",sep=""))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_plot_",datalayer,sep=""),".png",sep=""), type="png", bg="white")		
			print(C)
	dev.off()
	
	table$POS<-1:length(table$POS)
	# Corrlation plot
	print(paste(outputfolder,"/",paste("stepAIC_ROC_Curve_model_",datalayer,sep=""),".png",sep=""))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_model_",datalayer,sep=""),".png",sep=""), type="png", bg="white")		
			ggplot(data=table, aes(x=POS, y=auc, group=1,label = paste("auc = ",round(table$auc,3),sep=""))) + geom_line()+ geom_point()+theme_minimal() + scale_x_continuous(breaks=seq(1,length(rownames(table))),labels=as.vector(table$Var))+xlab("Added variable")+theme(axis.text.x = element_text(angle = 90))+ geom_text(size=2)
	dev.off()
	
	return(table)

}


##########################################################################################################################################
##########################################################################################################################################
# Please remove « box blood samples » variable from the StepWise and AUC analysis and rerun
# StepAIC

##########################################################################################################################################
# Create table with average expression for submission
run_roc_joint <- function(expression_table_batchRemoved=NULL,CAD_molecule_work=NULL,ha_molecules=NULL,ddsPLS=NULL,outputfolder=outputfolder)
{
	##########################################################################################################################################
	library("MASS")
	library("pROC")
	
	# Take microRNA molecules
	molecules_microRNA<-intersect(rownames(ha_molecules)[which(ha_molecules[,1]=="microRNA")],colnames(expression_table_batchRemoved))
	molecules_metabolite<-intersect(rownames(ha_molecules)[which(ha_molecules[,1]=="Metabolite")],colnames(expression_table_batchRemoved))
	molecules_biomarker<-intersect(rownames(ha_molecules)[which(ha_molecules[,1]=="Biomarker")],colnames(expression_table_batchRemoved))
	molecules_info<-rownames(ha_molecules)[which(ha_molecules[,1]=="Info")]
		
	# Create models
	#formula.full=paste("Ischemia ~ Sex + ",paste(colnames(CAD_Biomarkers),collapse=" + "),sep="")
	formula.full.ddsPLS=paste("Ischemia ~ ",paste(paste0("`", ddsPLS, "`"),collapse=" + "),sep="")
	formula.microRNA=paste("Ischemia ~ ",paste(paste0("`", molecules_microRNA, "`"),collapse=" + "),sep="")
	formula.biomarker=paste("Ischemia ~ ",paste(paste0("`", molecules_biomarker, "`"),collapse=" + "),sep="")
	formula.metabolite=paste("Ischemia ~ ",paste(paste0("`", molecules_metabolite, "`"),collapse=" + "),sep="")
	formula.info=paste("Ischemia ~ ",paste(paste0("`", molecules_info, "`"),collapse=" + "),sep="")
		
	# Produce glm model
	glm.full.ddsPLS<-glm(formula=formula.full.ddsPLS,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)	
	glm.microRNA<-glm(formula=formula.microRNA,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.metabolite<-glm(formula=formula.metabolite,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.biomarker<-glm(formula=formula.biomarker,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.Information<-glm(formula=formula.info,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)

	# Produce step AIC
	#stepAIC_glm.full<-stepAIC(glm.full, trace = TRUE)	
	

		
	
	# Create list
	roc_molecules<-list()
	roc_names<-list()
		
	
	# Save all rock curve in a list
	roc_molecules[["ddsPLS.selection"]] <- roc(Ischemia~glm.full.ddsPLS$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["microRNA.selection"]] <- roc(Ischemia~glm.microRNA$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["metabolite.selection"]] <- roc(Ischemia~glm.metabolite$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["biomarker.selection"]] <- roc(Ischemia~glm.biomarker$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["info.selection"]] <- roc(Ischemia~glm.Information$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)			
	
	# Calculate CI
	CI.ddsPLS<-round(as.vector(roc_molecules[["ddsPLS.selection"]]$ci),3)	
	CI.microRNA<-round(as.vector(roc_molecules[["microRNA.selection"]]$ci),3)	
	CI.metabolite<-round(as.vector(roc_molecules[["metabolite.selection"]]$ci),3)	
	CI.biomarker<-round(as.vector(roc_molecules[["biomarker.selection"]]$ci),3)	
	CI.info<-round(as.vector(roc_molecules[["info.selection"]]$ci),3)	
		
	# Save name of full model
	roc_names[["ddsPLS.selection"]] <-paste("block.splsda AUC=",CI.ddsPLS[2]," 95%CI=",CI.ddsPLS[1],"-",CI.ddsPLS[3],sep="")
	roc_names[["ddsPLS.microRNA"]] <-paste("microRNA AUC=",CI.microRNA[2]," 95%CI=",CI.microRNA[1],"-",CI.microRNA[3],sep="")
	roc_names[["ddsPLS.metabolite"]] <-paste("metabolite AUC=",CI.metabolite[2]," 95%CI=",CI.metabolite[1],"-",CI.metabolite[3],sep="")
	roc_names[["ddsPLS.biomarker"]] <-paste("biomarker AUC=",CI.biomarker[2]," 95%CI=",CI.biomarker[1],"-",CI.biomarker[3],sep="")
	roc_names[["ddsPLS.info"]] <-paste("info AUC=",CI.info[2]," 95%CI=",CI.info[1],"-",CI.info[3],sep="")
	
	
	# Create first plot
	names(roc_molecules)<-roc_names
		
	colors<-c(colorblind_pal()(8)[4],	"black",	colorblind_pal()(8)[6],	colorblind_pal()(8)[5],	colorblind_pal()(8)[3])
	#names(colors)<-c("ddsPLS.selection","microRNA.selection","metabolite.selection","biomarker.selection","info.selection")
	
	C<-ggroc(roc_molecules)+ geom_line()+ theme_bw()+ ggtitle("ROC curve analysis") + theme(legend.position = c(0.70, 0.3), legend.background = element_rect(color = NA,fill = NA, size = 1, linetype = "solid"))+theme(legend.title = element_blank())+ scale_color_manual(values = colors)
	
		 
	# Corrlation plot
	datalayer="_ROC"
	print(paste(outputfolder,"/",paste("ROC_Curve_plot_",datalayer,sep=""),".png",sep=""))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"/",paste("ROC_Curve_plot_",datalayer,sep=""),".png",sep=""), type="png", bg="white")		
			print(C)
	dev.off()
}




##########################################################################################################################################
##########################################################################################################################################
# Lastly, load basic functions
##########################################################################################################################################
##########################################################################################################################################
CAD_Patients_Age<-load_data_Patients()
##########################################################################################################################################
# For each variable below, plot the number of each group  (No,Yes) per diagnositc
# Ischemia Sex Age aHT_known	HLP_known	DMT2_known	Smoking_known	Fam_known	CHD_known
# Multiple wafle chart
# Age colors
Age=c("#284d96","#697ebe","#9da9d6","#d3d3e6")
names(Age)<-levels(CAD_Patients_Age$Age)

# Set color of variables
varColor=
list(Ischemia=c(No=colorblind_pal()(8)[c(1,2)][1],Yes=colorblind_pal()(8)[c(1,2)][2]),
Sex=c(M=colorblind_pal()(8)[c(6,8)][1],F=colorblind_pal()(8)[c(6,8)][2]),
Age=Age,
aHT_known=c(No=colorblind_pal()(8)[c(3,7)][1],Yes=colorblind_pal()(8)[c(3,7)][2]),
HLP_known=c(No=c("#55550b","#43439c")[1],Yes=c("#55550b","#43439c")[2]),
DMT2_known=c(No=c("#a50f15","#3c690f")[1],Yes=c("#a50f15","#3c690f")[2]),
Smoking_known=c(No=c("#08519c","#7828a0")[1],Yes=c("#08519c","#7828a0")[2]),
Fam_known=c(No=c("#bdd7e7","#afeb55")[1],Yes=c("#bdd7e7","#afeb55")[2]),
CHD_known=c(No=colorblind_pal()(8)[c(4,5)][1],Yes=colorblind_pal()(8)[c(4,5)][2]),
Box_Blood_samples=c(No="red",yes="red"))


# This is the header of the heatmap
# Create a heatmap splitting case vs. control
# The patients are still ordered by ID_PATIENT
# Add these annotations carefully selecting the colors
# Add a table per variable to summarize information 
# Ischemia (Yes/No) counts
# Variable (Yes/No) counts

# Set name of variables
varNames=c(aHT_known="Arterial Hypertonia",
HLP_known="Hyperlipoproteinemia",
DMT2_known="type II diabetes mellitus",
Smoking_known="Smoking",
Fam_known="Family history",
CHD_known="Congenital heart defect")

##########################################################################################################################################
# Set variables
variables=c("aHT_known","HLP_known","DMT2_known","Smoking_known","Fam_known","CHD_known")

##########################################################################################################################################
# Heatmap
df_heatmap<-data.frame(replicate(length(varColor),sample(0:10,dim(CAD_Patients_Age)[1],rep=TRUE)))
ha<-CAD_Patients_Age[,c(names(varColor))]
rownames(ha)<-as.vector(CAD_Patients_Age$ID_PATIENT)

# Reverse order of variables
ha<-ha[,c(dim(ha)[2]:1)]
varColor<-varColor[9:1]

# Take all the schemia=TRUE
index_schemia_true<-which(CAD_Patients_Age$Ischemia=="Yes")
# Take all the schemia=FALSE
index_schemia_true<-which(CAD_Patients_Age$Ischemia=="No")

# Take all the Sex=M
index_schemia_true<-which(CAD_Patients_Age$Sex=="M")
# Take all the Sex=f
index_schemia_true<-which(CAD_Patients_Age$Sex=="F")

# Ischemia=Yes, Sex=M
ordering<-c(as.vector(CAD_Patients_Age[which(CAD_Patients_Age$Ischemia=="Yes" & CAD_Patients_Age$Sex=="M"),"ID_PATIENT"]),
as.vector(CAD_Patients_Age[which(CAD_Patients_Age$Ischemia=="Yes" & CAD_Patients_Age$Sex=="F"),"ID_PATIENT"]),
as.vector(CAD_Patients_Age[which(CAD_Patients_Age$Ischemia=="No" & CAD_Patients_Age$Sex=="M"),"ID_PATIENT"]),
as.vector(CAD_Patients_Age[which(CAD_Patients_Age$Ischemia=="No" & CAD_Patients_Age$Sex=="F"),"ID_PATIENT"]))

##########################################################################################################################################
# This is the header of the heatmap
# Create a heatmap splitting case vs. control
# The patients are still ordered by ID_PATIENT
# Add these annotations carefully selecting the colors
# Add a table per variable to summarize information 
# Ischemia (Yes/No) counts
# Variable (Yes/No) counts
##########################################################################################################################################
# Male and female
# Re-factor
CAD_Patients_Age$Ischemia<-factor(CAD_Patients_Age$Ischemia)
CAD_Patients_Age$Sex
CAD_Patients_Age$Age

# Calculate the BMI
CAD_Patients_Age$BMI<-as.numeric(as.vector(CAD_Patients_Age$Weight))/(as.numeric(as.vector(CAD_Patients_Age$Height))/100*as.numeric(as.vector(CAD_Patients_Age$Height))/100)

# Create factors
#CAD_Patients_Age$aHT_known<-as.numeric(as.vector(CAD_Patients_Age$aHT_known))
CAD_Patients_Age[which(CAD_Patients_Age$aHT_known==1),"aHT_known"]<-"Yes"
CAD_Patients_Age[which(CAD_Patients_Age$aHT_known==0),"aHT_known"]<-"No"
CAD_Patients_Age$aHT_known<-factor(CAD_Patients_Age$aHT_known)

# Create factors
#CAD_Patients_Age$HLP_known<-as.numeric(as.vector(CAD_Patients_Age$HLP_known))
CAD_Patients_Age[which(CAD_Patients_Age$HLP_known==1),"HLP_known"]<-"Yes"
CAD_Patients_Age[which(CAD_Patients_Age$HLP_known==0),"HLP_known"]<-"No"
CAD_Patients_Age$HLP_known<-factor(CAD_Patients_Age$HLP_known)

# Create factors
#CAD_Patients_Age$DMT2_known<-as.numeric(as.vector(CAD_Patients_Age$DMT2_known))
CAD_Patients_Age[which(CAD_Patients_Age$DMT2_known==1),"DMT2_known"]<-"Yes"
CAD_Patients_Age[which(CAD_Patients_Age$DMT2_known==0),"DMT2_known"]<-"No"
CAD_Patients_Age$DMT2_known<-factor(CAD_Patients_Age$DMT2_known)

# Create factors
#CAD_Patients_Age$Smoking_known<-as.numeric(as.vector(CAD_Patients_Age$Smoking_known))
CAD_Patients_Age[which(CAD_Patients_Age$Smoking_known==1),"Smoking_known"]<-"Yes"
CAD_Patients_Age[which(CAD_Patients_Age$Smoking_known==0),"Smoking_known"]<-"No"
CAD_Patients_Age$Smoking_known<-factor(CAD_Patients_Age$Smoking_known)

# Create factors
#CAD_Patients_Age$Fam_known<-as.numeric(as.vector(CAD_Patients_Age$Fam_known))
CAD_Patients_Age[which(CAD_Patients_Age$Fam_known==1),"Fam_known"]<-"Yes"
CAD_Patients_Age[which(CAD_Patients_Age$Fam_known==0),"Fam_known"]<-"No"
CAD_Patients_Age$Fam_known<-factor(CAD_Patients_Age$Fam_known)

# Create factors
#CAD_Patients_Age$CHD_known<-as.numeric(as.vector(CAD_Patients_Age$CHD_known))
CAD_Patients_Age[which(CAD_Patients_Age$CHD_known==1),"CHD_known"]<-"Yes"
CAD_Patients_Age[which(CAD_Patients_Age$CHD_known==0),"CHD_known"]<-"No"
CAD_Patients_Age$CHD_known<-factor(CAD_Patients_Age$CHD_known)


# Set name of variables
varNames=c(aHT_known="Arterial Hypertonia",
HLP_known="Hyperlipoproteinemia",
DMT2_known="type II diabetes mellitus",
Smoking_known="Smoking",
Fam_known="Family history",
CHD_known="Congenital heart defect")

##########################################################################################################################################
# Auxiliary function
# addalpha()
addalpha <- function(colors, alpha=1.0) {
  r <- col2rgb(colors, alpha=T)
  # Apply alpha
  r[4,] <- alpha*255
  r <- r/255.0
  return(rgb(r[1,], r[2,], r[3,], r[4,]))
}
variable_Consistency<- function(featureSelection_selected=NULL,var=NULL)
{
	if(var=="Sex")
	{
		# Var complete interaction title title
		varInteractionPvalue<-paste("interaction.pvalue",var,sep=".")
		varInteractionBeta<-paste("interaction.beta",var,sep=".")

		# Stopped here 
		# Summary cad data Metabolites part 2
		##########################################################################################################################################*
		# Female
		# For each protein
		# t.test
		# Scale protein levels
		# Take expression levels
		# Save final pvaules
		# Data frame with pvalue
		df_pvalue<-data.frame(Female=as.numeric(as.vector(featureSelection_selected[,"female.pvalue"])),Male=as.numeric(as.vector(featureSelection_selected[,"male.pvalue"])))

		# Data frame with pvalue
		df_beta<-data.frame(Female=as.numeric(as.vector(featureSelection_selected[,"female.beta"])),Male=as.numeric(as.vector(featureSelection_selected[,"male.beta"])))

		rownames(df_pvalue)<-rownames(featureSelection_selected)
		rownames(df_beta)<-rownames(featureSelection_selected)

		# Detect inversions in p-value
		# Inversion is characterized by sig -> nonsig
		# Inversion is characterized by nonsig -> sig
		# First, take significant in Male and female
		# Take p-value inversion
		inversions<-rownames(df_pvalue[which(as.numeric(as.vector(featureSelection_selected[,varInteractionPvalue]))<0.1),])

		# Set lables
		df_pvalue$Label<-""

		# Adjust labels
		df_pvalue[inversions,"Label"]<-inversions

		# Create plot
		Pvalu_invertion<-ggplot(df_pvalue, aes(x=1-log(Female), y=1-log(Male),label =df_pvalue$Label)) +geom_text_repel(data=df_pvalue, aes(label=Label))+ geom_point() + ggtitle(paste("p-value Female vs. Male : Ischemia ~ ",sep=""))+theme_bw()+ geom_hline(yintercept=1-log(0.1)) + geom_vline(xintercept=1-log(0.1))


		# Set lables
		df_beta$Label<-""

		# Adjust labels
		df_beta[inversions,"Label"]<-inversions

		# Create plot
		Beta_invertion<-ggplot(df_beta, aes(x=Female, y=Male,label =df_beta$Label)) +geom_text_repel(data=df_beta, aes(label=Label))+ geom_point() + ggtitle(paste("beta Female vs. Male : Ischemia ~ ",sep=""))+theme_bw()+ geom_hline(yintercept=0) + geom_vline(xintercept=0)

		# Print Association Results Patients All Var Info	
		print(paste(outputfolder,"AssociationResultsmicroFM.png",sep="/"))
		Cairo(width = 3.5, height = 7, units = 'in', res = 600, file=paste(outputfolder,"AssociationResultsmicroFM.png",sep="/"), type="png", bg="white")			
			g <- tableGrob(df_beta[,1:2])
			g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),t = 2, b = nrow(g), l = 1, r = ncol(g))
			beta_table <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(g))	
			g <- tableGrob(df_pvalue[,1:2])
			g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),t = 2, b = nrow(g), l = 1, r = ncol(g))
			pvalue_table <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(g))		
			print(ggarrange(plotlist=list(A=Pvalu_invertion,B=Beta_invertion), ncol = 1, nrow = 2,common.legend = FALSE, legend = "bottom"))				
		dev.off()

		# Create data frame
		results_f_m<-featureSelection_selected[,c("female.pvalue","male.pvalue","female.beta","male.beta",varInteractionPvalue)]

		# Rename columns
		colnames(results_f_m)<-c("female.pvalue","male.pvalue","female.beta","male.beta","Sex.Interaction.pvalue")
		
		# select the significant ones
		sig_n<-which(results_f_m$Sex.Interaction.pvalue<0.01)
		
		
		

		# Adjust colulns
		for (col in colnames(results_f_m))
		{
			# Replace values
			results_f_m[,col]<-formatC(results_f_m[,col],format="E")
		}

		# Create the plot
		print(paste(outputfolder,"SummaryFM.png",sep="/"))
		Cairo(width = 11.0, height = dim(results_f_m)[1]*0.45, units = 'in', res = 600, file=paste(outputfolder,"SummaryFM.png",sep="/"), type="png", bg="white")		
			# Truncate values
			tab <- ggtexttable(results_f_m,theme = ttheme("classic",base_size=16))		
			
					
			# For each cell
			for (cell in sig_n)
			{		
				
				# Ischemia
				color  = as.vector(varColor$Ischemia["Yes"])
							
		
				# Add color to cell
				tab <- table_cell_bg(tab, row = cell+1, column = 2,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = 3,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = 4,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = 5,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = 6,fill=color, color  = color)
			}				
			print(tab)
		dev.off()
	}else
	{
		# Var complete interaction title title
		varInteractionPvalue<-paste("interaction.pvalue",var,sep=".")
		varInteractionBeta<-paste("interaction.beta",var,sep=".")

		# Stopped here 
		# Summary cad data Metabolites part 2
		##########################################################################################################################################*
		# nonDMT2
		# For each protein
		# t.test
		# Scale protein levels
		# Take expression levels
		# Save final pvaules
		# Data frame with pvalue
		df_pvalue<-data.frame(nonDMT2=as.numeric(as.vector(featureSelection_selected[,"nonDMT2.pvalue"])),DMT2=as.numeric(as.vector(featureSelection_selected[,"DMT2.pvalue"])))

		# Data frame with pvalue
		df_beta<-data.frame(nonDMT2=as.numeric(as.vector(featureSelection_selected[,"nonDMT2.beta"])),DMT2=as.numeric(as.vector(featureSelection_selected[,"DMT2.beta"])))

		rownames(df_pvalue)<-rownames(featureSelection_selected)
		rownames(df_beta)<-rownames(featureSelection_selected)

		# Detect inversions in p-value
		# Inversion is characterized by sig -> nonsig
		# Inversion is characterized by nonsig -> sig
		# First, take significant in DMT2 and nonDMT2
		# Take p-value inversion
		inversions<-rownames(df_pvalue[which(as.numeric(as.vector(featureSelection_selected[,varInteractionPvalue]))<0.1),])

		# Set lables
		df_pvalue$Label<-""

		# Adjust labels
		df_pvalue[inversions,"Label"]<-inversions

		# Create plot
		Pvalu_invertion<-ggplot(df_pvalue, aes(x=1-log(nonDMT2), y=1-log(DMT2),label =df_pvalue$Label)) +geom_text_repel(data=df_pvalue, aes(label=Label))+ geom_point() + ggtitle(paste("p-value nonDMT2 vs. DMT2 : Ischemia ~ ",sep=""))+theme_bw()+ geom_hline(yintercept=1-log(0.1)) + geom_vline(xintercept=1-log(0.1))


		# Set lables
		df_beta$Label<-""

		# Adjust labels
		df_beta[inversions,"Label"]<-inversions

		# Create plot
		Beta_invertion<-ggplot(df_beta, aes(x=nonDMT2, y=DMT2,label =df_beta$Label)) +geom_text_repel(data=df_beta, aes(label=Label))+ geom_point() + ggtitle(paste("beta nonDMT2 vs. DMT2 : Ischemia ~ ",sep=""))+theme_bw()+ geom_hline(yintercept=0) + geom_vline(xintercept=0)

		# Print Association Results Patients All Var Info	
		print(paste(outputfolder,"AssociationResultsmicroFM.png",sep="/"))
		Cairo(width = 4.5, height = 7, units = 'in', res = 600, file=paste(outputfolder,"AssociationResultsmicroFM.png",sep="/"), type="png", bg="white")			
			g <- tableGrob(df_beta[,1:2])
			g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),t = 2, b = nrow(g), l = 1, r = ncol(g))
			beta_table <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(g))	
			g <- tableGrob(df_pvalue[,1:2])
			g <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),t = 2, b = nrow(g), l = 1, r = ncol(g))
			pvalue_table <- gtable_add_grob(g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(g))		
			print(ggarrange(plotlist=list(A=Pvalu_invertion,B=Beta_invertion), ncol = 1, nrow = 2,common.legend = FALSE, legend = "bottom"))				
		dev.off()

		# Create data frame
		results_f_m<-featureSelection_selected[,c("nonDMT2.pvalue","DMT2.pvalue","nonDMT2.beta","DMT2.beta",varInteractionPvalue)]

		# Rename columns
		colnames(results_f_m)<-c("nonDMT2.pvalue","DMT2.pvalue","nonDMT2.beta","DMT2.beta",varInteractionPvalue)
		
		# select the significant ones
		sig_n<-which(results_f_m$interaction.pvalue.DMT2_known<0.01)
		
		
		

		# Adjust colulns
		for (col in colnames(results_f_m))
		{
			# Replace values
			results_f_m[,col]<-formatC(results_f_m[,col],format="f",5)
		}

		# Create the plot
		print(paste(outputfolder,"SummaryFM.png",sep="/"))
		Cairo(width = 13.0, height = dim(results_f_m)[1]*0.45, units = 'in', res = 600, file=paste(outputfolder,"SummaryFM.png",sep="/"), type="png", bg="white")		
			# Truncate values
			tab <- ggtexttable(results_f_m,theme = ttheme("classic",base_size=16))		
			
					
			# For each cell
			for (cell in sig_n)
			{		
				
				# Ischemia
				color  = as.vector(varColor$Ischemia["Yes"])
							
		
				# Add color to cell
				tab <- table_cell_bg(tab, row = cell+1, column = 2,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = 3,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = 4,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = 5,fill=color, color  = color)
				tab <- table_cell_bg(tab, row = cell+1, column = 6,fill=color, color  = color)
			}				
			print(tab)
		dev.off()	
	}
}

##########################################################################################################################################
# Create table with average expression for submission
run_roc_joint2 <- function(expression_table_batchRemoved=NULL,CAD_molecule_work=NULL,ha_molecules=NULL,ddsPLS=NULL,outputfolder=outputfolder)
{
	##########################################################################################################################################
	library("MASS")
	library("pROC")
	
		
	# Create models
	formula.splsda=paste("Ischemia ~ ",paste(paste0("`", splsda, "`"),collapse=" + "),sep="")
	formula.ddsPLS=paste("Ischemia ~ Age + Sex + ",paste(paste0("`", ddsPLS, "`"),collapse=" + "),sep="")
	formula.stepAIC=paste("Ischemia ~ ",paste(paste0("`", stepAIC, "`"),collapse=" + "),sep="")
	formula.all76=paste("Ischemia ~ ",paste(paste0("`", all_76_molecules, "`"),collapse=" + "),sep="")
	
		
	# Produce glm model
	glm.splsda<-glm(formula=formula.splsda,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)	
	glm.ddsPLS<-glm(formula=formula.ddsPLS,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.stepAIC<-glm(formula=formula.stepAIC,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.all76<-glm(formula=formula.all76,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	

	# Create list
	roc_molecules<-list()
	roc_names<-list()
		
	
	# Save all rock curve in a list
	roc_molecules[["splsda"]] <- roc(Ischemia~glm.splsda$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["ddsPLS"]] <- roc(Ischemia~glm.ddsPLS$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["stepAIC"]] <- roc(Ischemia~glm.stepAIC$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["all"]] <- roc(Ischemia~glm.all76$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	
	# Calculate CI
	CI.splsda<-round(as.vector(roc_molecules[["splsda"]]$ci),3)	
	CI.ddsPLS<-round(as.vector(roc_molecules[["ddsPLS"]]$ci),3)	
	CI.stepAIC<-round(as.vector(roc_molecules[["stepAIC"]]$ci),3)	
	CI.all76<-round(as.vector(roc_molecules[["all"]]$ci),3)	
	
		
	# Save name of full model
	roc_names[["splsda"]] <-paste("splsda AUC=",CI.splsda[2]," 95%CI=",CI.splsda[1],"-",CI.splsda[3],sep="")
	roc_names[["ddsPLS"]] <-paste("ddsPLS AUC=",CI.ddsPLS[2]," 95%CI=",CI.ddsPLS[1],"-",CI.ddsPLS[3],sep="")
	roc_names[["stepAIC"]] <-paste("stepAIC AUC=",CI.stepAIC[2]," 95%CI=",CI.stepAIC[1],"-",CI.stepAIC[3],sep="")
	roc_names[["all"]] <-paste("all AUC=",CI.all76[2]," 95%CI=",CI.all76[1],"-",CI.all76[3],sep="")
	
	
	# Create first plot
	names(roc_molecules)<-roc_names
		
	colors<-c(colorblind_pal()(8)[1:4])
	#names(colors)<-c("ddsPLS.selection","microRNA.selection","metabolite.selection","biomarker.selection","info.selection")
	
	C<-ggroc(roc_molecules[2])+ geom_line()+ theme_bw()+ ggtitle("ROC curve analysis") + theme(legend.position = c(0.70, 0.3), legend.background = element_rect(color = NA,fill = NA, size = 1, linetype = "solid"))+theme(legend.title = element_blank())+ scale_color_manual(values = colors)
	
		 
	# Corrlation plot
	datalayer="_ROC"
	print(paste(outputfolder,"/",paste("ROC_Curve_plot_",datalayer,sep=""),".png",sep=""))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"/",paste("ROC_Curve_plot_",datalayer,sep=""),".png",sep=""), type="png", bg="white")		
			print(C)
	dev.off()
	
	
	# Produce step AIC
	stepAIC_glm.all76<-stepAIC(glm.all76,scope = list(upper=formula.all76,lower="Ischemia ~ Age + Sex"), trace = TRUE)		
	stepAIC_glm.stepAIC<-stepAIC(glm.stepAIC,scope = list(upper=formula.stepAIC), trace = TRUE)		
	stepAIC_glm.ddsPLS<-stepAIC(glm.ddsPLS,scope = list(upper=formula.ddsPLS), trace = TRUE)		
	stepAIC_glm.splsda<-stepAIC(glm.splsda,scope = list(upper=formula.splsda), trace = TRUE)		
	
	# Plor results
	# Plot stepAIC table
	table.all76<-plot_stepAIC_results(stepAIC_results=stepAIC_glm.all76,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_","all76",sep=""),".png",sep=""),dataset=expression_table_batchRemoved)	
	table.stepAIC<-plot_stepAIC_results(stepAIC_results=stepAIC_glm.stepAIC,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_","stepAIC",sep=""),".png",sep=""),dataset=expression_table_batchRemoved)	
	table.ddsPLS<-plot_stepAIC_results(stepAIC_results=stepAIC_glm.ddsPLS,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_","ddsPLS",sep=""),".png",sep=""),dataset=expression_table_batchRemoved)	
	table.splsda<-plot_stepAIC_results(stepAIC_results=stepAIC_glm.splsda,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_","splsda",sep=""),".png",sep=""),dataset=expression_table_batchRemoved)	

		
	# Re-generate formula
	formula.all76=paste("Ischemia ~ ",paste(unique(c("Age","Sex",rownames(table.all76))),collapse=" + "),sep="")	
	formula.stepAIC=paste("Ischemia ~ ",paste(unique(c("Age","Sex",rownames(table.stepAIC))),collapse=" + "),sep="")	
	formula.ddsPLS=paste("Ischemia ~ ",paste(unique(c("Age","Sex",rownames(table.ddsPLS))),collapse=" + "),sep="")	
	formula.splsda=paste("Ischemia ~ ",paste(unique(c("Age","Sex",rownames(table.splsda))),collapse=" + "),sep="")	
	
	# Produce glm model
	glm.splsda<-glm(formula=formula.splsda,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)	
	glm.ddsPLS<-glm(formula=formula.ddsPLS,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.stepAIC<-glm(formula=formula.stepAIC,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.all76<-glm(formula=formula.all76,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)	
	
	# Create list
	roc_molecules<-list()
	roc_names<-list()
		
	
	# Save all rock curve in a list
	roc_molecules[["splsda"]] <- roc(Ischemia~glm.splsda$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["ddsPLS"]] <- roc(Ischemia~glm.ddsPLS$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["stepAIC"]] <- roc(Ischemia~glm.stepAIC$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	roc_molecules[["all"]] <- roc(Ischemia~glm.all76$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)
	
	# Calculate CI
	CI.splsda<-round(as.vector(roc_molecules[["splsda"]]$ci),3)	
	CI.ddsPLS<-round(as.vector(roc_molecules[["ddsPLS"]]$ci),3)	
	CI.stepAIC<-round(as.vector(roc_molecules[["stepAIC"]]$ci),3)	
	CI.all76<-round(as.vector(roc_molecules[["all"]]$ci),3)	
	
		
	# Save name of full model
	roc_names[["splsda"]] <-paste("splsda AUC=",CI.splsda[2]," 95%CI=",CI.splsda[1],"-",CI.splsda[3],sep="")
	roc_names[["ddsPLS"]] <-paste("ddsPLS AUC=",CI.ddsPLS[2]," 95%CI=",CI.ddsPLS[1],"-",CI.ddsPLS[3],sep="")
	roc_names[["stepAIC"]] <-paste("stepAIC AUC=",CI.stepAIC[2]," 95%CI=",CI.stepAIC[1],"-",CI.stepAIC[3],sep="")
	roc_names[["all"]] <-paste("all AUC=",CI.all76[2]," 95%CI=",CI.all76[1],"-",CI.all76[3],sep="")
	
	
	# Create first plot
	names(roc_molecules)<-roc_names
		
	colors<-c(colorblind_pal()(8)[1:4])
	#names(colors)<-c("ddsPLS.selection","microRNA.selection","metabolite.selection","biomarker.selection","info.selection")
	
	C<-ggroc(roc_molecules)+ geom_line()+ theme_bw()+ ggtitle("ROC curve analysis") + theme(legend.position = c(0.70, 0.3), legend.background = element_rect(color = NA,fill = NA, size = 1, linetype = "solid"))+theme(legend.title = element_blank())+ scale_color_manual(values = colors)
	
		 
	# Corrlation plot
	datalayer="_ROC"
	print(paste(outputfolder,"/",paste("ROC_Curve_plot_",datalayer,sep=""),".png",sep=""))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"/",paste("ROC_Curve_plot_",datalayer,sep=""),".png",sep=""), type="png", bg="white")		
			print(C)
	dev.off()	
}

##########################################################################################################################################
##########################################################################################################################################
# Please remove « box blood samples » variable from the StepWise and AUC analysis and rerun
# StepAIC
##########################################################################################################################################
# Create table with average expression for submission
run_stepAIC2 <- function(expression_table_batchRemoved=NULL,patient_dataset=NULL,outputfolder=outputfolder,datalayer=NULL)
{
	library("MASS")
	library("pROC")

	# Create merged table
	CAD_molecule_work<-expression_table_batchRemoved

	# Merge tables
	CAD_molecule_work<-merge(data.frame(CAD_molecule_work,ID=rownames(CAD_molecule_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_molecule_work)<-as.vector(CAD_molecule_work$ID)

	# Remove col ID
	CAD_molecule_work<-CAD_molecule_work[,-c(1)]
	
	# Set colnames
	colnames(CAD_molecule_work)[1:dim(expression_table_batchRemoved)[2]]<-colnames(expression_table_batchRemoved)

	##########################################################################################################################################
	if(datalayer=="microRNAs")
	{
		# Create models
		#formula.full=paste("Ischemia ~ Sex + ",paste(colnames(CAD_Biomarkers),collapse=" + "),sep="")
		formula.full=paste("Ischemia ~ Age + Sex + DMT2_known + Smoking_known + ",paste(paste0("`", colnames(expression_table_batchRemoved), "`"),collapse=" + "),sep="")
		
	
	}else
	{
		# Create models
		#formula.full=paste("Ischemia ~ Sex + ",paste(colnames(CAD_Biomarkers),collapse=" + "),sep="")
		formula.full=paste("Ischemia ~ Age + Sex + DMT2_known + Smoking_known + ",paste(colnames(expression_table_batchRemoved),collapse=" + "),sep="")			
	}
	#formula.full=paste("Ischemia ~ Age + Sex + DMT2_known + Smoking_known + ",paste(paste0("`", gsub("`","",ddsPLS), "`"),collapse=" + "),sep="")
	
	# Produce glm model
	glm.full<-glm(formula=formula.full,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	

	# Produce step AIC
	stepAIC_glm.full<-stepAIC(glm.full,scope = list(upper=formula.full,lower="Ischemia ~ Age + Sex"), trace = TRUE)	
	
	# Plor results
	# Plot stepAIC table
	table<-plot_stepAIC_results(stepAIC_results=stepAIC_glm.full,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_",datalayer,sep=""),".png",sep=""),dataset=expression_table_batchRemoved)	
	#table<-plot_stepAIC_results(stepAIC_results=glm.full,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_","all",sep=""),".png",sep=""),dataset=expression_table_batchRemoved)	
	
	# Filter out talbe
	table<-table[which(table$POS<=2 |  as.numeric(as.vector(table$pvalue))<=0.05),]
	
	
	# Create list
	roc_molecules<-list()
	roc_names<-list()
	
			
	# Re-generate formula
	formula.full=paste("Ischemia ~ ",paste(unique(c("Age","Sex",rownames(table))),collapse=" + "),sep="")
	formula.interaction=paste("Ischemia ~ ",paste(unique(c(c("`hsa-miR-146b-5p`","`hsa-miR-146b-5p`*Sex"),"Age","Sex",rownames(table))),collapse=" + "),sep="")
	
		
	# Produce glm model
	glm.full<-glm(formula=formula.full,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.interaction<-glm(formula=formula.interaction,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	
	# Re-generate formula
	#formula.full=paste("Ischemia ~ ",paste(unique(c("Age","Sex","Insulin","Insulin*DMT2_known",rownames(table))),collapse=" + "),sep="")	

	# Save all rock curve in a list
	roc_molecules[["stepAIC.selection"]] <- roc(Ischemia~glm.full$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)	
	roc_molecules[["stepAIC.interaction"]] <- roc(Ischemia~glm.interaction$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)	
	
	# Calculate CI
	CI<-round(as.vector(roc_molecules[["stepAIC.selection"]]$ci),3)	
		
	# Save name of full model
	roc_names[["stepAIC.selection"]] <-paste("microRNAs AUC=",CI[2]," 95%CI=",CI[1],"-",CI[3],sep="")
	
	# Calculate CI
	CI<-round(as.vector(roc_molecules[["stepAIC.interaction"]]$ci),3)	
		
	# Save name of full model
	roc_names[["stepAIC.interaction"]] <-paste("microRNAs + interaction AUC=",CI[2]," 95%CI=",CI[1],"-",CI[3],sep="")	
	
	roc.test(roc_molecules[["stepAIC.selection"]],roc_molecules[["stepAIC.interaction"]])


	
	
	# Create first plot
	names(roc_molecules)<-roc_names
	C<-ggroc(roc_molecules)+ geom_line()+ theme_bw()+ ggtitle("ROC curve analysis of step selection model") + theme(legend.position = c(0.60, 0.3), legend.background = element_rect(color = NA,fill = NA, size = 1, linetype = "solid"))+theme(legend.title = element_blank())+ scale_color_manual(values = c("black","orange"))
	 
	# Corrlation plot
	print(paste(outputfolder,"/",paste("stepAIC_ROC_Curve_plot_",datalayer,sep=""),".png",sep=""))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_plot_",datalayer,sep=""),".png",sep=""), type="png", bg="white")		
			print(C)
	dev.off()
	

	
	return(table)

}




##########################################################################################################################################
variables<-c("hsTroponinI","HDLCholesterin","LDLCholesterin","Glucose","hsa-miR-10a","hsa-miR-183","hsa-miR-1274b","PC_aa_C32_3","PC_aa_C36_6","PC_aa_C38_4","PC_ae_C32_1","PC_ae_C32_2","PC_ae_C34_3","PC_ae_C36_1","PC_ae_C36_5","PC_ae_C40_2","lysoPC_a_C18_1","lysoPC_a_C18_2","SM_OH_C16_1","SM_C26_1")
variables<-c("PC_ae_C42_2","SM_OH_C14_1","SM_OH_C22_2","PC_aa_C28_1","hsa-miR-500b","hsa-miR-146b-5p","PC_ae_C38_6","PC_ae_C36_2","hsa-miR-335","hsa-miR-1274b","C12_1","Pro_BNP","Glucose","PC_ae_C36_3","hsTroponinI","PC_aa_C32_3","SM_C26_0","PC_ae_C32_2","lysoPC_a_C18_2","Hexose","hsa-miR-212","SM_OH_C24_1","SM_OH_C22_1","SM_C24_0","PC_ae_C34_2","PC_ae_C34_3","HDLCholesterin","Cholesterin","SM_C26_1","hsa-miR-10a","LDLCholesterin")
variables<-c("PC_ae_C34_2","PC_ae_C34_3","HDLCholesterin","Cholesterin","SM_C26_1","hsa-miR-10a","LDLCholesterin")
variables<-c("hsa-miR-660","hsa-miR-502-5p","hsa-miR-1914*","hsa-miR-183","hsa-miR-500b","hsa-miR-146b-5p","hsa-miR-335","hsa-miR-1274b","hsa-miR-212","hsa-miR-10a","CRP","Insulin","Pro_BNP","hsTroponinI","C12_1","lysoPC_a_C18_2","SM_OH_C24_1","SM_OH_C22_1","SM_C24_0","PC_ae_C34_2","PC_ae_C34_3","SM_C26_1")
variables<-c("C12_1","PC_ae_C34_2","SM_C24_0","SM_OH_C22_1","SM_OH_C24_1","lysoPC_a_C18_2","PC_ae_C34_3","SM_C26_1","hsa-miR-10a","hsa-miR-1274b","hsa-miR-146b-5p","hsa-miR-212","hsa-miR-335","hsa-miR-500b","hsTroponinI","Pro_BNP")
##########################################################################################################################################

##########################################################################################################################################


# Please remove « box blood samples » variable from the StepWise and AUC analysis and rerun
# StepAIC
##########################################################################################################################################
# Create table with average expression for submission
run_stepAIC3 <- function(expression_table_batchRemoved=NULL,patient_dataset=NULL,outputfolder=outputfolder,datalayer=NULL)
{
	library("MASS")
	library("pROC")

	# Create merged table
	CAD_molecule_work<-expression_table_batchRemoved

	# Merge tables
	CAD_molecule_work<-merge(data.frame(CAD_molecule_work,ID=rownames(CAD_molecule_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_molecule_work)<-as.vector(CAD_molecule_work$ID)

	# Remove col ID
	CAD_molecule_work<-CAD_molecule_work[,-c(1)]
	
	# Set colnames
	colnames(CAD_molecule_work)[1:dim(expression_table_batchRemoved)[2]]<-colnames(expression_table_batchRemoved)

	# Create models
	#formula.full=paste("Ischemia ~ Sex + ",paste(colnames(CAD_Biomarkers),collapse=" + "),sep="")		
	formula.full=paste("Ischemia ~ Age + Sex + DMT2_known  + ",paste(paste0("`", variables, "`"),collapse=" + "),sep="")
	formula.interaction=paste("Ischemia ~ Age + Smoking_known +Sex*Smoking_known+ Sex + DMT2_known + Sex*`hsa-miR-146b-5p` + SM_C24_1 + DMT2_known*SM_C24_1 + Insulin + DMT2_known*Insulin +",paste(paste0("`", variables, "`"),collapse=" + "),sep="")		
		
	# Produce glm model
	glm.full<-glm(formula=formula.full,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.interaction<-glm(formula=formula.interaction,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	

	# Produce step AIC
	stepAIC_glm.full<-stepAIC(glm.interaction,scope = list(upper=glm.interaction,lower=glm.interaction), trace = TRUE)	
	
	# Plor results
	# Plot stepAIC table
	table<-plot_stepAIC_results(stepAIC_results=stepAIC_glm.full,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_","integrative",sep=""),".png",sep=""),dataset=expression_table_batchRemoved[,variables])	
	
	# Filter out talbe
	table<-table[which(table$POS<=2 |  as.numeric(as.vector(table$pvalue))<=0.05),]
	
	
	# Create list
	roc_molecules<-list()
	roc_names<-list()
	
			

	
	# Re-generate formula
	#formula.full=paste("Ischemia ~ ",paste(unique(c("Age","Sex","Insulin","Insulin*DMT2_known",rownames(table))),collapse=" + "),sep="")	

	# Save all rock curve in a list
	roc_molecules[["stepAIC.selection"]] <- roc(Ischemia~glm.full$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)	
	roc_molecules[["stepAIC.interaction"]] <- roc(Ischemia~glm.interaction$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)	
	
	# Calculate CI
	CI<-round(as.vector(roc_molecules[["stepAIC.selection"]]$ci),3)	
		
	# Save name of full model
	roc_names[["stepAIC.selection"]] <-paste("Union AUC=",CI[2]," 95%CI=",CI[1],"-",CI[3],sep="")
	
	# Calculate CI
	CI<-round(as.vector(roc_molecules[["stepAIC.interaction"]]$ci),3)	
		
	# Save name of full model
	roc_names[["stepAIC.interaction"]] <-paste("Union + interactions AUC=",CI[2]," 95%CI=",CI[1],"-",CI[3],sep="")	
	
	


	
	
	# Create first plot
	names(roc_molecules)<-roc_names
	C<-ggroc(roc_molecules)+ geom_line()+ theme_bw()+ ggtitle("ROC curve union of signatures") + theme(legend.position = c(0.60, 0.3), legend.background = element_rect(color = NA,fill = NA, size = 1, linetype = "solid"))+theme(legend.title = element_blank())+ scale_color_manual(values = c("black","orange"))
	#C<-ggroc(roc_molecules)+ geom_line()+ theme_bw()+ ggtitle("ROC curve shared(ddSPLS,splsda)") + theme(legend.position = c(0.60, 0.3), legend.background = element_rect(color = NA,fill = NA, size = 1, linetype = "solid"))+theme(legend.title = element_blank())+ scale_color_manual(values = c("black","orange"))
	 
	# Corrlation plot
	print(paste(outputfolder,"/",paste("stepAIC_ROC_Curve_plot_","integrative",sep=""),".png",sep=""))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_plot_","integrative",sep=""),".png",sep=""), type="png", bg="white")		
			print(C)
	dev.off()
	

	
	return(table)

}

##################################################################################
##########################################################################################################################################
##########################################################################################################################################
# Please remove « box blood samples » variable from the StepWise and AUC analysis and rerun
# StepAIC
##########################################################################################################################################
# Create table with average expression for submission
run_stepAIC3 <- function(expression_table_batchRemoved=NULL,patient_dataset=NULL,outputfolder=outputfolder,datalayer=NULL)
{
	library("MASS")
	library("pROC")
	
	# Create full formula
	formula.reduced=paste("Ischemia ~ ",paste(paste0("`", c("Age","Sex","DMT2_known","hsTroponinI","HDLCholesterin","LDLCholesterin","Glucose","hsa-miR-10a","hsa-miR-183","hsa-miR-1274b","PC_aa_C32_3","PC_aa_C36_6","PC_aa_C38_4","PC_ae_C32_1","PC_ae_C32_2","PC_ae_C34_3","PC_ae_C36_1","PC_ae_C36_5","PC_ae_C40_2","lysoPC_a_C18_1","lysoPC_a_C18_2","SM_OH_C16_1","SM_C26_1"), "`"),collapse=" + "))
	formula.full=paste(formula.reduced,"+ `hsa-miR-146b-5p` + `Sex`*`hsa-miR-146b-5p` + `SM_C24_1` + `DMT2_known`*`SM_C24_1` + `Insulin` + `DMT2_known`*`Insulin` + `Sex`*`Smoking_known`",collapse="")
		
	# Create merged table
	CAD_molecule_work<-expression_table_batchRemoved

	# Merge tables
	CAD_molecule_work<-merge(data.frame(CAD_molecule_work,ID=rownames(CAD_molecule_work)),data.frame(CAD_Patients_Age,ID=rownames(CAD_Patients_Age)),by="ID")

	# Set rownames(CAD_Biomarkers_work)
	rownames(CAD_molecule_work)<-as.vector(CAD_molecule_work$ID)

	# Remove col ID
	CAD_molecule_work<-CAD_molecule_work[,-c(1)]
	
	# Set colnames
	colnames(CAD_molecule_work)[1:dim(expression_table_batchRemoved)[2]]<-colnames(expression_table_batchRemoved)


	# Produce glm model
	glm.full<-glm(formula=formula.full,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.reduced<-glm(formula=formula.reduced,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	

	# Produce step AIC
	stepAIC_glm.full<-stepAIC(glm.full,scope = list(upper=formula.full,lower="Ischemia ~ Age + Sex"), trace = TRUE)	
	
	# Plor results
	# Plot stepAIC table
	#table<-plot_stepAIC_results(stepAIC_results=stepAIC_glm.full,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_",datalayer,sep=""),".png",sep=""),dataset=expression_table_batchRemoved)	
	table<-plot_stepAIC_results(stepAIC_results=glm.full,filename=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_table_","all",sep=""),".png",sep=""),dataset=expression_table_batchRemoved)	
	
	# Filter out talbe
	table<-table[which(table$POS<=2 |  as.numeric(as.vector(table$pvalue))<=0.05),]
	
	#formula.full=paste("Ischemia ~ Age + Sex + DMT2_known + Smoking_known + ",paste(paste0("`", gsub("`","",ddsPLS), "`"),collapse=" + "),sep="")
	
	
	# Create list
	roc_molecules<-list()
	roc_names<-list()
	
			
	# Re-generate formula
	formula.full=gsub(":",":",paste("Ischemia ~ ",paste(unique(c("Age","Sex",rownames(table)[!grepl(":",rownames(table) )])),collapse=" + "),sep=""))
	formula.interaction=gsub(":","*",paste("Ischemia ~ ",paste(unique(c("Age","Sex",c("SM_C24_1","`hsa-miR-146b-5p`","Smoking_known"),rownames(table))),collapse=" + "),sep=""))
	
		
	# Produce glm model
	glm.full<-glm(formula=formula.full,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	glm.interaction<-glm(formula=formula.interaction,family=binomial(link='logit'), data=CAD_molecule_work, na.action=na.omit)
	
	# Re-generate formula
	#formula.full=paste("Ischemia ~ ",paste(unique(c("Age","Sex","Insulin","Insulin*DMT2_known",rownames(table))),collapse=" + "),sep="")	

	# Save all rock curve in a list
	roc_molecules[["stepAIC.selection"]] <- roc(Ischemia~glm.full$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)	
	roc_molecules[["stepAIC.interaction"]] <- roc(Ischemia~glm.interaction$fitted.values, data = CAD_molecule_work, plot = FALSE,ci=TRUE)	
	
	# Calculate CI
	CI<-round(as.vector(roc_molecules[["stepAIC.selection"]]$ci),3)	
		
	# Save name of full model
	roc_names[["stepAIC.selection"]] <-paste("Signature1 AUC=",CI[2]," 95%CI=",CI[1],"-",CI[3],sep="")
	
	# Calculate CI
	CI<-round(as.vector(roc_molecules[["stepAIC.interaction"]]$ci),3)	
		
	# Save name of full model
	roc_names[["stepAIC.interaction"]] <-paste("Signature1 + interaction AUC=",CI[2]," 95%CI=",CI[1],"-",CI[3],sep="")	
	
	roc.test(roc_molecules[["stepAIC.selection"]],roc_molecules[["stepAIC.interaction"]])


	
	
	# Create first plot
	names(roc_molecules)<-roc_names
	C<-ggroc(roc_molecules)+ geom_line()+ theme_bw()+ ggtitle("ROC curve analysis of step selection model") + theme(legend.position = c(0.60, 0.3), legend.background = element_rect(color = NA,fill = NA, size = 1, linetype = "solid"))+theme(legend.title = element_blank())+ scale_color_manual(values = c("black","orange"))
	 
	# Corrlation plot
	print(paste(outputfolder,"/",paste("stepAIC_ROC_Curve_plot_","all",sep=""),".png",sep=""))
	Cairo(width = 5, height = 5, units = 'in', res = 600, file=paste(outputfolder,"/",paste("stepAIC_ROC_Curve_plot_","all",sep=""),".png",sep=""), type="png", bg="white")		
			print(C)
	dev.off()
	

	
	return(table)

}
##################################################################################
